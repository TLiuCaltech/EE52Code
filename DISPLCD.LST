8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLCD
OBJECT MODULE PLACED IN DISPLCD.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE DISPLCD.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    DISPLCD
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DISPLCD                                 ;
                             6     ;                            LCD Display Functions                           ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:    Functions for scanning the keys.
                            12     ;
                            13     ; Revision History:
                            14     ;        2/4/16    Tim Liu    created file
                            15     ;        4/27/16   Tim Liu    wrote InitDisplay and added data/code segments
                            16     ;        4/28/16   Tim Liu    Added busy flag read and looping to InitDisplay
                            17     ;        4/29/16   Tim Liu    wrote SecToTime
                            18     ;        4/29/16   Tim Liu    wrote DisplayLCD
                            19     ;        5/4/16    Tim Liu    wrote DisplayTime
                            20     ;        5/4/16    Tim Liu    wrote DisplayArtist
                            21     ;        5/4/16    Tim Liu    wrote DisplayStringCopy helper function
                            22     ;
                            23     ;
                            24     ; Table of Contents
                            25     ;
                            26     ;    InitDisplay - initializes shared variables for display
                            27     ;    DisplayLCD - writes characters to the LCD
                            28     ;    SecToTime - converts time elapsed to mm:ss ASCII format
                            29     ;    Display_Time - displays the passed time to the LCD
                            30     ;    Display_Status - displays the passed status to the LCD
                            31     ;    Display_Title - displays track title on the LCD
                            32     ;    Display_Artist - displays track artist on the LCD
                            33     ;    DisplayStringCopy - helper function that copies a string to buffer
                            34     
                            35     ; local include files
                            36 +1  $INCLUDE(GENERAL.INC)
                      =1    37     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    38     ;                                                                            ;
                      =1    39     ;                                  General.INC                               ;
                      =1    40     ;                               General include file                         ;
                      =1    41     ;                                   EE/CS 51                                 ;
                      =1    42     ;                                                                            ;
                      =1    43     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    44     
                      =1    45     ; This file contains general definitions and constants.
                      =1    46     ;
                      =1    47     ; Revision History:
                      =1    48     ;    11/3/15     Timothy Liu     initial revision
                      =1    49     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    50     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1    52     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1    53     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1    54     
                      =1    55     
                      =1    56     
  0004                =1    57     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1    58     
  0002                =1    59     OffSize              EQU        2         ;offset size in bytes
                      =1    60     
                      =1    61     ;Ascii definitions
  000D                =1    62     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1    63     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1    64     ASCII_E              EQU       69         ;ASCII E
  0046                =1    65     ASCII_F              EQU       70         ;F character for fire (laser on)
  0049                =1    66     ASCII_I              EQU       73         ;I character
  004C                =1    67     ASCII_L              EQU       76         ;L character
  004F                =1    68     ASCII_O              EQU       79         ;O character for off (laser off)
  0050                =1    69     ASCII_P              EQU       80         ;P character
  0052                =1    70     ASCII_R              EQU       82         ;R character
  0053                =1    71     ASCII_S              EQU       83         ;S character
  0054                =1    72     ASCII_T              EQU       84         ;T character
  0000                =1    73     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1    74     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1    75     ASCII_COLON          EQU       58         ;ASCII colon
  003E                =1    76     ASCII_RArrow         EQU       62         ;ASCII > symbol
                      =1    77     
  0001                =1    78     TRUE                 EQU        1         ;true
  0000                =1    79     FALSE                EQU        0         ;false
                      =1    80     
  0002                =1    81     WORD_SIZE            EQU        2         ;2 bytes per word
                            82 +1  $INCLUDE(DISPLCD.INC)
                      =1    83     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    84     ;                                                                            ;
                      =1    85     ;                                   dispLCD.inc                              ;
                      =1    86     ;                            LCD Display Include File                        ;
                      =1    87     ;                                   EE/CS 52                                 ;
                      =1    88     ;                                                                            ;
                      =1    89     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    90     
                      =1    91     ; This files contains the definitions for dispLCD
                      =1    92     ;
                      =1    93     ; Revision History:
                      =1    94     ;    4/26/16   Timothy Liu    created file - initial revision
                      =1    95     ;    4/27/16   Tim Liu   Added buffer sizes and LCD reg addresses and values
                      =1    96     ;    4/29/16   Tim Liu   Added buffer indexes
                      =1    97     
  0080                =1    98     LCDInsReg       EQU    80h         ;address of LCD instruction register
  0081                =1    99     LCDDatReg       EQU    81h         ;address of LCD data register
  000F                =1   100     LCDInitVal      EQU    0fh         ;00001--- display on/off control
                      =1   101                                        ;-----1-- display on
                      =1   102                                        ;------1- cursor on
                      =1   103                                        ;-------1 blinking on
                      =1   104     
  0038                =1   105     LCDFunSetVal    EQU    38h         ;00111000
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106                                        ;--1----- function set control
                      =1   107                                        ;---1---- 8 bit data
                      =1   108                                        ;----1--- 2 lines
                      =1   109                                        ;-----000 donb^^t care
                      =1   110     
  0080                =1   111     BusyFlagMask    EQU    10000000b   ;mask out low 7 bits to get busy flag
  0000                =1   112     BusyReady       EQU    0           ;busy flag is now ready
                      =1   113     
  8C96                =1   114     MaxTime         EQU    35990       ;max time that can be displayed (tenths
                      =1   115                                        ;of second)
  FFFF                =1   116     TIME_NONE       EQU    65535       ;display no time
                      =1   117     
                      =1   118     
                      =1   119     ;buffer indexes
  0003                =1   120     SecPos            EQU    3         ;index of where to start writing sec
  0005                =1   121     ColonPos          EQU    5         ;index of where to write colon
  0003                =1   122     TimeBufStart      EQU    3         ;index of where the time starts - 
                      =1   123                                        ;extra spaces in the buffer are padding 0
                      =1   124     
                      =1   125     ;Buffer sizes
  0009                =1   126     TimeBufSize       EQU    9         ;size of time buffer in bytes
                      =1   127                                        ;buffer is extra large b/c Dec2String
                      =1   128                                        ;writes padding zeroes
  000E                =1   129     TrackBufSize      EQU    14        ;size of track buffer in bytes
  0003                =1   130     StatusBufSize     EQU    3         ;size of status buffer in bytes
  000B                =1   131     ArtistBufSize     EQU    11        ;size of artist buffer in bytes
                      =1   132     
                      =1   133     ;Data display types
                      =1   134     
  0000                =1   135     TypeTrack        EQU    0          ;type identifying track name
  0001                =1   136     TypeAction       EQU    1          ;type identifying action
  0002                =1   137     TypeArtist       EQU    2          ;type identifying artist
  0003                =1   138     TypeTime         EQU    3          ;type identifying time remaining
                      =1   139     
  0004                =1   140     NumStatus        EQU    4          ;number of different statuses
  0003                =1   141     NumStatChar      EQU    3          ;number of status characters
                           142     
                           143     CGROUP    GROUP    CODE
                           144     DGROUP    GROUP    DATA
                           145     
----                       146     CODE SEGMENT PUBLIC 'CODE'
                           147     
                           148             ASSUME  CS:CGROUP, DS:DGROUP
                           149     
                           150     ;external function declarations
                           151     
                           152             EXTRN    Dec2String:NEAR            ;convert decimals to strings
                           153     
                           154     ;Name:               InitDisplayLCD
                           155     ;
                           156     ;Description:        This function initializes the shared variables for
                           157     ;                    the display functions. The function also writes 
                           158     ;                    InitLCDVal to LCDInsReg to turn on the display
                           159     ;                    and turn on the cursor.
                           160     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ;Operation:          None
                           162     ;
                           163     ;Arguments:          None
                           164     ;
                           165     ;Return Values:      None
                           166     ;
                           167     ;Local Variables:    None
                           168     ;
                           169     ;Shared Variables:   None
                           170     ;
                           171     ;Input:              None
                           172     ;
                           173     ;Output:             None
                           174     ;
                           175     ;Error Handling:     None
                           176     ;
                           177     ;Algorithms:         None
                           178     ;
                           179     ;Registers Used:     None
                           180     ;
                           181     ;Known Bugs:         None
                           182     ;
                           183     ;Limitations:        None
                           184     ;
                           185     ;Last Modified:      4/28/16
                           186     
                           187     ;Outline
                           188     
                           189     
0000                       190     InitDisplayLCD        PROC    NEAR
                           191                           PUBLIC  InitDisplayLCD
0000                       192     InitDisplayStart:              ;starting label
0000 50                    193         PUSH   AX                  ;save register
                           194     
0001                       195     InitDisplayOut:                ;output setup command to LCD
0001 B00F                  196         MOV    AL, LCDInitVal      ;load LCD initialization command
0003 E680                  197         OUT    LCDInsReg, AL       ;write display control command
                           198     
0005                       199     InitDisplayCheckBusy:
0005 E480                  200         IN     AL, LCDInsReg       ;read the status register
0007 2480                  201         AND    AL, BusyFlagMask    ;mask out lower 7 bits
0009 3C00                  202         CMP    AL, BusyReady       ;check if busy flag is set
000B 7402                  203         JE     InitDisplayFunSet   ;not busy - output function set
000D EBF6                  204         JMP    InitDisplayCheckBusy;not ready - keep looping
                           205     
000F                       206     InitDisplayFunSet:             ;output function set command to LCD
000F B038                  207         MOV    AL, LCDFunSetVal    ;load function set command
0011 E680                  208         OUT    LCDInsReg, AL       ;write function set command
                           209     
                           210     
0013                       211     InitDisplayLCDDone:            ;done with function
0013 58                    212         POP   AX                   ;restore register
                           213     
0014 C3                    214         RET                        
                           215     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     InitDisplayLCD    ENDP
                           217     
                           218     
                           219     
                           220     ;Name:               DisplayLCD
                           221     ;
                           222     ;Description:        This function takes two arguments. The first argument is
                           223     ;                    the address of a string for it to display. The second
                           224     ;                    argument is an integer describing the type of
                           225     ;                    information to be displayed. The second argument is used
                           226     ;                    as an index into a byte table that stores the starting
                           227     ;                    address of each type of data. The function then writes
                           228     ;                    ASCII characters to the LCD one character at a time.
                           229     ;                    The function stops writing when it reaches a null
                           230     ;                    character in the string passed to it. Once the function
                           231     ;                    is done writing, the function will return.
                           232     ;
                           233     ;Operation:          The string to write is passed to the function through
                           234     ;                    ES:SI. The type of information is passed through BX
                           235     ;                    as an integer. The integer is used to index into
                           236     ;                    DisplayInfoTable to find the starting cursor position
                           237     ;                    for each type of information. The function
                           238     ;                    loops through the string that was passed and writes
                           239     ;                    to the LCD. After each character is written, the 
                           240     ;                    function increments the cursor to the next character.
                           241     ;                    The function loops checking the busy flag after each
                           242     ;                    write to the LCD. Only once the LCD busy flag is clear
                           243     ;                    will the function write the next character.
                           244     ;                    Once the ASCII null character is reached the function
                           245     ;                    returns.
                           246     ;
                           247     ;Arguments:          String(ES:SI) - pointer to string to display
                           248     ;                    Type (BX) - integer indicating type of info to display
                           249     ;
                           250     ;Return Values:      None
                           251     ;
                           252     ;Local Variables:    Cursor - position of the cursor
                           253     ;
                           254     ;
                           255     ;Shared Variables:   None
                           256     ;
                           257     ;Input:              None
                           258     ;
                           259     ;Output:             None
                           260     ;
                           261     ;Error Handling:     None
                           262     ;
                           263     ;Algorithms:         None
                           264     ;
                           265     ;Registers Used:     None
                           266     ;
                           267     ;Known Bugs:         None
                           268     ;
                           269     ;Limitations:        None
                           270     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;Last Modified:      4/28/16
                           272     
                           273     
0015                       274     DisplayLCD        PROC    NEAR
                           275                       PUBLIC  DisplayLCD
                           276     
0015                       277     DisplayLCDStart:                           ;save registers
0015 56                    278         PUSH    SI
0016 50                    279         PUSH    AX
                           280     
0017                       281     DisplayLCDLookUp:                          ;lookup start address of info type
0017 2E8A876501     R      282         MOV    AL, CS:DisplayInfoTable[BX]     ;AL stores LCD DDRAM location
                           283     
001C                       284     DisplayLCDSetStart:                        ;set cursor to start position
001C E680                  285         OUT   LCDInsReg, AL                    ;write cursor pos to ins reg
                           286     
001E                       287     DisplayLCDCheckEnd:                        ;check if end of buffer reached
001E 26803C00              288         CMP   BYTE PTR ES:[SI], ASCII_NULL     ;buffers are null terminated
0022 7412                  289         JE    DisplayLCDEnd                    ;reach end of buffer
                           290     
0024                       291     DisplayLCDBusy:                            ;check if busy flag is set
0024 E480                  292         IN     AL, LCDInsReg                   ;read the status register
0026 2480                  293         AND    AL, BusyFlagMask                ;mask out lower 7 bits
0028 3C00                  294         CMP    AL, BusyReady                   ;check if busy flag is set
002A 7402                  295         JE     DisplayLCDWrite                 ;ready - go write to display
002C EBF6                  296         JMP    DisplayLCDBusy                  ;not ready - keep looping
                           297     
002E                       298     DisplayLCDWrite:
002E 268A04                299         MOV    AL, ES:[SI]                     ;copy character to output register
0031 E681                  300         OUT    LCDDatReg, AL                   ;output to display
0033 46                    301         INC    SI                              ;next element of buffer
0034 EBE8                  302         JMP    DisplayLCDCheckEnd              ;go check for null char
                           303         
0036                       304     DisplayLCDEnd:                              ;end - restore registers
0036 58                    305         POP    AX
0037 5E                    306         POP    SI
0038 C3                    307         RET
                           308     
                           309     
                           310     DisplayLCD        ENDP
                           311     
                           312     ;Name:               SecToTime
                           313     ;
                           314     ;Description:        The function is passed an unsigned integer as an
                           315     ;                    and argument. The argument represents the amount of
                           316     ;                    time remaining in the track in tenths of a second.
                           317     ;                    This function converts the time remaining in tenths
                           318     ;                    of a second to minute:second (mm:ss) format. The
                           319     ;                    function truncates the number of seconds. If the 
                           320     ;                    amount of time remaining exceeds MAX_TIME, or if
                           321     ;                    the time to be displayed is TIME_NONE, then the function
                           322     ;                    displays blank segment patterns where the time should
                           323     ;                    be displayed.
                           324     ;                    
                           325     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;Operation:          The function first divides the amount of time remaining
                           327     ;                    by ten to get the number of seconds. The function then
                           328     ;                    divides the number of seconds by 60 seconds in a minute
                           329     ;                    to get the number of minutes remaining. The function
                           330     ;                    calls Dec2String to convert the number of minutes
                           331     ;                    to an ASCII string. The ASCII string is written to the
                           332     ;                    first two characters of TimeBuffer.The function takes
                           333     ;                    the remainder of the division and calls Dec2String to
                           334     ;                    convert the number of seconds to a string. The function
                           335     ;                    writes to location SecondStart of TimeBuffer. The
                           336     ;                    function then writes ASCII_COLON to location TimeColon
                           337     ;                    of TimeBuffer. If Time_remaining exceeds MAX_TIME, the
                           338     ;                    function writes a blank character patterns to the
                           339     ;                    TimeBuffer.
                           340     ;
                           341     ;Arguments:          Time_remaining (AX) - number of tenths of seconds
                           342     ;                    remaining in the track.
                           343     ;
                           344     ;Return Values:      None
                           345     ;
                           346     ;Local Variables:    None
                           347     ;
                           348     ;Shared Variables:   TimeBuffer (R/W) - buffer for holding time in mm:ss
                           349     ;                    format
                           350     ;
                           351     ;Input:              None
                           352     ;
                           353     ;Output:             None
                           354     ;
                           355     ;Error Handling:     Checks that the passed time does not exceed MAX_TIME
                           356     ;
                           357     ;Algorithms:         None
                           358     ;
                           359     ;Registers Used:     AX
                           360     ;
                           361     ;Known Bugs:         None
                           362     ;
                           363     ;Limitations:        None
                           364     ;
                           365     ;Last Modified:      4/28/16
                           366     
                           367     ;Outline
                           368     ;SecToTime()
                           369     ;    IF Time_Remaining <= MAX_TIME:      ;check time doesnb^^t exceed limit    
                           370     ;        Time_remaining /= 10            ;convert to seconds
                           371     ;        Seconds = Time_remaining mod 60   ;mod 60 to get seconds
                           372     ;        Minutes = Time_remaining / 60   ;divide by 60 to get minutes
                           373     ;        Dec2String(TimeBuffer, Minutes) ;convert minutes to ASCII string
                           374     ;                                    ;and write to time buffer
                           375     ;        Dec2String(TimeBuffer + SecondStart, Seconds)
                           376     ;                                    ;write seconds to time buffer
                           377     ;        TimeBuffer[TimeColon] = ASCII_Colon  ;write colon between mm:ss
                           378     ;        Carry Flag = 0                  ;clear carry flag for no error
                           379     ;    ELSE:
                           380     ;        Carry Flag = 1                  ;MAX_TIME exceeded
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;    RETURN
                           382     
0039                       383     SecToTime        PROC    NEAR
                           384                      PUBLIC  SecToTime
                           385     
0039                       386     SecToTimeStart:                          ;starting label - save registers
0039 53                    387         PUSH   BX                            ;save registers
003A 52                    388         PUSH   DX                            
003B 56                    389         PUSH   SI
                           390     
003C                       391     SecToTimeCheck:                          ;check time doesnb^^t exceed MAX_TIME
003C 3D968C                392         CMP    AX, MAXTIME                   ;
003F 772E                  393         JA     SecToTimeBlankLoad            ;time too high to display
                           394         ;JMP   SecToTimeDivide               ;time under limit-start calculating
                           395     
0041                       396     SecToTimeDivide:
0041 BB0A00                397         MOV    BX, 10                        ;tenths of a second in a second
0044 33D2                  398         XOR    DX, DX                        ;clear out the high order byte
0046 F7F3                  399         DIV    BX                            ;divide time to get seconds left
                           400     
0048 BB3C00                401         MOV    BX, 60                        ;divide by seconds in a minute
004B 33D2                  402         XOR    DX, DX                        ;clear out high order byte
004D F7F3                  403         DIV    BX                            ;minutes in AX seconds in DX
                           404     
                           405     
004F                       406     SecToTimeWriteTime:                      ;write time to TimeBuffer
004F 92                    407         XCHG   AX, DX                        ;swap minutes and seconds
                           408                                              ;so that sec in AX and min in DX
0050 8D360000       R      409         LEA    SI, TimeBuffer                ;load argument for Dec2String
0054 83C603                410         ADD    SI, SecPos                    ;compute location for writing sec
0057 E80000         E      411         CALL   Dec2String                    ;write seconds to TimeBuf
005A 8BC2                  412         MOV    AX, DX                        ;copy minutes to Dec2String arg
005C 8D360000       R      413         LEA    SI, TimeBuffer                ;address to write minutes to
0060 E80000         E      414         CALL   Dec2String                    ;write seconds to TimeBuffer
                           415     
0063                       416     SectoTimeWriteColon:                     ;write colon between min and sec
0063 BB0500                417         MOV    BX, ColonPos                  ;load index of colon
0066 C68700003A90   R      418         MOV    TimeBuffer[BX], ASCII_COLON   ;write colon
006C EB1B90                419         JMP    SecToTimeDone                 ;done with function
                           420         
006F                       421     SecToTimeBlankLoad:                      ;write blank segment patterns
006F BB0000                422         MOV    BX, 0                         ;array index
                           423     
0072                       424     SecToTimeBlankLoop:
0072 83FB09                425         CMP    BX, TimeBufSize               ;check if array has been filled
0075 7409                  426         JE     SecToTimeBlankEnd             ;done writing 5 blanks
                           427     
0077                       428     SecToTimeWriteBlank:                     ;write blanks to the TimeBuffer
0077 C68700002090   R      429         MOV    TimeBuffer[BX], ASCII_SPACE   ;
007D 43                    430         INC    BX                            ;move index to next element
007E EBF2                  431         JMP    SecToTimeBlankLoop            ;go back to loop
                           432     
0080                       433     SecToTimeBlankEnd:
0080 BB0800                434         MOV    BX, TimeBufSize - 1           ;index of last element of buffer
0083 C68700000090   R      435         MOV    TimeBuffer[BX], ASCII_NULL    ;time buffer is null terminated
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           436     
0089                       437     SecToTimeDone:
0089 5E                    438         POP    SI                            ;restore registers
008A 5A                    439         POP    DX
008B 5B                    440         POP    BX
008C C3                    441         RET
                           442     
                           443     
                           444     SecToTime    ENDP
                           445     
                           446     ;Name:               DisplayTime(Deci_Left)
                           447     ;
                           448     ;Description:        This function calls the DisplayLCD function to
                           449     ;                    display the time remaining in the track. The 
                           450     ;                    function first calls the SecToTime function to
                           451     ;                    convert the number of seconds the ASCII mm:ss format.
                           452     ;                    The function then calls DisplayLCD with the starting
                           453     ;                    address of TimeBuffer to be displayed. The function
                           454     ;                    also passes TypeTime to Display LCD to indicate
                           455     ;                    that the time remaining is being displayed. 
                           456     ;
                           457     ;Operation:          The function passes the argument of DisplayTime to 
                           458     ;                    SecToTime to convert the time to an ASCII
                           459     ;                    string in mm:ss format. The argument is passed through
                           460     ;                    BX. SecToTime writes the time to TimeBuffer. Display
                           461     ;                    Time then calls the function DisplayLCD to display
                           462     ;                    the time. The address of the time buffer is loaded
                           463     ;                    into SI and incremented by TimeBufStartInd since the 
                           464     ;                    first several elements of TimeBuffer are blanks. DS is copied
                           465     ;                    to ES and ES:SI is passed to DisplayLCD. The constant
                           466     ;                    TypeTime is copied to BX and passed to DisplayLCD
                           467     ;                    to indicate that the time should be displayed
                           468     ;
                           469     ;Arguments:          Deci_Left - tenths of seconds left in track
                           470     ;
                           471     ;Return Values:      None
                           472     ;
                           473     ;Local Variables:    None
                           474     ;
                           475     ;Shared Variables:   None
                           476     ;
                           477     ;Input:              None
                           478     ;
                           479     ;Output:             None
                           480     ;
                           481     ;Error Handling:     None
                           482     ;
                           483     ;Algorithms:         None
                           484     ;
                           485     ;Registers Used:     None
                           486     ;
                           487     ;Known Bugs:         None
                           488     ;
                           489     ;Limitations:        None
                           490     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           491     ;Last Modified:      5/4/16
                           492     
                           493     
                           494     
008D                       495     Display_Time        PROC    NEAR
                           496                         PUBLIC  Display_Time
                           497     
008D                       498     DisplayTimeStart:                           ;starting label
008D 55                    499         PUSH    BP
008E 8BEC                  500         MOV     BP, SP                          ;copy stack pointer
0090 56                    501         PUSH    SI                              ;save register
0091 53                    502         PUSH    BX
                           503     
0092                       504     DisplayTimeWrite:                           ;call function to write time
0092 8B4604                505         MOV     AX, SS:[BP+4]                   ;copy argument off stack
0095 E8A1FF                506         CALL    SecToTime                       ;AX has time - write to TimeBuffer
                           507     
0098                       508     DisplayTimeLoadArg:                         ;load arguments
0098 8D360000       R      509         LEA    SI, TimeBuffer                   ;start address of TimeBuffer
009C 83C603                510         ADD    SI, TimeBufStart                 ;increment to where time starts
009F 8CDB                  511         MOV    BX, DS                           ;copy DS to ES
00A1 8EC3                  512         MOV    ES, BX                           ;
00A3 BB0300                513         MOV    BX, TypeTime                     ;arg indicating display the time
                           514     
00A6                       515     DisplayTimeDisplay:                         ;call DisplayLCD to display
00A6 E86CFF                516         CALL   DisplayLCD                       ;display the time
                           517     
00A9                       518     DisplayTimeDone:                            ;finished - restore registers
00A9 5B                    519         POP    BX
00AA 5E                    520         POP    SI
00AB 5D                    521         POP    BP
00AC C3                    522         RET
                           523     
                           524     
                           525     Display_Time    ENDP
                           526     
                           527     
                           528     ;Name:               Display_Status(Status)
                           529     ;
                           530     ;Description:        This function takes an integer that maps to a status
                           531     ;                    as its argument. The function looks up the string
                           532     ;                    associated with the integer in StatusTable, which 
                           533     ;                    is a table of fixed length strings. The function
                           534     ;                    calls the function DisplayLCD with the address
                           535     ;                    of the corresponding string and Type_Status to
                           536     ;                    indicate that a status string is being displayed.
                           537     ;
                           538     ;Operation:          The function multiplies the integer status by the
                           539     ;                    size of each table entry of StatusTable to find the
                           540     ;                    offset of the corresponding status string. The
                           541     ;                    function copies CS to ES and passes the address of the
                           542     ;                    status string to DisplayLCD. The function also
                           543     ;                    passes Type_Status to indicate to DisplayLCD that the
                           544     ;                    status is being displayed.
                           545     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           546     ;Arguments:          Status - integer representing status
                           547     ;
                           548     ;Return Values:      None
                           549     ;
                           550     ;Local Variables:    String (SI) - address of string to write
                           551     ;
                           552     ;Shared Variables:   None
                           553     ;
                           554     ;Input:              None
                           555     ;
                           556     ;Output:             None
                           557     ;
                           558     ;Error Handling:     None
                           559     ;
                           560     ;Algorithms:         None
                           561     ;
                           562     ;Registers Used:     None
                           563     ;
                           564     ;Known Bugs:         None
                           565     ;
                           566     ;Limitations:        None
                           567     ;
                           568     ;Last Modified:      2/4/16
                           569     
                           570     ;Outline
                           571     ;Display_Status(Status)
                           572     ;    Status *= SIZEOF(StatusTableEntry)      ;multiply by table entry
                           573     ;    Status += OFFSET(StatusTable)           ;calculate string address
                           574     ;    ES = CS                                 ;set segment
                           575     ;    String = StatusTable[Status]            ;string to display
                           576     ;    DisplayLCD(String, TypeStatus)          ;call Display LCD to show status
                           577     ;    RETURN
                           578     
00AD                       579     Display_Status        PROC    NEAR
                           580                           PUBLIC  Display_Status
                           581     
00AD                       582     DisplayStatusStart:                          ;set up regs to access stack
00AD 55                    583         PUSH    BP
00AE 8BEC                  584         MOV     BP, SP
00B0 50                    585         PUSH    AX                               ;save registers
00B1 53                    586         PUSH    BX
00B2 51                    587         PUSH    CX
00B3 56                    588         PUSH    SI
                           589     
00B4                       590     DisplayStatusPullArg:                        ;pull argument off the stack
00B4 8B5E04                591         MOV    BX, SS:[BP+4]                     ;index indicating status
00B7 B90300                592         MOV    CX, NumStatChar                   ;status chars left to write
00BA 8D361700       R      593         LEA    SI, StatusBuffer                  ;buffer to write to
                           594     
00BE                       595     DisplayStatusLoop:                           ;loop and write to StatusBuffer
00BE 83F900                596         CMP    CX, 0                             ;check if no more characters
00C1 740E                  597         JE     DisplayStatusCall                 ;no more char - done
                           598     
00C3                       599     DisplayStatusWrite:                          ;write characters
00C3 2E8A876901     R      600         MOV    AL, CS:StatusTable[BX]            ;look up character to write
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

00C8 8804                  601         MOV    [SI], AL                          ;write to buffer
00CA 83C304                602         ADD    BX, NumStatus                     ;increment to next char
00CD 46                    603         INC    SI                                ;write to next location
00CE 49                    604         DEC    CX                                ;one fewer char to write
00CF EBED                  605         JMP    DisplayStatusLoop                 ;jump back to loop
                           606     
00D1                       607     DisplayStatusCall:                           ;call function to display
00D1 8D361700       R      608         LEA    SI, StatusBuffer                  ;address of buffer arg
00D5 8CD8                  609         MOV    AX, DS                            ;copy DS to ES
00D7 8EC0                  610         MOV    ES, AX
00D9 BB0100                611         MOV    BX, TypeAction                    ;specify data type
00DC E836FF                612         CALL   DisplayLCD                        ;call function to display
                           613     
00DF                       614     DisplayStatusDone:                           ;restore registers
00DF 5E                    615         POP   SI
00E0 59                    616         POP   CX
00E1 5B                    617         POP   BX
00E2 58                    618         POP   AX
00E3 5D                    619         POP   BP
00E4 C3                    620         RET
                           621     
                           622     
                           623     Display_Status    ENDP
                           624     
                           625     
                           626     
                           627     
                           628     ;Name:               Display_Title(char far * Title_String)
                           629     ;
                           630     ;Description:        This function is passed the address of the string
                           631     ;                    to be displayed. The function calls the function
                           632     ;                    DisplayStringCopy to copy the string to the
                           633     ;                    TitleBuffer. The function then calls DisplayLCD
                           634     ;                    to display the track name.
                           635     ;
                           636     ;Operation:          The function first reads from the stack and copies
                           637     ;                    the segment  of the string to ES and the offset to SI.
                           638     ;                    The function then stores the starting address of 
                           639     ;                    TrackBuffer in BX and TrackBufSize in CX. The 
                           640     ;                    function calls DisplayStringCopy which writes the 
                           641     ;                    string to be displayed to TrackBuffer. Display_Title
                           642     ;                    then copies DS to ES and loads the address of
                           643     ;                    TrackBuffer to SI. The constant TypeTrack is placed
                           644     ;                    in BX and the DisplayLCD is called. The function
                           645     ;                    then restores the saved registers and returns.
                           646     ;
                           647     ;Arguments:          Title_String - address of string to display
                           648     ;                                   passed through stack
                           649     ;
                           650     ;Return Values:      None
                           651     ;
                           652     ;Local Variables:    None
                           653     ;
                           654     ;Shared Variables:   None
                           655     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           656     ;Input:              None
                           657     ;
                           658     ;Output:             None
                           659     ;
                           660     ;Error Handling:     None
                           661     ;
                           662     ;Algorithms:         None
                           663     ;
                           664     ;Registers Used:     None
                           665     ;
                           666     ;Known Bugs:         None
                           667     ;
                           668     ;Limitations:        None
                           669     ;
                           670     ;Last Modified:      5/4/16
                           671     
                           672     
                           673     
                           674     
00E5                       675     Display_Title         PROC    NEAR
                           676                           PUBLIC  Display_Title
                           677     
00E5                       678     DisplayTitleStart:                         ;starting label
00E5 55                    679         PUSH    BP                             ;save register
00E6 8BEC                  680         MOV     BP, SP                         ;use BP to index into the stack
00E8 56                    681         PUSH    SI                             ;save registers
00E9 50                    682         PUSH    AX
00EA 53                    683         PUSH    BX
00EB 51                    684         PUSH    CX
                           685     
00EC                       686     DisplayTitleArgs:                          ;load args for DisplayStringCopy
00EC 8E4606                687         MOV     ES, SS:[BP+6]                  ;string segment
00EF 8B7604                688         MOV     SI, SS:[BP+4]                  ;string offset
00F2 8D1E0900       R      689         LEA     BX, TrackBuffer                ;target buffer
00F6 B90E00                690         MOV     CX, TrackBufSize               ;size of TrackBuffer
00F9 E83F00                691         CALL    DisplayStringCopy              ;copy string to TrackBuffer
                           692     
00FC                       693     DisplayTitleDisplay:                       ;call DisplayLCD
00FC 8CD8                  694         MOV    AX, DS                          ;copy DS to ES
00FE 8EC0                  695         MOV    ES, AX
0100 BB0000                696         MOV    BX, TypeTrack                   ;tells DisplayLCD data type
0103 8D360900       R      697         LEA    SI, TrackBuffer                 ;address of buffer to display
0107 E80BFF                698         CALL   DisplayLCD                      ;display the string
                           699     
010A                       700     DisplayTitleDone:                          ;finished - restore registers
010A 59                    701         POP    CX
010B 5B                    702         POP    BX
010C 58                    703         POP    AX
010D 5E                    704         POP    SI
010E 5D                    705         POP    BP
010F C3                    706         RET
                           707     
                           708     Display_Title    ENDP
                           709     
                           710     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           711     
                           712     ;Name:               Display_Artist(char far * Artist_String)
                           713     ;
                           714     ;Description:        This function is passed the address of the string
                           715     ;                    to be displayed. The function calls the function
                           716     ;                    DisplayStringCopy to copy the string to the
                           717     ;                    ArtistBuffer. The function then calls DisplayLCD
                           718     ;                    to display the artist.
                           719     ;
                           720     ;Operation:          The function first reads from the stack and copies
                           721     ;                    the segment  of the string to ES and the offset to SI.
                           722     ;                    The function then stores the starting address of 
                           723     ;                    ArtistBuffer in BX and ArtistBufSize in CX. The 
                           724     ;                    function calls DisplayStringCopy which writes the 
                           725     ;                    string to be displayed to ArtistBuffer. Display_Artist
                           726     ;                    then copies DS to ES and loads the address of
                           727     ;                    ArtistBuffer to SI. The constant TypeArtist is placed
                           728     ;                    in BX and the DisplayLCD is called. The function
                           729     ;                    then restores the saved registers and returns.
                           730     ;
                           731     ;Arguments:          Artist_String - address of string to display
                           732     ;                                    segment and offset passed through stack
                           733     ;
                           734     ;Return Values:      None
                           735     ;
                           736     ;Local Variables:    None
                           737     ;
                           738     ;Shared Variables:   None
                           739     ;
                           740     ;Input:              None
                           741     ;
                           742     ;Output:             None
                           743     ;
                           744     ;Error Handling:     None
                           745     ;
                           746     ;Algorithms:         None
                           747     ;
                           748     ;Registers Used:     None
                           749     ;
                           750     ;Known Bugs:         None
                           751     ;
                           752     ;Limitations:        None
                           753     ;
                           754     ;Last Modified:      5/4/16
                           755     
                           756     
                           757     
                           758     
0110                       759     Display_Artist        PROC    NEAR
                           760                           PUBLIC  Display_Artist
                           761     
0110                       762     DisplayArtistStart:                        ;starting label
0110 55                    763         PUSH    BP                             ;save register
0111 8BEC                  764         MOV     BP, SP                         ;use BP to index into the stack
0113 56                    765         PUSH    SI                             ;save registers
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   15


LOC  OBJ                  LINE     SOURCE

0114 50                    766         PUSH    AX
0115 53                    767         PUSH    BX
0116 51                    768         PUSH    CX
                           769     
0117                       770     DisplayArtistArgs:                         ;load args for DisplayStringCopy
0117 8E4606                771         MOV     ES, SS:[BP+6]                  ;string segment
011A 8B7604                772         MOV     SI, SS:[BP+4]                  ;string offset
011D 8D1E1A00       R      773         LEA     BX, ArtistBuffer               ;target buffer
0121 B90B00                774         MOV     CX, ArtistBufSize              ;size of ArtistBuffer
0124 E81400                775         CALL    DisplayStringCopy              ;copy string to ArtistBuffer
                           776     
0127                       777     DisplayArtistDisplay:                      ;call DisplayLCD
0127 8CD8                  778         MOV    AX, DS                          ;copy DS to ES
0129 8EC0                  779         MOV    ES, AX
012B BB0200                780         MOV    BX, TypeArtist                  ;tells DisplayLCD data type
012E 8D361A00       R      781         LEA    SI, ArtistBuffer                ;address of buffer to display
0132 E8E0FE                782         CALL   DisplayLCD                      ;display the string
                           783     
0135                       784     DisplayArtistDone:                         ;finished - restore registers
0135 59                    785         POP    CX
0136 5B                    786         POP    BX
0137 58                    787         POP    AX
0138 5E                    788         POP    SI
0139 5D                    789         POP    BP
013A C3                    790         RET
                           791     
                           792     Display_Artist    ENDP
                           793     
                           794     ;Name:          DisplayStringCopy
                           795     ;
                           796     ;Description:   This function copies a string into a buffer and writes
                           797     ;               spaces to the end of the buffer. The function will
                           798     ;               only write to the end of the buffer and ends all strings
                           799     ;               with the null character. The function overwrites the
                           800     ;               entire buffer each time it is called.
                           801     ;
                           802     ;Operation:     This function takes three arguments. The address of the
                           803     ;               string to be copied is passed through ES:SI and the
                           804     ;               offset of the target buffer is passed through BX. The            
                           805     ;               length of the target buffer is passed through CX. The function
                           806     ;               loops through and copies elements from ES:SI to DS:BX.
                           807     ;               If the passed string is shorter than the buffer, then
                           808     ;               the function pads the rest of the buffer with ASCII_SPACE.
                           809     ;               If the passed string is longer than the buffer, then the
                           810     ;               function will stop copying when there is one element left
                           811     ;               and write ASCII_NULL to the end. The register DL is used
                           812     ;               as an intermediary to transfer data from memory to memory.
                           813     ;
                           814     ;Arguments:          ES:SI - address of string to copy
                           815     ;                    BX - address of buffer to copy
                           816     ;                    CX - number of elements in string buffer
                           817     ;
                           818     ;Return Values:      None
                           819     ;
                           820     ;Local Variables:    CX - elements left in the string
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           821     ;                    BX - target buffer location being written to
                           822     ;                    SI - source string location begin read from
                           823     ;
                           824     ;Shared Variables:   None
                           825     ;
                           826     ;Input:              None
                           827     ;
                           828     ;Output:             None
                           829     ;
                           830     ;Error Handling:     None
                           831     ;
                           832     ;Algorithms:         None
                           833     ;
                           834     ;Registers Used:     CX, BX, SI
                           835     ;
                           836     ;Known Bugs:         None
                           837     ;
                           838     ;Limitations:        None
                           839     ;
                           840     ;Last Modified:      5/4/16
                           841     
013B                       842     DisplayStringCopy        PROC    NEAR
                           843     
                           844     
013B                       845     DisplayStringStart:                    ;save register
013B 52                    846         PUSH  DX
                           847     
013C                       848     DisplayStringLoop:
013C 83F901                849         CMP    CX, 1                       ;check if one element left
013F 741F                  850         JE     DisplayStringNull           ;write a null termination char
0141 26803C00              851         CMP    BYTE PTR ES:[SI], ASCII_NULL;check if null char reached in source
0145 740D                  852         JE     DisplayStringPad            ;if so, write padding to the end
0147 EB0190                853         JMP    DisplayStringWrite          ;otherwise copy to target buffer
                           854     
014A                       855     DisplayStringWrite:                    ;copy element of string to buffer
014A 268A14                856         MOV    DL, ES:[SI]                 ;copy contents to intermediary
014D 8817                  857         MOV    DS:[BX], DL                 ;contents to target buffer
014F 43                    858         INC    BX                          ;increment target buffer
0150 46                    859         INC    SI                          ;increment source buffer
0151 49                    860         DEC    CX                          ;one less element of target to fill
0152 EBE8                  861         JMP    DisplayStringLoop           ;back to top of loop
                           862     
0154                       863     DisplayStringPad:                      ;pad buffer to end of string
0154 83F901                864         CMP    CX, 1                       ;check if one element left
0157 7407                  865         JE     DisplayStringNull           ;if so, write null character
0159 C60720                866         MOV    BYTE PTR DS:[BX], ASCII_SPACE        ;write a space
015C 43                    867         INC    BX                          ;increment target buffer
015D 49                    868         DEC    CX                          ;one less element less
015E EBF4                  869         JMP    DisplayStringPad            ;pad next element
                           870     
0160                       871     DisplayStringNull:                     ;write null termination character
0160 C60700                872         MOV    BYTE PTR DS:[BX], ASCII_NULL         ;write character
                           873     
0163                       874     DisplayStringEnd:                      ;function over - return
0163 5A                    875         POP    DX
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   17


LOC  OBJ                  LINE     SOURCE

0164 C3                    876         RET
                           877     
                           878     DisplayStringCopy        ENDP
                           879     
                           880     
                           881     
                           882     ;Name:          DisplayInfoTable
                           883     ;
                           884     ;Description:   The byte table stores the starting address for each type of
                           885     ;               information to be displayed. The function DisplayLCD
                           886     ;               looks up the start position for each information type
                           887     ;               from this table.
                           888     ;
                           889     ;Author:        Timothy Liu
                           890     ;
                           891     ;Last Modified  4/29/16
                           892     
0165                       893     DisplayInfoTable        LABEL    BYTE
                           894     
                           895     ;        DB        StartAddress
0165 80                    896              DB        080h        ;track name
0166 8E                    897              DB        08Eh        ;action address
0167 C0                    898              DB        0C0h        ;artist name
0168 CB                    899              DB        0CBh        ;time
                           900     
                           901     
                           902     
                           903     ;Name:          StatusTable
                           904     ;
                           905     ;Description:    The table stores the characters to display
                           906     ;                for each status. The function DisplayStatus indexes
                           907     ;                into this table and looks up what to write to StatusBuffer
                           908     ;
                           909     ;
                           910     ;Last Modified:  5/4/16
                           911     ;
0169                       912     StatusTable    LABEL    BYTE
                           913     
                           914     ;        DB      Character
0169 50                    915              DB      ASCII_P             ;play char 1
016A 46                    916              DB      ASCII_F             ;fast forward char 1
016B 52                    917              DB      ASCII_R             ;reverse char 1
016C 49                    918              DB      ASCII_I             ;idle char 1
016D 4C                    919              DB      ASCII_L             ;play char 2
016E 44                    920              DB      ASCII_D             ;fast forward char 2
016F 45                    921              DB      ASCII_E             ;reverse char 2
0170 44                    922              DB      ASCII_D             ;idle char 2
0171 00                    923              DB      ASCII_NULL          ;play char 3
0172 00                    924              DB      ASCII_NULL          ;fast forward char 3
0173 00                    925              DB      ASCII_NULL          ;reverse char 3
0174 00                    926              DB      ASCII_NULL          ;stop char 3
                           927     
                           928     
                           929     
                           930     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  18:29:40  05/09/;6  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           931     
----                       932     CODE ENDS
                           933     
                           934     ;start data segment
                           935     
----                       936     DATA    SEGMENT PUBLIC  'DATA'
                           937     
0000 (9                    938     TimeBuffer    DB TimeBufSize   DUP (?)        ;allocate buffer for the time
     ??
     )
0009 (14                   939     TrackBuffer   DB TrackBufSize  DUP (?)        ;allocate buffer for track name
     ??
     )
0017 (3                    940     StatusBuffer  DB StatusBufSize DUP (?)        ;allocate buffer for status
     ??
     )
001A (11                   941     ArtistBuffer  DB ArtistBufSize DUP (?)        ;allocate buffer for artist
     ??
     )
                           942     
                           943     
                           944     
----                       945     DATA ENDS
                           946     
                           947     
                           948     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
