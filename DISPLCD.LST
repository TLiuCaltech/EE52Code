8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLCD
OBJECT MODULE PLACED IN DISPLCD.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE DISPLCD.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    DISPLCD
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DISPLCD                                 ;
                             6     ;                            LCD Display Functions                           ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:    Functions for scanning the keys.
                            12     ;
                            13     ; Revision History:
                            14     ;        2/4/16    Tim Liu    created file
                            15     ;        4/27/16   Tim Liu    wrote InitDisplay and added data/code segments
                            16     ;        4/28/16   Tim Liu    Added busy flag read and looping to InitDisplay
                            17     ;        4/29/16   Tim Liu    wrote SecToTime
                            18     ;        4/29/16   Tim Liu    wrote DisplayLCD
                            19     ;        5/4/16    Tim Liu    wrote DisplayTime
                            20     ;        5/4/16    Tim Liu    wrote DisplayArtist
                            21     ;        5/4/16    Tim Liu    wrote DisplayStringCopy helper function
                            22     ;
                            23     ;
                            24     ; Table of Contents
                            25     ;
                            26     ;    InitDisplay - initializes shared variables for display
                            27     ;    DisplayLCD - writes characters to the LCD
                            28     ;    SecToTime - converts time elapsed to mm:ss ASCII format
                            29     ;    Display_Time - displays the passed time to the LCD
                            30     ;    Display_Status - displays the passed status to the LCD
                            31     ;    Display_Title - displays track title on the LCD
                            32     ;    Display_Artist - displays track artist on the LCD
                            33     ;    DisplayStringCopy - helper function that copies a string to buffer
                            34     
                            35     ; local include files
                            36 +1  $INCLUDE(GENERAL.INC)
                      =1    37     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    38     ;                                                                            ;
                      =1    39     ;                                  General.INC                               ;
                      =1    40     ;                               General include file                         ;
                      =1    41     ;                                   EE/CS 51                                 ;
                      =1    42     ;                                                                            ;
                      =1    43     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    44     
                      =1    45     ; This file contains general definitions and constants.
                      =1    46     ;
                      =1    47     ; Revision History:
                      =1    48     ;    11/3/15     Timothy Liu     initial revision
                      =1    49     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    50     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1    52     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1    53     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1    54     
                      =1    55     
                      =1    56     
  0004                =1    57     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1    58     
  0002                =1    59     OffSize              EQU        2         ;offset size in bytes
                      =1    60     
                      =1    61     ;Ascii definitions
  000D                =1    62     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1    63     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1    64     ASCII_E              EQU       69         ;ASCII E
  0046                =1    65     ASCII_F              EQU       70         ;F character for fire (laser on)
  0049                =1    66     ASCII_I              EQU       73         ;I character
  004C                =1    67     ASCII_L              EQU       76         ;L character
  004F                =1    68     ASCII_O              EQU       79         ;O character for off (laser off)
  0050                =1    69     ASCII_P              EQU       80         ;P character
  0052                =1    70     ASCII_R              EQU       82         ;R character
  0053                =1    71     ASCII_S              EQU       83         ;S character
  0054                =1    72     ASCII_T              EQU       84         ;T character
  0000                =1    73     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1    74     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1    75     ASCII_COLON          EQU       58         ;ASCII colon
  003E                =1    76     ASCII_RArrow         EQU       62         ;ASCII > symbol
                      =1    77     
  0001                =1    78     TRUE                 EQU        1         ;true
  0000                =1    79     FALSE                EQU        0         ;false
                      =1    80     
  0002                =1    81     WORD_SIZE            EQU        2         ;2 bytes per word
  0002                =1    82     FAR_SIZE             EQU        2         ;2 words per far address
  1000                =1    83     Segment_Overlap      EQU    1000H         ;number of unique ways to map physical
                      =1    84                                               ;address
                            85 +1  $INCLUDE(DISPLCD.INC)
                      =1    86     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    87     ;                                                                            ;
                      =1    88     ;                                   dispLCD.inc                              ;
                      =1    89     ;                            LCD Display Include File                        ;
                      =1    90     ;                                   EE/CS 52                                 ;
                      =1    91     ;                                                                            ;
                      =1    92     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    93     
                      =1    94     ; This files contains the definitions for dispLCD
                      =1    95     ;
                      =1    96     ; Revision History:
                      =1    97     ;    4/26/16   Timothy Liu    created file - initial revision
                      =1    98     ;    4/27/16   Tim Liu   Added buffer sizes and LCD reg addresses and values
                      =1    99     ;    4/29/16   Tim Liu   Added buffer indexes
                      =1   100     
  0080                =1   101     LCDInsReg       EQU    80h         ;address of LCD instruction register
  0081                =1   102     LCDDatReg       EQU    81h         ;address of LCD data register
  000F                =1   103     LCDInitVal      EQU    0fh         ;00001--- display on/off control
                      =1   104                                        ;-----1-- display on
                      =1   105                                        ;------1- cursor on
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106                                        ;-------1 blinking on
                      =1   107     
  0038                =1   108     LCDFunSetVal    EQU    38h         ;00111000
                      =1   109                                        ;--1----- function set control
                      =1   110                                        ;---1---- 8 bit data
                      =1   111                                        ;----1--- 2 lines
                      =1   112                                        ;-----000 donb^^t care
                      =1   113     
  0080                =1   114     BusyFlagMask    EQU    10000000b   ;mask out low 7 bits to get busy flag
  0000                =1   115     BusyReady       EQU    0           ;busy flag is now ready
                      =1   116     
  8C96                =1   117     MaxTime         EQU    35990       ;max time that can be displayed (tenths
                      =1   118                                        ;of second)
  FFFF                =1   119     TIME_NONE       EQU    65535       ;display no time
                      =1   120     
                      =1   121     
                      =1   122     ;buffer indexes
  0003                =1   123     SecPos            EQU    3         ;index of where to start writing sec
  0005                =1   124     ColonPos          EQU    5         ;index of where to write colon
  0003                =1   125     TimeBufStart      EQU    3         ;index of where the time starts - 
                      =1   126                                        ;extra spaces in the buffer are padding 0
                      =1   127     
                      =1   128     ;Buffer sizes
  0009                =1   129     TimeBufSize       EQU    9         ;size of time buffer in bytes
                      =1   130                                        ;buffer is extra large b/c Dec2String
                      =1   131                                        ;writes padding zeroes
  000E                =1   132     TrackBufSize      EQU    14        ;size of track buffer in bytes
  0003                =1   133     StatusBufSize     EQU    3         ;size of status buffer in bytes
  000B                =1   134     ArtistBufSize     EQU    11        ;size of artist buffer in bytes
                      =1   135     
                      =1   136     ;Data display types
                      =1   137     
  0000                =1   138     TypeTrack        EQU    0          ;type identifying track name
  0001                =1   139     TypeAction       EQU    1          ;type identifying action
  0002                =1   140     TypeArtist       EQU    2          ;type identifying artist
  0003                =1   141     TypeTime         EQU    3          ;type identifying time remaining
                      =1   142     
  0004                =1   143     NumStatus        EQU    4          ;number of different statuses
  0003                =1   144     NumStatChar      EQU    3          ;number of status characters
                           145     
                           146     CGROUP    GROUP    CODE
                           147     DGROUP    GROUP    DATA
                           148     
----                       149     CODE SEGMENT PUBLIC 'CODE'
                           150     
                           151             ASSUME  CS:CGROUP, DS:DGROUP
                           152     
                           153     ;external function declarations
                           154     
                           155             EXTRN    Dec2String:NEAR            ;convert decimals to strings
                           156     
                           157     ;Name:               InitDisplayLCD
                           158     ;
                           159     ;Description:        This function initializes the shared variables for
                           160     ;                    the display functions. The function also writes 
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ;                    InitLCDVal to LCDInsReg to turn on the display
                           162     ;                    and turn on the cursor.
                           163     ;
                           164     ;Operation:          None
                           165     ;
                           166     ;Arguments:          None
                           167     ;
                           168     ;Return Values:      None
                           169     ;
                           170     ;Local Variables:    None
                           171     ;
                           172     ;Shared Variables:   None
                           173     ;
                           174     ;Input:              None
                           175     ;
                           176     ;Output:             None
                           177     ;
                           178     ;Error Handling:     None
                           179     ;
                           180     ;Algorithms:         None
                           181     ;
                           182     ;Registers Used:     None
                           183     ;
                           184     ;Known Bugs:         None
                           185     ;
                           186     ;Limitations:        None
                           187     ;
                           188     ;Last Modified:      4/28/16
                           189     
                           190     ;Outline
                           191     
                           192     
0000                       193     InitDisplayLCD        PROC    NEAR
                           194                           PUBLIC  InitDisplayLCD
0000                       195     InitDisplayStart:              ;starting label
0000 50                    196         PUSH   AX                  ;save register
                           197     
0001                       198     InitDisplayOut:                ;output setup command to LCD
0001 B00F                  199         MOV    AL, LCDInitVal      ;load LCD initialization command
0003 E680                  200         OUT    LCDInsReg, AL       ;write display control command
                           201     
0005                       202     InitDisplayCheckBusy:
0005 E480                  203         IN     AL, LCDInsReg       ;read the status register
0007 2480                  204         AND    AL, BusyFlagMask    ;mask out lower 7 bits
0009 3C00                  205         CMP    AL, BusyReady       ;check if busy flag is set
000B 7402                  206         JE     InitDisplayFunSet   ;not busy - output function set
000D EBF6                  207         JMP    InitDisplayCheckBusy;not ready - keep looping
                           208     
000F                       209     InitDisplayFunSet:             ;output function set command to LCD
000F B038                  210         MOV    AL, LCDFunSetVal    ;load function set command
0011 E680                  211         OUT    LCDInsReg, AL       ;write function set command
                           212     
                           213     
0013                       214     InitDisplayLCDDone:            ;done with function
0013 58                    215         POP   AX                   ;restore register
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     
0014 C3                    217         RET                        
                           218     
                           219     InitDisplayLCD    ENDP
                           220     
                           221     
                           222     
                           223     ;Name:               DisplayLCD
                           224     ;
                           225     ;Description:        This function takes two arguments. The first argument is
                           226     ;                    the address of a string for it to display. The second
                           227     ;                    argument is an integer describing the type of
                           228     ;                    information to be displayed. The second argument is used
                           229     ;                    as an index into a byte table that stores the starting
                           230     ;                    address of each type of data. The function then writes
                           231     ;                    ASCII characters to the LCD one character at a time.
                           232     ;                    The function stops writing when it reaches a null
                           233     ;                    character in the string passed to it. Once the function
                           234     ;                    is done writing, the function will return.
                           235     ;
                           236     ;Operation:          The string to write is passed to the function through
                           237     ;                    ES:SI. The type of information is passed through BX
                           238     ;                    as an integer. The integer is used to index into
                           239     ;                    DisplayInfoTable to find the starting cursor position
                           240     ;                    for each type of information. The function
                           241     ;                    loops through the string that was passed and writes
                           242     ;                    to the LCD. After each character is written, the 
                           243     ;                    function increments the cursor to the next character.
                           244     ;                    The function loops checking the busy flag after each
                           245     ;                    write to the LCD. Only once the LCD busy flag is clear
                           246     ;                    will the function write the next character.
                           247     ;                    Once the ASCII null character is reached the function
                           248     ;                    returns.
                           249     ;
                           250     ;Arguments:          String(ES:SI) - pointer to string to display
                           251     ;                    Type (BX) - integer indicating type of info to display
                           252     ;
                           253     ;Return Values:      None
                           254     ;
                           255     ;Local Variables:    Cursor - position of the cursor
                           256     ;
                           257     ;
                           258     ;Shared Variables:   None
                           259     ;
                           260     ;Input:              None
                           261     ;
                           262     ;Output:             None
                           263     ;
                           264     ;Error Handling:     None
                           265     ;
                           266     ;Algorithms:         None
                           267     ;
                           268     ;Registers Used:     None
                           269     ;
                           270     ;Known Bugs:         None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;
                           272     ;Limitations:        None
                           273     ;
                           274     ;Last Modified:      4/28/16
                           275     
                           276     
0015                       277     DisplayLCD        PROC    NEAR
                           278                       PUBLIC  DisplayLCD
                           279     
0015                       280     DisplayLCDStart:                           ;save registers
0015 56                    281         PUSH    SI
0016 50                    282         PUSH    AX
                           283     
0017                       284     DisplayLCDLookUp:                          ;lookup start address of info type
0017 2E8A876501     R      285         MOV    AL, CS:DisplayInfoTable[BX]     ;AL stores LCD DDRAM location
                           286     
001C                       287     DisplayLCDSetStart:                        ;set cursor to start position
001C E680                  288         OUT   LCDInsReg, AL                    ;write cursor pos to ins reg
                           289     
001E                       290     DisplayLCDCheckEnd:                        ;check if end of buffer reached
001E 26803C00              291         CMP   BYTE PTR ES:[SI], ASCII_NULL     ;buffers are null terminated
0022 7412                  292         JE    DisplayLCDEnd                    ;reach end of buffer
                           293     
0024                       294     DisplayLCDBusy:                            ;check if busy flag is set
0024 E480                  295         IN     AL, LCDInsReg                   ;read the status register
0026 2480                  296         AND    AL, BusyFlagMask                ;mask out lower 7 bits
0028 3C00                  297         CMP    AL, BusyReady                   ;check if busy flag is set
002A 7402                  298         JE     DisplayLCDWrite                 ;ready - go write to display
002C EBF6                  299         JMP    DisplayLCDBusy                  ;not ready - keep looping
                           300     
002E                       301     DisplayLCDWrite:
002E 268A04                302         MOV    AL, ES:[SI]                     ;copy character to output register
0031 E681                  303         OUT    LCDDatReg, AL                   ;output to display
0033 46                    304         INC    SI                              ;next element of buffer
0034 EBE8                  305         JMP    DisplayLCDCheckEnd              ;go check for null char
                           306         
0036                       307     DisplayLCDEnd:                              ;end - restore registers
0036 58                    308         POP    AX
0037 5E                    309         POP    SI
0038 C3                    310         RET
                           311     
                           312     
                           313     DisplayLCD        ENDP
                           314     
                           315     ;Name:               SecToTime
                           316     ;
                           317     ;Description:        The function is passed an unsigned integer as an
                           318     ;                    and argument. The argument represents the amount of
                           319     ;                    time remaining in the track in tenths of a second.
                           320     ;                    This function converts the time remaining in tenths
                           321     ;                    of a second to minute:second (mm:ss) format. The
                           322     ;                    function truncates the number of seconds. If the 
                           323     ;                    amount of time remaining exceeds MAX_TIME, or if
                           324     ;                    the time to be displayed is TIME_NONE, then the function
                           325     ;                    displays blank segment patterns where the time should
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;                    be displayed.
                           327     ;                    
                           328     ;
                           329     ;Operation:          The function first divides the amount of time remaining
                           330     ;                    by ten to get the number of seconds. The function then
                           331     ;                    divides the number of seconds by 60 seconds in a minute
                           332     ;                    to get the number of minutes remaining. The function
                           333     ;                    calls Dec2String to convert the number of minutes
                           334     ;                    to an ASCII string. The ASCII string is written to the
                           335     ;                    first two characters of TimeBuffer.The function takes
                           336     ;                    the remainder of the division and calls Dec2String to
                           337     ;                    convert the number of seconds to a string. The function
                           338     ;                    writes to location SecondStart of TimeBuffer. The
                           339     ;                    function then writes ASCII_COLON to location TimeColon
                           340     ;                    of TimeBuffer. If Time_remaining exceeds MAX_TIME, the
                           341     ;                    function writes a blank character patterns to the
                           342     ;                    TimeBuffer.
                           343     ;
                           344     ;Arguments:          Time_remaining (AX) - number of tenths of seconds
                           345     ;                    remaining in the track.
                           346     ;
                           347     ;Return Values:      None
                           348     ;
                           349     ;Local Variables:    None
                           350     ;
                           351     ;Shared Variables:   TimeBuffer (R/W) - buffer for holding time in mm:ss
                           352     ;                    format
                           353     ;
                           354     ;Input:              None
                           355     ;
                           356     ;Output:             None
                           357     ;
                           358     ;Error Handling:     Checks that the passed time does not exceed MAX_TIME
                           359     ;
                           360     ;Algorithms:         None
                           361     ;
                           362     ;Registers Used:     AX
                           363     ;
                           364     ;Known Bugs:         None
                           365     ;
                           366     ;Limitations:        None
                           367     ;
                           368     ;Last Modified:      4/28/16
                           369     
                           370     ;Outline
                           371     ;SecToTime()
                           372     ;    IF Time_Remaining <= MAX_TIME:      ;check time doesnb^^t exceed limit    
                           373     ;        Time_remaining /= 10            ;convert to seconds
                           374     ;        Seconds = Time_remaining mod 60   ;mod 60 to get seconds
                           375     ;        Minutes = Time_remaining / 60   ;divide by 60 to get minutes
                           376     ;        Dec2String(TimeBuffer, Minutes) ;convert minutes to ASCII string
                           377     ;                                    ;and write to time buffer
                           378     ;        Dec2String(TimeBuffer + SecondStart, Seconds)
                           379     ;                                    ;write seconds to time buffer
                           380     ;        TimeBuffer[TimeColon] = ASCII_Colon  ;write colon between mm:ss
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;        Carry Flag = 0                  ;clear carry flag for no error
                           382     ;    ELSE:
                           383     ;        Carry Flag = 1                  ;MAX_TIME exceeded
                           384     ;    RETURN
                           385     
0039                       386     SecToTime        PROC    NEAR
                           387                      PUBLIC  SecToTime
                           388     
0039                       389     SecToTimeStart:                          ;starting label - save registers
0039 53                    390         PUSH   BX                            ;save registers
003A 52                    391         PUSH   DX                            
003B 56                    392         PUSH   SI
                           393     
003C                       394     SecToTimeCheck:                          ;check time doesnb^^t exceed MAX_TIME
003C 3D968C                395         CMP    AX, MAXTIME                   ;
003F 772E                  396         JA     SecToTimeBlankLoad            ;time too high to display
                           397         ;JMP   SecToTimeDivide               ;time under limit-start calculating
                           398     
0041                       399     SecToTimeDivide:
0041 BB0A00                400         MOV    BX, 10                        ;tenths of a second in a second
0044 33D2                  401         XOR    DX, DX                        ;clear out the high order byte
0046 F7F3                  402         DIV    BX                            ;divide time to get seconds left
                           403     
0048 BB3C00                404         MOV    BX, 60                        ;divide by seconds in a minute
004B 33D2                  405         XOR    DX, DX                        ;clear out high order byte
004D F7F3                  406         DIV    BX                            ;minutes in AX seconds in DX
                           407     
                           408     
004F                       409     SecToTimeWriteTime:                      ;write time to TimeBuffer
004F 92                    410         XCHG   AX, DX                        ;swap minutes and seconds
                           411                                              ;so that sec in AX and min in DX
0050 8D360000       R      412         LEA    SI, TimeBuffer                ;load argument for Dec2String
0054 83C603                413         ADD    SI, SecPos                    ;compute location for writing sec
0057 E80000         E      414         CALL   Dec2String                    ;write seconds to TimeBuf
005A 8BC2                  415         MOV    AX, DX                        ;copy minutes to Dec2String arg
005C 8D360000       R      416         LEA    SI, TimeBuffer                ;address to write minutes to
0060 E80000         E      417         CALL   Dec2String                    ;write seconds to TimeBuffer
                           418     
0063                       419     SectoTimeWriteColon:                     ;write colon between min and sec
0063 BB0500                420         MOV    BX, ColonPos                  ;load index of colon
0066 C68700003A90   R      421         MOV    TimeBuffer[BX], ASCII_COLON   ;write colon
006C EB1B90                422         JMP    SecToTimeDone                 ;done with function
                           423         
006F                       424     SecToTimeBlankLoad:                      ;write blank segment patterns
006F BB0000                425         MOV    BX, 0                         ;array index
                           426     
0072                       427     SecToTimeBlankLoop:
0072 83FB09                428         CMP    BX, TimeBufSize               ;check if array has been filled
0075 7409                  429         JE     SecToTimeBlankEnd             ;done writing 5 blanks
                           430     
0077                       431     SecToTimeWriteBlank:                     ;write blanks to the TimeBuffer
0077 C68700002090   R      432         MOV    TimeBuffer[BX], ASCII_SPACE   ;
007D 43                    433         INC    BX                            ;move index to next element
007E EBF2                  434         JMP    SecToTimeBlankLoop            ;go back to loop
                           435     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

0080                       436     SecToTimeBlankEnd:
0080 BB0800                437         MOV    BX, TimeBufSize - 1           ;index of last element of buffer
0083 C68700000090   R      438         MOV    TimeBuffer[BX], ASCII_NULL    ;time buffer is null terminated
                           439     
0089                       440     SecToTimeDone:
0089 5E                    441         POP    SI                            ;restore registers
008A 5A                    442         POP    DX
008B 5B                    443         POP    BX
008C C3                    444         RET
                           445     
                           446     
                           447     SecToTime    ENDP
                           448     
                           449     ;Name:               DisplayTime(Deci_Left)
                           450     ;
                           451     ;Description:        This function calls the DisplayLCD function to
                           452     ;                    display the time remaining in the track. The 
                           453     ;                    function first calls the SecToTime function to
                           454     ;                    convert the number of seconds the ASCII mm:ss format.
                           455     ;                    The function then calls DisplayLCD with the starting
                           456     ;                    address of TimeBuffer to be displayed. The function
                           457     ;                    also passes TypeTime to Display LCD to indicate
                           458     ;                    that the time remaining is being displayed. 
                           459     ;
                           460     ;Operation:          The function passes the argument of DisplayTime to 
                           461     ;                    SecToTime to convert the time to an ASCII
                           462     ;                    string in mm:ss format. The argument is passed through
                           463     ;                    BX. SecToTime writes the time to TimeBuffer. Display
                           464     ;                    Time then calls the function DisplayLCD to display
                           465     ;                    the time. The address of the time buffer is loaded
                           466     ;                    into SI and incremented by TimeBufStartInd since the 
                           467     ;                    first several elements of TimeBuffer are blanks. DS is copied
                           468     ;                    to ES and ES:SI is passed to DisplayLCD. The constant
                           469     ;                    TypeTime is copied to BX and passed to DisplayLCD
                           470     ;                    to indicate that the time should be displayed
                           471     ;
                           472     ;Arguments:          Deci_Left - tenths of seconds left in track
                           473     ;
                           474     ;Return Values:      None
                           475     ;
                           476     ;Local Variables:    None
                           477     ;
                           478     ;Shared Variables:   None
                           479     ;
                           480     ;Input:              None
                           481     ;
                           482     ;Output:             None
                           483     ;
                           484     ;Error Handling:     None
                           485     ;
                           486     ;Algorithms:         None
                           487     ;
                           488     ;Registers Used:     None
                           489     ;
                           490     ;Known Bugs:         None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           491     ;
                           492     ;Limitations:        None
                           493     ;
                           494     ;Last Modified:      5/4/16
                           495     
                           496     
                           497     
008D                       498     Display_Time        PROC    NEAR
                           499                         PUBLIC  Display_Time
                           500     
008D                       501     DisplayTimeStart:                           ;starting label
008D 55                    502         PUSH    BP
008E 8BEC                  503         MOV     BP, SP                          ;copy stack pointer
0090 56                    504         PUSH    SI                              ;save register
0091 53                    505         PUSH    BX
                           506     
0092                       507     DisplayTimeWrite:                           ;call function to write time
0092 8B4604                508         MOV     AX, SS:[BP+4]                   ;copy argument off stack
0095 E8A1FF                509         CALL    SecToTime                       ;AX has time - write to TimeBuffer
                           510     
0098                       511     DisplayTimeLoadArg:                         ;load arguments
0098 8D360000       R      512         LEA    SI, TimeBuffer                   ;start address of TimeBuffer
009C 83C603                513         ADD    SI, TimeBufStart                 ;increment to where time starts
009F 8CDB                  514         MOV    BX, DS                           ;copy DS to ES
00A1 8EC3                  515         MOV    ES, BX                           ;
00A3 BB0300                516         MOV    BX, TypeTime                     ;arg indicating display the time
                           517     
00A6                       518     DisplayTimeDisplay:                         ;call DisplayLCD to display
00A6 E86CFF                519         CALL   DisplayLCD                       ;display the time
                           520     
00A9                       521     DisplayTimeDone:                            ;finished - restore registers
00A9 5B                    522         POP    BX
00AA 5E                    523         POP    SI
00AB 5D                    524         POP    BP
00AC C3                    525         RET
                           526     
                           527     
                           528     Display_Time    ENDP
                           529     
                           530     
                           531     ;Name:               Display_Status(Status)
                           532     ;
                           533     ;Description:        This function takes an integer that maps to a status
                           534     ;                    as its argument. The function looks up the string
                           535     ;                    associated with the integer in StatusTable, which 
                           536     ;                    is a table of fixed length strings. The function
                           537     ;                    calls the function DisplayLCD with the address
                           538     ;                    of the corresponding string and Type_Status to
                           539     ;                    indicate that a status string is being displayed.
                           540     ;
                           541     ;Operation:          The function multiplies the integer status by the
                           542     ;                    size of each table entry of StatusTable to find the
                           543     ;                    offset of the corresponding status string. The
                           544     ;                    function copies CS to ES and passes the address of the
                           545     ;                    status string to DisplayLCD. The function also
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           546     ;                    passes Type_Status to indicate to DisplayLCD that the
                           547     ;                    status is being displayed.
                           548     ;
                           549     ;Arguments:          Status - integer representing status
                           550     ;
                           551     ;Return Values:      None
                           552     ;
                           553     ;Local Variables:    String (SI) - address of string to write
                           554     ;
                           555     ;Shared Variables:   None
                           556     ;
                           557     ;Input:              None
                           558     ;
                           559     ;Output:             None
                           560     ;
                           561     ;Error Handling:     None
                           562     ;
                           563     ;Algorithms:         None
                           564     ;
                           565     ;Registers Used:     None
                           566     ;
                           567     ;Known Bugs:         None
                           568     ;
                           569     ;Limitations:        None
                           570     ;
                           571     ;Last Modified:      2/4/16
                           572     
                           573     ;Outline
                           574     ;Display_Status(Status)
                           575     ;    Status *= SIZEOF(StatusTableEntry)      ;multiply by table entry
                           576     ;    Status += OFFSET(StatusTable)           ;calculate string address
                           577     ;    ES = CS                                 ;set segment
                           578     ;    String = StatusTable[Status]            ;string to display
                           579     ;    DisplayLCD(String, TypeStatus)          ;call Display LCD to show status
                           580     ;    RETURN
                           581     
00AD                       582     Display_Status        PROC    NEAR
                           583                           PUBLIC  Display_Status
                           584     
00AD                       585     DisplayStatusStart:                          ;set up regs to access stack
00AD 55                    586         PUSH    BP
00AE 8BEC                  587         MOV     BP, SP
00B0 50                    588         PUSH    AX                               ;save registers
00B1 53                    589         PUSH    BX
00B2 51                    590         PUSH    CX
00B3 56                    591         PUSH    SI
                           592     
00B4                       593     DisplayStatusPullArg:                        ;pull argument off the stack
00B4 8B5E04                594         MOV    BX, SS:[BP+4]                     ;index indicating status
00B7 B90300                595         MOV    CX, NumStatChar                   ;status chars left to write
00BA 8D361700       R      596         LEA    SI, StatusBuffer                  ;buffer to write to
                           597     
00BE                       598     DisplayStatusLoop:                           ;loop and write to StatusBuffer
00BE 83F900                599         CMP    CX, 0                             ;check if no more characters
00C1 740E                  600         JE     DisplayStatusCall                 ;no more char - done
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           601     
00C3                       602     DisplayStatusWrite:                          ;write characters
00C3 2E8A876901     R      603         MOV    AL, CS:StatusTable[BX]            ;look up character to write
00C8 8804                  604         MOV    [SI], AL                          ;write to buffer
00CA 83C304                605         ADD    BX, NumStatus                     ;increment to next char
00CD 46                    606         INC    SI                                ;write to next location
00CE 49                    607         DEC    CX                                ;one fewer char to write
00CF EBED                  608         JMP    DisplayStatusLoop                 ;jump back to loop
                           609     
00D1                       610     DisplayStatusCall:                           ;call function to display
00D1 8D361700       R      611         LEA    SI, StatusBuffer                  ;address of buffer arg
00D5 8CD8                  612         MOV    AX, DS                            ;copy DS to ES
00D7 8EC0                  613         MOV    ES, AX
00D9 BB0100                614         MOV    BX, TypeAction                    ;specify data type
00DC E836FF                615         CALL   DisplayLCD                        ;call function to display
                           616     
00DF                       617     DisplayStatusDone:                           ;restore registers
00DF 5E                    618         POP   SI
00E0 59                    619         POP   CX
00E1 5B                    620         POP   BX
00E2 58                    621         POP   AX
00E3 5D                    622         POP   BP
00E4 C3                    623         RET
                           624     
                           625     
                           626     Display_Status    ENDP
                           627     
                           628     
                           629     
                           630     
                           631     ;Name:               Display_Title(char far * Title_String)
                           632     ;
                           633     ;Description:        This function is passed the address of the string
                           634     ;                    to be displayed. The function calls the function
                           635     ;                    DisplayStringCopy to copy the string to the
                           636     ;                    TitleBuffer. The function then calls DisplayLCD
                           637     ;                    to display the track name.
                           638     ;
                           639     ;Operation:          The function first reads from the stack and copies
                           640     ;                    the segment  of the string to ES and the offset to SI.
                           641     ;                    The function then stores the starting address of 
                           642     ;                    TrackBuffer in BX and TrackBufSize in CX. The 
                           643     ;                    function calls DisplayStringCopy which writes the 
                           644     ;                    string to be displayed to TrackBuffer. Display_Title
                           645     ;                    then copies DS to ES and loads the address of
                           646     ;                    TrackBuffer to SI. The constant TypeTrack is placed
                           647     ;                    in BX and the DisplayLCD is called. The function
                           648     ;                    then restores the saved registers and returns.
                           649     ;
                           650     ;Arguments:          Title_String - address of string to display
                           651     ;                                   passed through stack
                           652     ;
                           653     ;Return Values:      None
                           654     ;
                           655     ;Local Variables:    None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           656     ;
                           657     ;Shared Variables:   None
                           658     ;
                           659     ;Input:              None
                           660     ;
                           661     ;Output:             None
                           662     ;
                           663     ;Error Handling:     None
                           664     ;
                           665     ;Algorithms:         None
                           666     ;
                           667     ;Registers Used:     None
                           668     ;
                           669     ;Known Bugs:         None
                           670     ;
                           671     ;Limitations:        None
                           672     ;
                           673     ;Last Modified:      5/4/16
                           674     
                           675     
                           676     
                           677     
00E5                       678     Display_Title         PROC    NEAR
                           679                           PUBLIC  Display_Title
                           680     
00E5                       681     DisplayTitleStart:                         ;starting label
00E5 55                    682         PUSH    BP                             ;save register
00E6 8BEC                  683         MOV     BP, SP                         ;use BP to index into the stack
00E8 56                    684         PUSH    SI                             ;save registers
00E9 50                    685         PUSH    AX
00EA 53                    686         PUSH    BX
00EB 51                    687         PUSH    CX
                           688     
00EC                       689     DisplayTitleArgs:                          ;load args for DisplayStringCopy
00EC 8E4606                690         MOV     ES, SS:[BP+6]                  ;string segment
00EF 8B7604                691         MOV     SI, SS:[BP+4]                  ;string offset
00F2 8D1E0900       R      692         LEA     BX, TrackBuffer                ;target buffer
00F6 B90E00                693         MOV     CX, TrackBufSize               ;size of TrackBuffer
00F9 E83F00                694         CALL    DisplayStringCopy              ;copy string to TrackBuffer
                           695     
00FC                       696     DisplayTitleDisplay:                       ;call DisplayLCD
00FC 8CD8                  697         MOV    AX, DS                          ;copy DS to ES
00FE 8EC0                  698         MOV    ES, AX
0100 BB0000                699         MOV    BX, TypeTrack                   ;tells DisplayLCD data type
0103 8D360900       R      700         LEA    SI, TrackBuffer                 ;address of buffer to display
0107 E80BFF                701         CALL   DisplayLCD                      ;display the string
                           702     
010A                       703     DisplayTitleDone:                          ;finished - restore registers
010A 59                    704         POP    CX
010B 5B                    705         POP    BX
010C 58                    706         POP    AX
010D 5E                    707         POP    SI
010E 5D                    708         POP    BP
010F C3                    709         RET
                           710     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           711     Display_Title    ENDP
                           712     
                           713     
                           714     
                           715     ;Name:               Display_Artist(char far * Artist_String)
                           716     ;
                           717     ;Description:        This function is passed the address of the string
                           718     ;                    to be displayed. The function calls the function
                           719     ;                    DisplayStringCopy to copy the string to the
                           720     ;                    ArtistBuffer. The function then calls DisplayLCD
                           721     ;                    to display the artist.
                           722     ;
                           723     ;Operation:          The function first reads from the stack and copies
                           724     ;                    the segment  of the string to ES and the offset to SI.
                           725     ;                    The function then stores the starting address of 
                           726     ;                    ArtistBuffer in BX and ArtistBufSize in CX. The 
                           727     ;                    function calls DisplayStringCopy which writes the 
                           728     ;                    string to be displayed to ArtistBuffer. Display_Artist
                           729     ;                    then copies DS to ES and loads the address of
                           730     ;                    ArtistBuffer to SI. The constant TypeArtist is placed
                           731     ;                    in BX and the DisplayLCD is called. The function
                           732     ;                    then restores the saved registers and returns.
                           733     ;
                           734     ;Arguments:          Artist_String - address of string to display
                           735     ;                                    segment and offset passed through stack
                           736     ;
                           737     ;Return Values:      None
                           738     ;
                           739     ;Local Variables:    None
                           740     ;
                           741     ;Shared Variables:   None
                           742     ;
                           743     ;Input:              None
                           744     ;
                           745     ;Output:             None
                           746     ;
                           747     ;Error Handling:     None
                           748     ;
                           749     ;Algorithms:         None
                           750     ;
                           751     ;Registers Used:     None
                           752     ;
                           753     ;Known Bugs:         None
                           754     ;
                           755     ;Limitations:        None
                           756     ;
                           757     ;Last Modified:      5/4/16
                           758     
                           759     
                           760     
                           761     
0110                       762     Display_Artist        PROC    NEAR
                           763                           PUBLIC  Display_Artist
                           764     
0110                       765     DisplayArtistStart:                        ;starting label
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   15


LOC  OBJ                  LINE     SOURCE

0110 55                    766         PUSH    BP                             ;save register
0111 8BEC                  767         MOV     BP, SP                         ;use BP to index into the stack
0113 56                    768         PUSH    SI                             ;save registers
0114 50                    769         PUSH    AX
0115 53                    770         PUSH    BX
0116 51                    771         PUSH    CX
                           772     
0117                       773     DisplayArtistArgs:                         ;load args for DisplayStringCopy
0117 8E4606                774         MOV     ES, SS:[BP+6]                  ;string segment
011A 8B7604                775         MOV     SI, SS:[BP+4]                  ;string offset
011D 8D1E1A00       R      776         LEA     BX, ArtistBuffer               ;target buffer
0121 B90B00                777         MOV     CX, ArtistBufSize              ;size of ArtistBuffer
0124 E81400                778         CALL    DisplayStringCopy              ;copy string to ArtistBuffer
                           779     
0127                       780     DisplayArtistDisplay:                      ;call DisplayLCD
0127 8CD8                  781         MOV    AX, DS                          ;copy DS to ES
0129 8EC0                  782         MOV    ES, AX
012B BB0200                783         MOV    BX, TypeArtist                  ;tells DisplayLCD data type
012E 8D361A00       R      784         LEA    SI, ArtistBuffer                ;address of buffer to display
0132 E8E0FE                785         CALL   DisplayLCD                      ;display the string
                           786     
0135                       787     DisplayArtistDone:                         ;finished - restore registers
0135 59                    788         POP    CX
0136 5B                    789         POP    BX
0137 58                    790         POP    AX
0138 5E                    791         POP    SI
0139 5D                    792         POP    BP
013A C3                    793         RET
                           794     
                           795     Display_Artist    ENDP
                           796     
                           797     ;Name:          DisplayStringCopy
                           798     ;
                           799     ;Description:   This function copies a string into a buffer and writes
                           800     ;               spaces to the end of the buffer. The function will
                           801     ;               only write to the end of the buffer and ends all strings
                           802     ;               with the null character. The function overwrites the
                           803     ;               entire buffer each time it is called.
                           804     ;
                           805     ;Operation:     This function takes three arguments. The address of the
                           806     ;               string to be copied is passed through ES:SI and the
                           807     ;               offset of the target buffer is passed through BX. The            
                           808     ;               length of the target buffer is passed through CX. The function
                           809     ;               loops through and copies elements from ES:SI to DS:BX.
                           810     ;               If the passed string is shorter than the buffer, then
                           811     ;               the function pads the rest of the buffer with ASCII_SPACE.
                           812     ;               If the passed string is longer than the buffer, then the
                           813     ;               function will stop copying when there is one element left
                           814     ;               and write ASCII_NULL to the end. The register DL is used
                           815     ;               as an intermediary to transfer data from memory to memory.
                           816     ;
                           817     ;Arguments:          ES:SI - address of string to copy
                           818     ;                    BX - address of buffer to copy
                           819     ;                    CX - number of elements in string buffer
                           820     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   16


LOC  OBJ                  LINE     SOURCE

                           821     ;Return Values:      None
                           822     ;
                           823     ;Local Variables:    CX - elements left in the string
                           824     ;                    BX - target buffer location being written to
                           825     ;                    SI - source string location begin read from
                           826     ;
                           827     ;Shared Variables:   None
                           828     ;
                           829     ;Input:              None
                           830     ;
                           831     ;Output:             None
                           832     ;
                           833     ;Error Handling:     None
                           834     ;
                           835     ;Algorithms:         None
                           836     ;
                           837     ;Registers Used:     CX, BX, SI
                           838     ;
                           839     ;Known Bugs:         None
                           840     ;
                           841     ;Limitations:        None
                           842     ;
                           843     ;Last Modified:      5/4/16
                           844     
013B                       845     DisplayStringCopy        PROC    NEAR
                           846     
                           847     
013B                       848     DisplayStringStart:                    ;save register
013B 52                    849         PUSH  DX
                           850     
013C                       851     DisplayStringLoop:
013C 83F901                852         CMP    CX, 1                       ;check if one element left
013F 741F                  853         JE     DisplayStringNull           ;write a null termination char
0141 26803C00              854         CMP    BYTE PTR ES:[SI], ASCII_NULL;check if null char reached in source
0145 740D                  855         JE     DisplayStringPad            ;if so, write padding to the end
0147 EB0190                856         JMP    DisplayStringWrite          ;otherwise copy to target buffer
                           857     
014A                       858     DisplayStringWrite:                    ;copy element of string to buffer
014A 268A14                859         MOV    DL, ES:[SI]                 ;copy contents to intermediary
014D 8817                  860         MOV    DS:[BX], DL                 ;contents to target buffer
014F 43                    861         INC    BX                          ;increment target buffer
0150 46                    862         INC    SI                          ;increment source buffer
0151 49                    863         DEC    CX                          ;one less element of target to fill
0152 EBE8                  864         JMP    DisplayStringLoop           ;back to top of loop
                           865     
0154                       866     DisplayStringPad:                      ;pad buffer to end of string
0154 83F901                867         CMP    CX, 1                       ;check if one element left
0157 7407                  868         JE     DisplayStringNull           ;if so, write null character
0159 C60720                869         MOV    BYTE PTR DS:[BX], ASCII_SPACE        ;write a space
015C 43                    870         INC    BX                          ;increment target buffer
015D 49                    871         DEC    CX                          ;one less element less
015E EBF4                  872         JMP    DisplayStringPad            ;pad next element
                           873     
0160                       874     DisplayStringNull:                     ;write null termination character
0160 C60700                875         MOV    BYTE PTR DS:[BX], ASCII_NULL         ;write character
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   17


LOC  OBJ                  LINE     SOURCE

                           876     
0163                       877     DisplayStringEnd:                      ;function over - return
0163 5A                    878         POP    DX
0164 C3                    879         RET
                           880     
                           881     DisplayStringCopy        ENDP
                           882     
                           883     
                           884     
                           885     ;Name:          DisplayInfoTable
                           886     ;
                           887     ;Description:   The byte table stores the starting address for each type of
                           888     ;               information to be displayed. The function DisplayLCD
                           889     ;               looks up the start position for each information type
                           890     ;               from this table.
                           891     ;
                           892     ;Author:        Timothy Liu
                           893     ;
                           894     ;Last Modified  4/29/16
                           895     
0165                       896     DisplayInfoTable        LABEL    BYTE
                           897     
                           898     ;        DB        StartAddress
0165 80                    899              DB        080h        ;track name
0166 8E                    900              DB        08Eh        ;action address
0167 C0                    901              DB        0C0h        ;artist name
0168 CB                    902              DB        0CBh        ;time
                           903     
                           904     
                           905     
                           906     ;Name:          StatusTable
                           907     ;
                           908     ;Description:    The table stores the characters to display
                           909     ;                for each status. The function DisplayStatus indexes
                           910     ;                into this table and looks up what to write to StatusBuffer
                           911     ;
                           912     ;
                           913     ;Last Modified:  5/4/16
                           914     ;
0169                       915     StatusTable    LABEL    BYTE
                           916     
                           917     ;        DB      Character
0169 50                    918              DB      ASCII_P             ;play char 1
016A 46                    919              DB      ASCII_F             ;fast forward char 1
016B 52                    920              DB      ASCII_R             ;reverse char 1
016C 49                    921              DB      ASCII_I             ;idle char 1
016D 4C                    922              DB      ASCII_L             ;play char 2
016E 44                    923              DB      ASCII_D             ;fast forward char 2
016F 45                    924              DB      ASCII_E             ;reverse char 2
0170 44                    925              DB      ASCII_D             ;idle char 2
0171 00                    926              DB      ASCII_NULL          ;play char 3
0172 00                    927              DB      ASCII_NULL          ;fast forward char 3
0173 00                    928              DB      ASCII_NULL          ;reverse char 3
0174 00                    929              DB      ASCII_NULL          ;stop char 3
                           930     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  23:12:38  06/02/;6  PAGE   18


LOC  OBJ                  LINE     SOURCE

                           931     
                           932     
                           933     
                           934     
----                       935     CODE ENDS
                           936     
                           937     ;start data segment
                           938     
----                       939     DATA    SEGMENT PUBLIC  'DATA'
                           940     
0000 (9                    941     TimeBuffer    DB TimeBufSize   DUP (?)        ;allocate buffer for the time
     ??
     )
0009 (14                   942     TrackBuffer   DB TrackBufSize  DUP (?)        ;allocate buffer for track name
     ??
     )
0017 (3                    943     StatusBuffer  DB StatusBufSize DUP (?)        ;allocate buffer for status
     ??
     )
001A (11                   944     ArtistBuffer  DB ArtistBufSize DUP (?)        ;allocate buffer for artist
     ??
     )
                           945     
                           946     
                           947     
----                       948     DATA ENDS
                           949     
                           950     
                           951     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
