8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE DISPLCD
OBJECT MODULE PLACED IN DISPLCD.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE DISPLCD.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    DISPLCD
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    DISPLCD                                 ;
                             6     ;                            LCD Display Functions                           ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:    Functions for scanning the keys.
                            12     ;
                            13     ; Revision History:
                            14     ;        2/4/16    Tim Liu    created file
                            15     ;        4/27/16   Tim Liu    wrote InitDisplay and added data/code segments
                            16     ;        4/28/16   Tim Liu    Added busy flag read and looping to InitDisplay
                            17     ;
                            18     ;
                            19     ; Table of Contents
                            20     ;
                            21     ;    InitDisplay - initializes shared variables for display
                            22     ;    DisplayLCD - writes characters to the LCD
                            23     ;    SecToTime - converts time elapsed to mm:ss ASCII format
                            24     ;    Display_Time - displays the passed time to the LCD
                            25     ;    Display_Status - displays the passed status to the LCD
                            26     ;    Display_Title - displays track title on the LCD
                            27     ;    Display_Artist - displays track artist on the LCD
                            28     
                            29     ; local include files
                            30 +1  $INCLUDE(GENERAL.INC)
                      =1    31     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    32     ;                                                                            ;
                      =1    33     ;                                  General.INC                               ;
                      =1    34     ;                               General include file                         ;
                      =1    35     ;                                   EE/CS 51                                 ;
                      =1    36     ;                                                                            ;
                      =1    37     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    38     
                      =1    39     ; This file contains general definitions and constants.
                      =1    40     ;
                      =1    41     ; Revision History:
                      =1    42     ;    11/3/15     Timothy Liu     initial revision
                      =1    43     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    44     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
                      =1    45     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1    46     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1    47     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1    48     
                      =1    49     
                      =1    50     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  0004                =1    51     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1    52     
  0002                =1    53     OffSize              EQU        2         ;offset size in bytes
                      =1    54     
                      =1    55     ;Ascii definitions
  000D                =1    56     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1    57     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1    58     ASCII_E              EQU       69         ;ASCII E
  0046                =1    59     ASCII_F              EQU       70         ;F character for fire (laser on)
  004C                =1    60     ASCII_L              EQU       76         ;L character
  004F                =1    61     ASCII_O              EQU       79         ;O character for off (laser off)
  0053                =1    62     ASCII_S              EQU       83         ;S character
  0000                =1    63     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1    64     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1    65     ASCII_COLON          EQU       58         ;ASCII colon
                      =1    66     
  0001                =1    67     TRUE                 EQU        1         ;true
  0000                =1    68     FALSE                EQU        0         ;false
                      =1    69     
  0002                =1    70     WORD_SIZE            EQU        2         ;2 bytes per word
                            71 +1  $INCLUDE(DISPLCD.INC)
                      =1    72     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    73     ;                                                                            ;
                      =1    74     ;                                   dispLCD.inc                              ;
                      =1    75     ;                            LCD Display Include File                        ;
                      =1    76     ;                                   EE/CS 52                                 ;
                      =1    77     ;                                                                            ;
                      =1    78     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    79     
                      =1    80     ; This files contains the definitions for dispLCD
                      =1    81     ;
                      =1    82     ; Revision History:
                      =1    83     ;    4/26/16   Timothy Liu    created file - initial revision
                      =1    84     ;    4/27/16   Tim Liu   Added buffer sizes and LCD reg addresses and values
                      =1    85     
  0080                =1    86     LCDInsReg       EQU    80h         ;address of LCD instruction register
  0081                =1    87     LCDDatReg       EQU    81h         ;address of LCD data register
  000F                =1    88     LCDInitVal      EQU    0fh         ;00001--- display on/off control
                      =1    89                                        ;-----1-- display on
                      =1    90                                        ;------1- cursor on
                      =1    91                                        ;-------1 blinking on
                      =1    92     
  0038                =1    93     LCDFunSetVal    EQU    38h         ;00111000
                      =1    94                                        ;--1----- function set control
                      =1    95                                        ;---1---- 8 bit data
                      =1    96                                        ;----1--- 2 lines
                      =1    97                                        ;-----000 donb^^t care
                      =1    98     
  0080                =1    99     BusyFlagMask    EQU    10000000b   ;mask out low 7 bits to get busy flag
  0000                =1   100     BusyReady       EQU    0           ;busy flag is now ready
                      =1   101     
  8C96                =1   102     MaxTime         EQU    35990       ;max time that can be displayed (tenths
                      =1   103                                        ;of second)
  FFFF                =1   104     TIME_NONE       EQU    65535       ;display no time
                      =1   105     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     ;buffer indexes
  0003                =1   107     SecPos            EQU    3         ;index of where to start writing sec
  0005                =1   108     ColonPos          EQU    5         ;index of where to write colon
  0003                =1   109     TimeBufStartInd   EQU    3         ;index of where the time starts - 
                      =1   110                                        ;extra spaces in the buffer are padding 0
                      =1   111     
                      =1   112     ;Buffer sizes
  0009                =1   113     TimeBufSize       EQU    9         ;size of time buffer in bytes
                      =1   114                                        ;buffer is extra large b/c Dec2String
                      =1   115                                        ;writes padding zeroes
  000E                =1   116     TrackBufSize      EQU    14        ;size of track buffer in bytes
  0003                =1   117     StatusBufSize     EQU    3         ;size of status buffer in bytes
  000B                =1   118     ArtistBufSize     EQU    11        ;size of artist buffer in bytes
                           119     
                           120     CGROUP    GROUP    CODE
                           121     DGROUP    GROUP    DATA
                           122     
----                       123     CODE SEGMENT PUBLIC 'CODE'
                           124     
                           125             ASSUME  CS:CGROUP, DS:DGROUP
                           126     
                           127     ;external function declarations
                           128     
                           129             EXTRN    Dec2String:NEAR            ;convert decimals to strings
                           130     
                           131     ;Name:               InitDisplayLCD
                           132     ;
                           133     ;Description:        This function initializes the shared variables for
                           134     ;                    the display functions. The function also writes 
                           135     ;                    InitLCDVal to LCDInsReg to turn on the display
                           136     ;                    and turn on the cursor.
                           137     ;
                           138     ;Operation:          None
                           139     ;
                           140     ;Arguments:          None
                           141     ;
                           142     ;Return Values:      None
                           143     ;
                           144     ;Local Variables:    None
                           145     ;
                           146     ;Shared Variables:   None
                           147     ;
                           148     ;Input:              None
                           149     ;
                           150     ;Output:             None
                           151     ;
                           152     ;Error Handling:     None
                           153     ;
                           154     ;Algorithms:         None
                           155     ;
                           156     ;Registers Used:     None
                           157     ;
                           158     ;Known Bugs:         None
                           159     ;
                           160     ;Limitations:        None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ;
                           162     ;Last Modified:      4/28/16
                           163     
                           164     ;Outline
                           165     
                           166     
0000                       167     InitDisplayLCD        PROC    NEAR
                           168                           PUBLIC  InitDisplayLCD
0000                       169     InitDisplayStart:              ;starting label
0000 50                    170         PUSH   AX                  ;save register
                           171     
0001                       172     InitDisplayOut:                ;output setup command to LCD
0001 B00F                  173         MOV    AL, LCDInitVal      ;load LCD initialization command
0003 E680                  174         OUT    LCDInsReg, AL       ;write display control command
                           175     
0005                       176     InitDisplayCheckBusy:
0005 E480                  177         IN     AL, LCDInsReg       ;read the status register
0007 2480                  178         AND    AL, BusyFlagMask    ;mask out lower 7 bits
0009 3C00                  179         CMP    AL, BusyReady       ;check if busy flag is set
000B 7402                  180         JE     InitDisplayFunSet   ;not busy - output function set
000D EBF6                  181         JMP    InitDisplayCheckBusy;not ready - keep looping
                           182     
000F                       183     InitDisplayFunSet:             ;output function set command to LCD
000F B038                  184         MOV    AL, LCDFunSetVal    ;load function set command
0011 E680                  185         OUT    LCDInsReg, AL       ;write function set command
                           186     
                           187     
0013                       188     InitDisplayLCDDone:            ;done with function
0013 58                    189         POP   AX                   ;restore register
                           190     
0014 C3                    191         RET                        
                           192     
                           193     InitDisplayLCD    ENDP
                           194     
                           195     
                           196     
                           197     ;Name:               DisplayLCD
                           198     ;
                           199     ;Description:        This function takes two arguments. The first argument is
                           200     ;                    the address of a string for it to display. The second
                           201     ;                    argument is an integer describing the type of
                           202     ;                    information to be displayed. The second argument is used
                           203     ;                    as an index into a table of structs. A table lookup
                           204     ;                    is used to find the starting location on the LCD
                           205     ;                    to write to for the given information type and the
                           206     ;                    maximum allowed length. The function then writes
                           207     ;                    ASCII characters to the LCD one character at a time.
                           208     ;                    The function checks that the information is not
                           209     ;                    written beyond its allowed space. Once the function
                           210     ;                    is done writing, the function will return.
                           211     ;
                           212     ;Operation:          The string to write is passed to the function through
                           213     ;                    ES:SI. The type of information is passed through BX
                           214     ;                    as an integer. The integer is multiplied by the 
                           215     ;                    size of each struct and added to the starting location
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     ;                    of DisplayInfoTable, which is a table of structs.
                           217     ;                    A table lookup into DisplayInfoTable is done to
                           218     ;                    find the starting cursor position and the maximum
                           219     ;                    space allotted to the information. The maximum
                           220     ;                    number of characters is stored in CX. The function
                           221     ;                    loops through the string that was passed and writes
                           222     ;                    to the LCD. After each character is written, the 
                           223     ;                    function increments the cursor to the next character
                           224     ;                    and decrements the number of spaces allowed. Once
                           225     ;                    the ASCII null character is reached or if the function
                           226     ;                    reaches the end of the maximum allowed spaces for the 
                           227     ;                    information, the function returns.
                           228     ;
                           229     ;Arguments:          String(ES:SI) - pointer to string to display
                           230     ;                    Type (BX) - integer indicating type of info to display
                           231     ;
                           232     ;Return Values:      None
                           233     ;
                           234     ;Local Variables:    Cursor - position of the cursor
                           235     ;                    CharLeft - counter for how many more characters are
                           236     ;                    allowed for the information type
                           237     ;
                           238     ;Shared Variables:   None
                           239     ;
                           240     ;Input:              None
                           241     ;
                           242     ;Output:             None
                           243     ;
                           244     ;Error Handling:     None
                           245     ;
                           246     ;Algorithms:         None
                           247     ;
                           248     ;Registers Used:     None
                           249     ;
                           250     ;Known Bugs:         None
                           251     ;
                           252     ;Limitations:        None
                           253     ;
                           254     ;Last Modified:      2/4/16
                           255     
                           256     ;Outline
                           257     ;DisplayLCD(String, Type)
                           258     ;    Type *= SizeOf(DataInfoStruct)        ;multiply by size of table entry    
                           259     ;    Type += Offset(DataInfoTable)         ;add to table start location
                           260     ;    Cursor = DataInfoTable[Type].Start    ;set cursor to start position
                           261     ;    CharLeft = DataInfoTable[Type].MaxSize;set max chars allowed for type
                           262     ;    WHILE (CharLeft != 0 AND              ;check havenb^^t written too far
                           263     ;          ES:[SI] != ASCII_NULL)          ;check for end of string
                           264     ;        OUT(ES:[SI], LCDDataAddress)      ;output to the display
                           265     ;        Cursor ++                         ;write at the next position
                           266     ;        CharLeft b^^-                       ;one fewer space left to write
                           267     
                           268     
                           269     
                           270     
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ; ###### DisplayLCD CODE  ######
                           272     
                           273     
                           274     ;Name:               SecToTime
                           275     ;
                           276     ;Description:        The function is passed an unsigned integer as an
                           277     ;                    and argument. The argument represents the amount of
                           278     ;                    time remaining in the track in tenths of a second.
                           279     ;                    This function converts the time remaining in tenths
                           280     ;                    of a second to minute:second (mm:ss) format. The
                           281     ;                    function truncates the number of seconds. If the 
                           282     ;                    amount of time remaining exceeds MAX_TIME, or if
                           283     ;                    the time to be displayed is TIME_NONE, then the function
                           284     ;                    displays blank segment patterns where the time should
                           285     ;                    be displayed.
                           286     ;                    
                           287     ;
                           288     ;Operation:          The function first divides the amount of time remaining
                           289     ;                    by ten to get the number of seconds. The function then
                           290     ;                    divides the number of seconds by 60 seconds in a minute
                           291     ;                    to get the number of minutes remaining. The function
                           292     ;                    calls Dec2String to convert the number of minutes
                           293     ;                    to an ASCII string. The ASCII string is written to the
                           294     ;                    first two characters of TimeBuffer.The function takes
                           295     ;                    the remainder of the division and calls Dec2String to
                           296     ;                    convert the number of seconds to a string. The function
                           297     ;                    writes to location SecondStart of TimeBuffer. The
                           298     ;                    function then writes ASCII_COLON to location TimeColon
                           299     ;                    of TimeBuffer. If Time_remaining exceeds MAX_TIME, the
                           300     ;                    function writes a blank character patterns to the
                           301     ;                    TimeBuffer.
                           302     ;
                           303     ;Arguments:          Time_remaining (AX) - number of tenths of seconds
                           304     ;                    remaining in the track.
                           305     ;
                           306     ;Return Values:      None
                           307     ;
                           308     ;Local Variables:    None
                           309     ;
                           310     ;Shared Variables:   TimeBuffer (R/W) - buffer for holding time in mm:ss
                           311     ;                    format
                           312     ;
                           313     ;Input:              None
                           314     ;
                           315     ;Output:             None
                           316     ;
                           317     ;Error Handling:     Checks that the passed time does not exceed MAX_TIME
                           318     ;
                           319     ;Algorithms:         None
                           320     ;
                           321     ;Registers Used:     AX
                           322     ;
                           323     ;Known Bugs:         None
                           324     ;
                           325     ;Limitations:        None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;
                           327     ;Last Modified:      4/28/16
                           328     
                           329     ;Outline
                           330     ;SecToTime()
                           331     ;    IF Time_Remaining <= MAX_TIME:      ;check time doesnb^^t exceed limit    
                           332     ;        Time_remaining /= 10            ;convert to seconds
                           333     ;        Seconds = Time_remaining mod 60   ;mod 60 to get seconds
                           334     ;        Minutes = Time_remaining / 60   ;divide by 60 to get minutes
                           335     ;        Dec2String(TimeBuffer, Minutes) ;convert minutes to ASCII string
                           336     ;                                    ;and write to time buffer
                           337     ;        Dec2String(TimeBuffer + SecondStart, Seconds)
                           338     ;                                    ;write seconds to time buffer
                           339     ;        TimeBuffer[TimeColon] = ASCII_Colon  ;write colon between mm:ss
                           340     ;        Carry Flag = 0                  ;clear carry flag for no error
                           341     ;    ELSE:
                           342     ;        Carry Flag = 1                  ;MAX_TIME exceeded
                           343     ;    RETURN
                           344     
0015                       345     SecToTime        PROC    NEAR
                           346                      PUBLIC  SecToTime
                           347     
0015                       348     SecToTimeStart:                          ;starting label - save registers
0015 53                    349         PUSH   BX                            ;save registers
0016 52                    350         PUSH   DX                            
0017 56                    351         PUSH   SI
                           352     
0018                       353     SecToTimeCheck:                          ;check time doesnb^^t exceed MAX_TIME
0018 3D968C                354         CMP    AX, MAXTIME                   ;
001B 772E                  355         JA     SecToTimeBlankLoad            ;time too high to display
                           356         ;JMP   SecToTimeDivide               ;time under limit-start calculating
                           357     
001D                       358     SecToTimeDivide:
001D BB0A00                359         MOV    BX, 10                        ;tenths of a second in a second
0020 33D2                  360         XOR    DX, DX                        ;clear out the high order byte
0022 F7F3                  361         DIV    BX                            ;divide time to get seconds left
                           362     
0024 BB3C00                363         MOV    BX, 60                        ;divide by seconds in a minute
0027 33D2                  364         XOR    DX, DX                        ;clear out high order byte
0029 F7F3                  365         DIV    BX                            ;minutes in AX seconds in DX
                           366     
                           367     
002B                       368     SecToTimeWriteTime:                      ;write time to TimeBuffer
002B 92                    369         XCHG   AX, DX                        ;swap minutes and seconds
                           370                                              ;so that sec in AX and min in DX
002C 8D360000       R      371         LEA    SI, TimeBuffer                ;load argument for Dec2String
0030 83C603                372         ADD    SI, SecPos                    ;compute location for writing sec
0033 E80000         E      373         CALL   Dec2String                    ;write seconds to TimeBuf
0036 8BC2                  374         MOV    AX, DX                        ;copy minutes to Dec2String arg
0038 8D360000       R      375         LEA    SI, TimeBuffer                ;address to write minutes to
003C E80000         E      376         CALL   Dec2String                    ;write seconds to TimeBuffer
                           377     
003F                       378     SectoTimeWriteColon:                     ;write colon between min and sec
003F BB0500                379         MOV    BX, ColonPos                  ;load index of colon
0042 C68700003A90   R      380         MOV    TimeBuffer[BX], ASCII_COLON   ;write colon
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

0048 EB1B90                381         JMP    SecToTimeDone                 ;done with function
                           382         
004B                       383     SecToTimeBlankLoad:                      ;write blank segment patterns
004B BB0000                384         MOV    BX, 0                         ;array index
                           385     
004E                       386     SecToTimeBlankLoop:
004E 83FB09                387         CMP    BX, TimeBufSize               ;check if array has been filled
0051 7409                  388         JE     SecToTimeBlankEnd             ;done writing 5 blanks
                           389     
0053                       390     SecToTimeWriteBlank:                     ;write blanks to the TimeBuffer
0053 C68700002090   R      391         MOV    TimeBuffer[BX], ASCII_SPACE   ;
0059 43                    392         INC    BX                            ;move index to next element
005A EBF2                  393         JMP    SecToTimeBlankLoop            ;go back to loop
                           394     
005C                       395     SecToTimeBlankEnd:
005C BB0800                396         MOV    BX, TimeBufSize - 1           ;index of last element of buffer
005F C68700000090   R      397         MOV    TimeBuffer[BX], ASCII_NULL    ;time buffer is null terminated
                           398     
0065                       399     SecToTimeDone:
0065 5E                    400         POP    SI                            ;restore registers
0066 5A                    401         POP    DX
0067 5B                    402         POP    BX
0068 C3                    403         RET
                           404     
                           405     
                           406     SecToTime    ENDP
                           407     
                           408     ;Name:               DisplayTime(Deci_Left)
                           409     ;
                           410     ;Description:        This function calls the DisplayLCD function to
                           411     ;                    display the time remaining in the track. The 
                           412     ;                    function first calls the SecToTime function to
                           413     ;                    convert the number of seconds the ASCII mm:ss format.
                           414     ;                    The function then calls DisplayLCD with the starting
                           415     ;                    address of TimeBuffer to be displayed. The function
                           416     ;                    also passes Type_Time to Display LCD to indicate
                           417     ;                    that the time remaining is being displayed. If SecToTime
                           418     ;                    returns with the carry flag set indicating an error,
                           419     ;                    the function does not display a time.
                           420     ;
                           421     ;Operation:          The function passes the argument of DisplayTime to 
                           422     ;                    SecToTime to convert the time to an ASCII
                           423     ;                    string in mm:ss format. If SecToTime returns with
                           424     ;                    the carry flag set indicating an error, the function
                           425     ;                    does not display a time. Otherwise, the function
                           426     ;                    then passes the starting address of TimeBuffer and
                           427     ;                    DisplayTime_Type to DisplayLCD.
                           428     ;
                           429     ;Arguments:          Deci_Left - tenths of seconds left in track
                           430     ;
                           431     ;Return Values:      None
                           432     ;
                           433     ;Local Variables:    None
                           434     ;
                           435     ;Shared Variables:   None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           436     ;
                           437     ;Input:              None
                           438     ;
                           439     ;Output:             None
                           440     ;
                           441     ;Error Handling:     None
                           442     ;
                           443     ;Algorithms:         None
                           444     ;
                           445     ;Registers Used:     None
                           446     ;
                           447     ;Known Bugs:         None
                           448     ;
                           449     ;Limitations:        None
                           450     ;
                           451     ;Last Modified:      2/4/16
                           452     
                           453     ;Outline
                           454     ;DisplayTime(Deci_Left)
                           455     ;    Carry = SecToTime(Deci_Left)           ;convert time to mm:ss
                           456     ;    IF Carry = 0:                          ;indicates no MAX_TIME error
                           457     ;        DisplayLCD(TimeBuffer, Type_Time)  ;display the time
                           458     ;    ELSE:                                  ;otherwise donb^^t do anything
                           459     ;        PASS
                           460     ;    RETURN
                           461     
                           462     
                           463     ; ###### Display_Time CODE #######
                           464     
                           465     ;Name:               Display_Status(Status)
                           466     ;
                           467     ;Description:        This function takes an integer that maps to a status
                           468     ;                    as its argument. The function looks up the string
                           469     ;                    associated with the integer in StatusTable, which 
                           470     ;                    is a table of fixed length strings. The function
                           471     ;                    calls the function DisplayLCD with the address
                           472     ;                    of the corresponding string and Type_Status to
                           473     ;                    indicate that a status string is being displayed.
                           474     ;
                           475     ;Operation:          The function multiplies the integer status by the
                           476     ;                    size of each table entry of StatusTable to find the
                           477     ;                    offset of the corresponding status string. The
                           478     ;                    function copies CS to ES and passes the address of the
                           479     ;                    status string to DisplayLCD. The function also
                           480     ;                    passes Type_Status to indicate to DisplayLCD that the
                           481     ;                    status is being displayed.
                           482     ;
                           483     ;Arguments:          Status - integer representing status
                           484     ;
                           485     ;Return Values:      None
                           486     ;
                           487     ;Local Variables:    String (SI) - address of string to write
                           488     ;
                           489     ;Shared Variables:   None
                           490     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           491     ;Input:              None
                           492     ;
                           493     ;Output:             None
                           494     ;
                           495     ;Error Handling:     None
                           496     ;
                           497     ;Algorithms:         None
                           498     ;
                           499     ;Registers Used:     None
                           500     ;
                           501     ;Known Bugs:         None
                           502     ;
                           503     ;Limitations:        None
                           504     ;
                           505     ;Last Modified:      2/4/16
                           506     
                           507     ;Outline
                           508     ;Display_Status(Status)
                           509     ;    Status *= SIZEOF(StatusTableEntry)      ;multiply by table entry
                           510     ;    Status += OFFSET(StatusTable)           ;calculate string address
                           511     ;    ES = CS                                 ;set segment
                           512     ;    String = StatusTable[Status]            ;string to display
                           513     ;    DisplayLCD(String, TypeStatus)          ;call Display LCD to show status
                           514     ;    RETURN
                           515     
                           516     
                           517     
                           518     ; ###### FUNCTION CODE  ######
                           519     
                           520     
                           521     ;Name:               Display_Title(char far * Title_String)
                           522     ;
                           523     ;Description:        This function is passed the address of the string
                           524     ;                    to be displayed. The function calls the function
                           525     ;                    DisplayLCD with the string and TypeTitle to indicate
                           526     ;                    to Display LCD to display the title.
                           527     ;
                           528     ;Operation:          The function first copies DS to ES.
                           529     ;                    The function then calls DisplayLCD with the address of 
                           530     ;                    the string to display. The function also passes
                           531     ;                    TypeTitle to indicate that it is a title being
                           532     ;                    displayed.
                           533     ;
                           534     ;Arguments:          Title_String - address of string to display
                           535     ;
                           536     ;Return Values:      None
                           537     ;
                           538     ;Local Variables:    None
                           539     ;
                           540     ;Shared Variables:   None
                           541     ;
                           542     ;Input:              None
                           543     ;
                           544     ;Output:             None
                           545     ;
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           546     ;Error Handling:     None
                           547     ;
                           548     ;Algorithms:         None
                           549     ;
                           550     ;Registers Used:     None
                           551     ;
                           552     ;Known Bugs:         None
                           553     ;
                           554     ;Limitations:        None
                           555     ;
                           556     ;Last Modified:      2/4/16
                           557     
                           558     ;Outline
                           559     ;Display_Title(Title_String)
                           560     ;    ES = DS                             ;DisplayLCD takes ES as segment
                           561     ;    DisplayLCD(Title_String, TypeTitle) ;display title and indicate to
                           562     ;                                        ;function that itb^^s a title
                           563     ;    RETURN
                           564     
                           565     
                           566     
                           567     ; ###### FUNCTION CODE  ######
                           568     
                           569     
                           570     
                           571     ;Name:               Display_Artist(char far * Artist_String)
                           572     ;
                           573     ;Description:        This function is passed the address of the string
                           574     ;                    to be displayed. The function calls the function
                           575     ;                    DisplayLCD with the string and TypeArtist to indicate
                           576     ;                    to Display LCD to display the artist.
                           577     ;
                           578     ;Operation:          The function first copies DS to ES.
                           579     ;                    The function then calls DisplayLCD with the address of 
                           580     ;                    the string to display. The function also passes
                           581     ;                    TypeArtist to indicate that it is a title being
                           582     ;                    displayed.
                           583     ;
                           584     ;Arguments:          Artist_String - address of string to display
                           585     ;
                           586     ;Return Values:      None
                           587     ;
                           588     ;Local Variables:    None
                           589     ;
                           590     ;Shared Variables:   None
                           591     ;
                           592     ;Input:              None
                           593     ;
                           594     ;Output:             None
                           595     ;
                           596     ;Error Handling:     None
                           597     ;
                           598     ;Algorithms:         None
                           599     ;
                           600     ;Registers Used:     None
8086/87/88/186 MACRO ASSEMBLER    DISPLCD                                                  00:06:57  04/30/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           601     ;
                           602     ;Known Bugs:         None
                           603     ;
                           604     ;Limitations:        None
                           605     ;
                           606     ;Last Modified:      2/4/16
                           607     
                           608     ;Outline
                           609     ;Display_Artist(Artist_String)
                           610     ;    ES = DS                               ;DisplayLCD takes ES as segment
                           611     ;    DisplayLCD(Artist_String, TypeArtist) ;display artist and indicate to
                           612     ;                                          ;function that itb^^s a artist
                           613     ;    RETURN
                           614     
                           615     
                           616     
                           617     ; ###### FUNCTION CODE  ######
                           618     
                           619     
----                       620     CODE ENDS
                           621     
                           622     ;start data segment
                           623     
----                       624     DATA    SEGMENT PUBLIC  'DATA'
                           625     
0000 (9                    626     TimeBuffer    DB TimeBufSize   DUP (?)        ;allocate buffer for the time
     ??
     )
0009 (14                   627     TrackBuffer   DB TrackBufSize  DUP (?)        ;allocate buffer for track name
     ??
     )
0017 (3                    628     StatusBuffer  DB StatusBufSize DUP (?)        ;allocate buffer for status
     ??
     )
001A (11                   629     ArtistBuffer  DB ArtistBufSize DUP (?)        ;allocate buffer for artist
     ??
     )
                           630     
                           631     
                           632     
----                       633     DATA ENDS
                           634     
                           635     
                           636     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
