8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE AUDIO
OBJECT MODULE PLACED IN AUDIO.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE AUDIO.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    AUDIO
                             2     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3     ;                                                                            ;
                             4     ;                                  AUDIO Code                                ;
                             5     ;                           Audio Related Functions                          ;
                             6     ;                                   EE/CS 52                                 ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description: This file contains the functions relating to the audio
                            11     ;              output.
                            12     
                            13     ; Table of Contents
                            14     ;
                            15     ;    AudioIRQOn   -turns on INT0 audio data request interrupts
                            16     ;    AudioEH      -event handler for audio data request interrupts
                            17     ;    AudioOutput  -outputs audio data to the MP3 decoder
                            18     ;    Audio_Play   -sets up shared variables for outputting audio
                            19     ;    Audio_Halt   -stops audio play by turning off ICON0 interrupts
                            20     ;    Update       -returns if NextBuffer is empty
                            21     
                            22     
                            23     ; Revision History:
                            24     ;
                            25     ;    5/18/16    Tim Liu    created file
                            26     ;    5/20/16    Tim Liu    wrote outlines for all functions
                            27     ;    5/20/16    Tim Liu    wrote Audio_Halt and AudioEH
                            28     ;    5/21/16    Tim Liu    wrote AudioOutput
                            29     ;    5/21/16    Tim Liu    wrote Audio_Play
                            30     ;    5/21/16    Tim Liu    wrote AudioIRQOn
                            31     ;    5/21/16    Tim Liu    wrote Update
                            32     ;    5/29/16    Tim Liu    added EOI to audio event handler
                            33     ;    5/30/16    Tim Liu    bug fixes found in Audio Stub
                            34     ;    5/30/16    Tim Liu    changed buffer indices from [1] to [2]
                            35     ;                          to accommodate copying words
                            36     ;    5/30/16    Tim Liu    in AudioOutput, changed INC SI to add
                            37     ;                          1 to SI so that carry flag is set
                            38     ;    5/30/16    Tim Liu    in AudioOutput, changed outputting AX
                            39     ;                          to outputting AL
                            40     ;
                            41     ; local include files
                            42 +1  $INCLUDE(AUDIO.INC)
                      =1    43     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    44     ;                                                                            ;
                      =1    45     ;                                  AUDIO.INC                                 ;
                      =1    46     ;                             Audio Include File                             ;
                      =1    47     ;                                   EE/CS 52                                 ;
                      =1    48     ;                                                                            ;
                      =1    49     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    50     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ; Description: This file contains the definitions for audio.asm
                      =1    52     
  0020                =1    53     Bytes_Per_Transfer        EQU    32      ;can send 32 bytes each DREQ interrupt
                      =1    54                                              ;the number of bytes per data buffer
                      =1    55                                              ;MUST be a multiple of this constant
                      =1    56     
  0100                =1    57     PCS2Address               EQU    100H    ;address to output DB0-6 of MP3 data
  0180                =1    58     PCS3Address               EQU    180H    ;address to output DB7 of MP3 data
                      =1    59                                              ;DB7 is output first, and PCS3
                      =1    60                                              ;triggers the BSYNC signal
                            61 +1  $INCLUDE(MIRQ.INC)
                      =1    62     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    63     ;                                                                            ;
                      =1    64     ;                                   MIRQ.INC                                 ;
                      =1    65     ;                          MP3 Interrupt Include File                        ;
                      =1    66     ;                                   EE/CS 52                                 ;
                      =1    67     ;                                                                            ;
                      =1    68     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    69     
                      =1    70     ; This file contains the definitions for initcs.asm.
                      =1    71     ;
                      =1    72     ; Revision History:
                      =1    73     ;    4/4/16     Timothy Liu     created file and wrote definitions w/o values
                      =1    74     ;    5/19/16    Timothy Liu     added INT0 interrupt definition
                      =1    75     
                      =1    76     
                      =1    77     ;Interrupt Vector Table
  0001                =1    78     FIRST_RESERVED_VEC           EQU        1       ;reserve vectors 1-3
  0003                =1    79     LAST_RESERVED_VEC            EQU          3
  0100                =1    80     NUM_IRQ_VECTORS              EQU      256    ;number of interrupt vectors
  0004                =1    81     INTERRUPT_SIZE               EQU        4    ;each vector is 4 addresses large
                      =1    82     
                      =1    83     ;Addresses
  FF22                =1    84     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
  FF32                =1    85     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
                      =1    86     
  FF38                =1    87     ICON0Address    EQU     0FF38H           ;address of ICON0 register
                      =1    88     ;ICON1Address                            ;address of ICON1 register
                      =1    89     
                      =1    90     ; Register Values
  0001                =1    91     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    92                                             ;000000000000----  reserved
                      =1    93                                             ;------------0---  enable timer interrupt
                      =1    94                                             ;-------------001  timer priority
                      =1    95     
  0013                =1    96     ICON0ON        EQU      0013H           ;0000000000010011b
                      =1    97                                             ;000000000-------b  ;reserved
                      =1    98                                             ;---------0------b  ;no nesting
                      =1    99                                             ;----------0-----b  ;no cascade mode
                      =1   100                                             ;-----------1----b  ;level triggered
                      =1   101                                             ;------------0---b  ;enable interrupts
                      =1   102                                             ;--------------11b  ;set priority to 3
                      =1   103     
  001B                =1   104     ICON0OFF        EQU      001BH          ;0000000000011011b
                      =1   105                                             ;000000000-------b  ;reserved
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106                                             ;---------0------b  ;no nesting
                      =1   107                                             ;----------0-----b  ;no cascade mode
                      =1   108                                             ;-----------1----b  ;level triggered
                      =1   109                                             ;------------1---b  ;disable interrupts
                      =1   110                                             ;--------------11b  ;set priority to 3
                      =1   111     
                      =1   112     ; End of Interrupt values
  8000                =1   113     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
  0008                =1   114     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  000C                =1   115     INT0EOI         EQU     0000CH          ;INT0 EOI
                      =1   116     ;INT1EOI
                      =1   117     
                      =1   118     ; Interrupt Vector
  0008                =1   119     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   120     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  000C                =1   121     INT0Vec         EQU     12              ;interrupt vector for INT0
                      =1   122     ;INT1VEc
                           123 +1  $INCLUDE(GENERAL.INC)
                      =1   124     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   125     ;                                                                            ;
                      =1   126     ;                                  General.INC                               ;
                      =1   127     ;                               General include file                         ;
                      =1   128     ;                                   EE/CS 51                                 ;
                      =1   129     ;                                                                            ;
                      =1   130     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   131     
                      =1   132     ; This file contains general definitions and constants.
                      =1   133     ;
                      =1   134     ; Revision History:
                      =1   135     ;    11/3/15     Timothy Liu     initial revision
                      =1   136     ;    11/5/15     Timothy Liu     fixed formatting
                      =1   137     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
                      =1   138     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1   139     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1   140     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1   141     
                      =1   142     
                      =1   143     
  0004                =1   144     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1   145     
  0002                =1   146     OffSize              EQU        2         ;offset size in bytes
                      =1   147     
                      =1   148     ;Ascii definitions
  000D                =1   149     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1   150     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1   151     ASCII_E              EQU       69         ;ASCII E
  0046                =1   152     ASCII_F              EQU       70         ;F character for fire (laser on)
  0049                =1   153     ASCII_I              EQU       73         ;I character
  004C                =1   154     ASCII_L              EQU       76         ;L character
  004F                =1   155     ASCII_O              EQU       79         ;O character for off (laser off)
  0050                =1   156     ASCII_P              EQU       80         ;P character
  0052                =1   157     ASCII_R              EQU       82         ;R character
  0053                =1   158     ASCII_S              EQU       83         ;S character
  0054                =1   159     ASCII_T              EQU       84         ;T character
  0000                =1   160     ASCII_NULL           EQU        0         ;ASCII null character
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

  0020                =1   161     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1   162     ASCII_COLON          EQU       58         ;ASCII colon
  003E                =1   163     ASCII_RArrow         EQU       62         ;ASCII > symbol
                      =1   164     
  0001                =1   165     TRUE                 EQU        1         ;true
  0000                =1   166     FALSE                EQU        0         ;false
                      =1   167     
  0002                =1   168     WORD_SIZE            EQU        2         ;2 bytes per word
  0002                =1   169     FAR_SIZE             EQU        2         ;2 words per far address
  1000                =1   170     Segment_Overlap      EQU    1000H         ;number of unique ways to map physical
                      =1   171                                               ;address
                           172     
                           173     CGROUP    GROUP    CODE
                           174     DGROUP    GROUP    DATA
                           175     
                           176     
                           177     
----                       178     CODE SEGMENT PUBLIC 'CODE'
                           179     
                           180             ASSUME  CS:CGROUP, DS:DGROUP 
                           181     
                           182     ;external function declarations
                           183     
                           184     ;Name:               AudioIRQOn
                           185     ;
                           186     ;Description:        This function enables data request interrupts from the
                           187     ;                    MP3 decoder. The function writes ICON0ON to ICON0Address.
                           188     ;                    The function also sends an EOI to clear out the interrupt
                           189     ;                    handler.
                           190     ; 
                           191     ;Operation:          The function copies ICON0ON to AX and copies ICON0Address
                           192     ;                    to DX. The function then outputs the address to the
                           193     ;                    peripheral control block. The function then outputs
                           194     ;                    INT0EOI to INTCtrlrEOI to clear the interrupt controller.
                           195     ;
                           196     ;Arguments:          None
                           197     ;
                           198     ;Return Values:      None
                           199     ;
                           200     ;Local Variables:    None
                           201     ;
                           202     ;Shared Variables:   None
                           203     ;
                           204     ;Output:             None
                           205     ;
                           206     ;Error Handling:     None
                           207     ;
                           208     ;Algorithms:         None
                           209     ;
                           210     ;Registers Used:     None
                           211     ;
                           212     ;Known Bugs:         None
                           213     ;
                           214     ;Limitations:        None
                           215     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     ;Author:             Timothy Liu
                           217     ;
                           218     ;Last Modified       5/21/16
                           219     
0000                       220     AudioIRQOn            PROC    NEAR
                           221                           PUBLIC  AudioIRQOn
                           222     
0000                       223     AudioIRQOnStart:                          ;save registers
0000 50                    224         PUSH    AX
0001 52                    225         PUSH    DX
                           226     
0002                       227     AudioIRQOnOutput:                         ;turn on INT0 data request interrupts
                           228                                               ;and send an EOI
0002 BA38FF                229         MOV     DX, ICON0Address              ;address of INT0 interrupt controller
0005 B81300                230         MOV     AX, ICON0On                   ;value to start int 0 interrupts
0008 EF                    231         OUT     DX, AX
                           232     
0009 BA22FF                233         MOV     DX, INTCtrlrEOI               ;address of interrupt EOI register
000C B80C00                234         MOV     AX, INT0EOI                   ;INT0 end of interrupt
000F EF                    235         OUT     DX, AX                        ;output to peripheral control block
                           236     
0010                       237     AudioIRQOnDone:                           ;restore registers and return
0010 5A                    238         POP     DX
0011 58                    239         POP     AX
0012 C3                    240         RET
                           241     
                           242     
                           243     
                           244     AudioIRQOn        ENDP
                           245     
                           246     
                           247     
                           248     ;Name:               AudioEH
                           249     ;
                           250     ;Description:        This function handles audio data request interrupts.
                           251     ;                    The function is called whenever the VS1011 MP3
                           252     ;                    decoder needs more data.
                           253     ; 
                           254     ;Operation:          The function first saves the registers that will be
                           255     ;                    modified by AudioOutput. The function calls AudioOutput,
                           256     ;                    which checks if the data buffers have data and serially
                           257     ;                    outputs data to the MP3 decoder. The function then
                           258     ;                    sends an INT0 EOI and restores the registers and IRET.
                           259     ;
                           260     ;Arguments:          None
                           261     ;
                           262     ;Return Values:      None
                           263     ;
                           264     ;Local Variables:    None
                           265     ;
                           266     ;Shared Variables:   None
                           267     ;
                           268     ;Output:             None
                           269     ;
                           270     ;Error Handling:     None
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;
                           272     ;Algorithms:         None
                           273     ;
                           274     ;Registers Used:     None
                           275     ;
                           276     ;Known Bugs:         None
                           277     ;
                           278     ;Limitations:        None
                           279     ;
                           280     ;Author:             Timothy Liu
                           281     ;
                           282     ;Last Modified       5/30/16
                           283     
0013                       284     AudioEH        PROC    NEAR
                           285                    PUBLIC  AudioEH
                           286     
0013                       287     AudioEHStart:                            ;save the registers
0013 50                    288         PUSH    AX
0014 51                    289         PUSH    CX
0015 52                    290         PUSH    DX
0016 E80B00                291         CALL    AudioOutput                  ;call function to output audio data
                           292     
0019                       293     AudioEHSendEOI:
0019 BA22FF                294         MOV     DX, INTCtrlrEOI               ;address of interrupt EOI register
001C B80C00                295         MOV     AX, INT0EOI                   ;INT0 end of interrupt
001F EF                    296         OUT     DX, AX                        ;output to peripheral control block
                           297     
0020                       298     AudioEHDone:                              ;restore registers and return
0020 5A                    299         POP     DX
0021 59                    300         POP     CX
0022 58                    301         POP     AX
                           302         
0023 CF                    303         IRET                                 ;IRET from interrupt handlers
                           304     
                           305     AudioEH        ENDP
                           306     
                           307     
                           308     ;Name:               AudioOutput
                           309     ;
                           310     ;Description:        This function sends data serially to the MP3 decoder.
                           311     ;                    The function copies bytes from CurrentBuffer and performs
                           312     ;                    bit banging to output the bytes. The function transfers
                           313     ;                    Bytes_Per_Transfer each time the function is called. If
                           314     ;                    CurBuffLeft is equal to zero, then the function swaps
                           315     ;                    the NextBuffer into CurrentBuffer and continues playing
                           316     ;                    from CurrentBuffer. The function also sets the NeedData
                           317     ;                    flag to indicate that more data is need so that
                           318     ;                    NextBuffer is filled. The function is called whenever
                           319     ;                    the MP3 decoder sends a data request interrupt.
                           320     ;                    If both the current buffer and next buffer are empty, the
                           321     ;                    function calls Audio_Halt to shut off data request interrupts.
                           322     ;                    Interrupts are not restored until more data is provided.
                           323     ; 
                           324     ;Operation:          The function first checks if CurBuffLeft is equal to
                           325     ;                    to zero, indicating the current buffer is empty.
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;                    If the current data buffer is empty, the function
                           327     ;                    makes the next buffer the current buffer and sets
                           328     ;                    NeedData to indicate that a new buffer is needed. If
                           329     ;                    the next buffer is also empty, then the function 
                           330     ;                    calls Audio_Halt to turns off ICON0 interrupts and returns.
                           331     ;                    If there is data in the current buffer, then the
                           332     ;                    function outputs BytesPerTransfer bytes starting at
                           333     ;                    CurrentBuffer. The address pointed to by CurrentBuffer 
                           334     ;                    is copied to ES:SI. AudioOutput copies the byte ES:SI
                           335     ;                    points to to AL and outputs the bits serially.  The MSB
                           336     ;                    is output to PCS3. After the first bit is output, the
                           337     ;                    other bits are shifted to DB0 and output to PCS2
                           338     ;                    until the byte is fully output. The function increments
                           339     ;                    SI after each byte transfer and outputs BytesPerTransfer
                           340     ;                    bytes. After the bytes are output, the function
                           341     ;                    decrements CurBuffLeft by BytesPerTransfer. The function
                           342     ;                    copies SI to CurrentBuffer[0] to update the offset of
                           343     ;                    the buffer. The function copies ES to CurrentBuffer[2] to
                           344     ;                    update the segment. CurrentBuffer always points to the next byte
                           345     ;                    to output The size of the passed buffers MUST be
                           346     ;                    a multiple of BytesPerTransfer. 
                           347     ;                    
                           348     ;
                           349     ;Arguments:          None
                           350     ;
                           351     ;Return Values:      None
                           352     ;
                           353     ;Local Variables:    CX - Bytes left to transfer
                           354     ;                    SI - offset of current buffer pointer
                           355     ;                    ES - segment of current buffer pointer
                           356     ;
                           357     ;Shared Variables:   CurrentBuffer(R/W) - 32 bit address of current data buffer
                           358     ;                                         being played from
                           359     ;                    CurBuffLeft(R/W)   - bytes left in the data buffer
                           360     ;                    NextBuffer(R)      - 32 bit address of next data buffer
                           361     ;                    NextBuffLeft(R)    - bytes left in next data buffer
                           362     ;                    NeedData(R/W)      - indicates more data is needed 
                           363     ;
                           364     ;Output:             MP3 audio output data output to MP3 decoder through
                           365     ;                    DB0
                           366     ;
                           367     ;Error Handling:     None
                           368     ;
                           369     ;Algorithms:         None
                           370     ;
                           371     ;Registers Used:     AX, CX - these registers are preserved by event handler
                           372     ;                    Flag register
                           373     ;
                           374     ;Known Bugs:         None
                           375     ;
                           376     ;Limitations:        Size of audio data buffers is assumed to be a multiple
                           377     ;                    of BYTES_PER_TRANSFER
                           378     ;                    Data buffers are assumed to be entirely in a single segment
                           379     ;
                           380     ;Author:             Timothy Liu
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;
                           382     ;Last Modified       5/30/16
                           383     
                           384     
                           385     ;Outline
                           386     ;AudioOutput()
                           387     ;    IF    CurBuffLeft = 0:          ;Current buffer going to run out
                           388     ;        IF NeedData == True:        ;both buffers are empty - panic!
                           389     ;            ICON0 = ICON0Off        ;shut off the interrupt handler
                           390     ;            CALL AudioHalt          ;these two are the same things
                           391     ;        CurrentBuffer = NextBuffer  ;make the next buffer the current buffer
                           392     ;        CurBufferLeft = NextBuffLeft
                           393     ;        NeedData = TRUE             ;indicate more data is needed
                           394     ;    ELSE:                           ;there is enough data
                           395     ;        For i in BytesPerTransfer   ;loop outputting 32 bytes
                           396     ;            AL = [CurrentBuffer]    ;load byte to output
                           397     ;            SHL                         ;put most significant byte in DB0
                           398     ;            OUT AL, PCS3                ;first bit goes to PCS3
                           399     ;            For j in LowBits            ;loop outputting other 7 bits
                           400     ;                                        ;loop will be unrolled for speed
                           401     ;                SHL                     ;shift to next bit
                           402     ;                OUT AL, PCS2            ;output the next bit
                           403     ;            [CurrentBuffer] += 1           ;increment to next byte
                           404     ;        CurBufferLeft -= BytesPerTransfer ;32 fewer bytes in buffer
                           405             
                           406     
                           407     
0024                       408     AudioOutput        PROC    NEAR
                           409                        PUBLIC  AudioOutput
                           410     
0024                       411     AudioOutputStart:                            ;starting label - save registers
0024 56                    412         PUSH    SI
0025 06                    413         PUSH    ES
                           414     
0026                       415     AudioOutputCheckCur:                         ;check if current buffer is empty
0026 833E080000     R      416         CMP    CurBuffLeft, 0                    ;check no bytes left in buffer
002B 7403                  417         JE     AudioOutputCheckNext              ;go check if next buffer empty
002D EB2990                418         JMP    AudioOutputByteLoopPrep           ;Current buffer not empty - 
                           419                                                  ;output data
                           420     
0030                       421     AudioOutputCheckNext:
0030 803E0C0001     R      422         CMP    NeedData, TRUE                    ;see if next buffer is empty
0035 741B                  423         JE     AudioOutputEmpty                  ;both buffers are empty
                           424         ;JMP    AudioOutputSwap                  ;make NextBuffer -> CurrentBuffer
                           425     
0037                       426     AudioOutputSwap:                             ;read from NextBuffer
0037 A10400         R      427        MOV    AX, NextBuffer[0]                  ;copy segment of NextBuffer
003A A30000         R      428        MOV    CurrentBuffer[0], AX               ;make NextBuffer CurrentBuffer
                           429     
003D A10600         R      430        MOV    AX, NextBuffer[2]                  ;copy offset of NextBuffer
0040 A30200         R      431        MOV    CurrentBuffer[2], AX
                           432     
0043 A10A00         R      433        MOV    AX, NextBuffLeft                   ;copy bytes left of NextBuffer
0046 A30800         R      434        MOV    CurBuffLeft, AX                    ;to CurBuffLeft
                           435     
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

0049 C6060C000190   R      436        MOV    NeedData, TRUE                     ;indicate more data is needed
004F EB0790                437        JMP    AudioOutputByteLoopPrep            ;prepare to output data
                           438     
0052                       439     AudioOutputEmpty:                            ;both audio buffers are empty
0052 E87900                440        CALL   Audio_Halt                         ;switch off audio interrupts
0055 EB4290                441        JMP    AudioOutputDone                    ;canb^^t output any data
                           442     
0058                       443     AudioOutputByteLoopPrep:                     ;prepare to output buffer data
0058 B92000                444         MOV   CX, Bytes_Per_Transfer             ;number bytes left to transfer
                           445                                                  ;for this interrupt
005B A10200         R      446         MOV   AX, CurrentBuffer[2]               ;copy buffer segment to ES
005E 8EC0                  447         MOV   ES, AX
                           448     
0060 8B360000       R      449         MOV   SI, CurrentBuffer[0]               ;copy buffer offset to SI
                           450         ;JMP  AudioOutputLoop                    ;go to loop
                           451     
0064                       452     AudioOutputLoop:
0064 83F900                453         CMP   CX, 0                              ;check if no bytes left
0067 7430                  454         JE    AudioOutputDone                    ;no bytes left - function done
0069 268A04                455         MOV   AL, ES:[SI]                        ;copy byte to be transferred
                           456     
006C                       457     AudioOutputSerial:                           ;serially send data to MP3 - MSB
                           458                                                  ;first
006C BA8001                459         MOV   DX, PCS3Address                    ;address to output DB7 to
006F D0C0                  460         ROL   AL, 1                              ;output MSB on DB0
0071 EE                    461         OUT   DX, AL                             ;first bit goes to PCS3 to trigger
                           462                                                  ;BSYNC
                           463     
0072 BA0001                464         MOV   DX, PCS2Address                    ;address to output bits 0-6
0075 D0C0                  465         ROL   AL, 1                              ;shift so DB6 is LSB
0077 EE                    466         OUT   DX, AL                             ;output other bits to PCS2
                           467         
0078 D0C0                  468         ROL   AL, 1                              ;shift so DB5 is LSB
007A EE                    469         OUT   DX, AL                             ;output other bits to PCS2
                           470         
007B D0C0                  471         ROL   AL, 1                              ;shift so DB4 is LSB
007D EE                    472         OUT   DX, AL                             ;output other bits to PCS2
                           473         
007E D0C0                  474         ROL   AL, 1                              ;shift so DB3 is LSB
0080 EE                    475         OUT   DX, AL                             ;output other bits to PCS2
                           476         
0081 D0C0                  477         ROL   AL, 1                              ;shift so DB2 is LSB
0083 EE                    478         OUT   DX, AL                             ;output other bits to PCS2
                           479         
0084 D0C0                  480         ROL   AL, 1                              ;shift so DB1 is LSB
0086 EE                    481         OUT   DX, AL                             ;output other bits to PCS2
                           482         
0087 D0C0                  483         ROL   AL, 1                              ;shift so DB0 is LSB
0089 EE                    484         OUT   DX, AL                             ;output other bits to PCS2
                           485     
008A                       486     AudioOutputUpdateByte:
008A 49                    487         DEC   CX                                 ;one fewer byte left to transfer
008B 83C601                488         ADD   SI, 1                              ;update pointer to next byte
008E 73D4                  489         JNC   AudioOutputLoop                    ;SI didnb^^t overflow - same segment
                           490                                                  ;go back to loop
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

                           491         ;JMP  AudioOutputUpdateSegment           ;SI overflowed - update the segment
                           492     
0090                       493     AudioOutputUpdateSegment:
0090 8CC0                  494         MOV   AX, ES                             ;use accumulator to perform addition
0092 050010                495         ADD   AX, Segment_Overlap                ;change segment so ES:SI points to
                           496                                                  ;next physical address
0095 8EC0                  497         MOV   ES, AX                             ;write new segment back to ES
0097 EBCB                  498         JMP   AudioOutputLoop                    ;go back to loop
                           499     
0099                       500     AudioOutputDone:                             ;function finished
0099 89360000       R      501         MOV    CurrentBuffer[0], SI              ;store the buffer location to 
                           502                                                  ;start reading from
009D 8CC0                  503         MOV    AX, ES                            ;store the updated buffer segment
009F A30200         R      504         MOV    CurrentBuffer[2], AX
00A2 832E080020     R      505         SUB    CurBuffLeft, Bytes_Per_Transfer   ;update number of bytes left in
                           506                                                  ;the buffer
00A7 07                    507         POP    ES
00A8 5E                    508         POP    SI
00A9 C3                    509         RET
                           510     
                           511     AudioOutput    ENDP
                           512     
                           513     
                           514     ;Name:               Audio_Play(unsigned short int far *, int)
                           515     ;
                           516     ;Description:        This function is called when the audio output is 
                           517     ;                    started. This function is passed the address of the
                           518     ;                    data buffer. The address is stored in CurrentBuffer.
                           519     ;                    The function multiplies the second argument, the length
                           520     ;                    of the buffer in words, by WORD_SIZE and moves the 
                           521     ;                    product to the shared variable
                           522     ;                    CurBuffLeft. The function then calls AudioIRQON enable
                           523     ;                    data request interrupts. Finally, the function indicates
                           524     ;                    that the next buffer is empty and more data is needed.
                           525     ; 
                           526     ;Operation:          The function first copies the stack pointer to BP and 
                           527     ;                    indexes into the stack. The function copies the 32 bit 
                           528     ;                    address passed as the first argument to CurrentBuffer.
                           529     ;                    The function indexes into the stack to copy the second
                           530     ;                    argument into CurBuffLeft, which is the number of words
                           531     ;                    left in the buffer to play. The function then calls
                           532     ;                    AudioIRQON to enable data request
                           533     ;                    interrupts. The function writes TRUE to NeedData to indicate
                           534     ;                    that the next buffer is empty.
                           535     ;
                           536     ;Arguments:          unsigned short int far * - address of data buffer
                           537     ;                    int - length of buffer in words
                           538     ;
                           539     ;Return Values:      None
                           540     ;
                           541     ;Local Variables:    None
                           542     ;
                           543     ;Shared Variables:   CurrentBuffer(W) - 16 bit address of current data buffer
                           544     ;                                       being played from
                           545     ;                    CurBuffLeft(W) -   number of words left in the data buffer
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           546     ;
                           547     ;Output:             None
                           548     ;
                           549     ;Error Handling:     None
                           550     ;
                           551     ;Algorithms:         None
                           552     ;
                           553     ;Registers Used:     None
                           554     ;
                           555     ;Known Bugs:         None
                           556     ;
                           557     ;Limitations:        None
                           558     ;
                           559     ;Author:             Timothy Liu
                           560     ;
                           561     ;Last Modified       5/30/16
                           562     
00AA                       563     Audio_Play        PROC    NEAR
                           564                       PUBLIC  Audio_Play
                           565     
00AA                       566     AudioPlayStart:                          ;set up BP to index into stack
00AA 55                    567         PUSH    BP                           ;save base pointer
00AB 8BEC                  568         MOV     BP, SP                       ;base pointer used to index into stack
00AD 50                    569         PUSH    AX                           ;save register
                           570     
00AE                       571     AudioPlayArgs:                           ;pull the arguments from the stack
00AE 8B4604                572         MOV     AX, SS:[BP+4]                ;buffer offset
00B1 A30000         R      573         MOV     CurrentBuffer[0], AX         ;write offset to CurrentBuffer
                           574     
00B4 8B4606                575         MOV     AX, SS:[BP+6]                ;buffer segment
00B7 A30200         R      576         MOV     CurrentBuffer[2], AX         ;write buffer segment to CurrentBuffer
                           577     
00BA 8B4608                578         MOV     AX, SS:[BP+8]                ;length of the buffer in words
00BD D1E0                  579         SHL     AX, 1                        ;double to convert to number of bytes
00BF A30800         R      580         MOV     CurBuffLeft, AX              ;load number of bytes left
                           581     
00C2                       582     AudioPlayNeedData:                       ;indicate that the next buffer is empty
00C2 C6060C000190   R      583         MOV     NeedData, TRUE               ;next buffer is empty
                           584     
00C8                       585     AudioPlayIRQON:
00C8 E835FF                586         CALL    AudioIRQOn                   ;turn audio data request interrupts on
                           587     
00CB                       588     AudioPlayDone:                           ;restores registers
00CB 58                    589         POP     AX
00CC 5D                    590         POP     BP
00CD C3                    591         RET
                           592         
                           593     
                           594     Audio_Play    ENDP
                           595     
                           596     
                           597     ;Name:               Audio_Halt
                           598     ;
                           599     ;Description:        This function terminates the output of audio data. The 
                           600     ;                    function does not return any value.
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

                           601     ; 
                           602     ;Operation:          The function writes the value ICON0OFF to ICON0ADDRESS.
                           603     ;                    This disables interrupts from INT0 and disables MP3
                           604     ;                    audio data request interrupts. The function then returns.
                           605     ;
                           606     ;Arguments:          None
                           607     ;
                           608     ;Return Values:      None
                           609     ;
                           610     ;Local Variables:    None
                           611     ;
                           612     ;Shared Variables:   None
                           613     ;
                           614     ;Output:             None
                           615     ;
                           616     ;Error Handling:     None
                           617     ;
                           618     ;Algorithms:         None
                           619     ;
                           620     ;Registers Used:     None
                           621     ;
                           622     ;Known Bugs:         None
                           623     ;
                           624     ;Limitations:        None
                           625     ;
                           626     ;Author:             Timothy Liu
                           627     ;
                           628     ;Last Modified       5/21/16
                           629     
00CE                       630     Audio_Halt        PROC    NEAR
                           631                       PUBLIC  Audio_Halt
                           632     
00CE                       633     AudioHaltStart:                        ;starting label - save registers
00CE 50                    634         PUSH    AX
00CF 52                    635         PUSH    DX
                           636     
00D0                       637     AudioHaltWrite:                        ;turn off data request interrupts
00D0 BA38FF                638         MOV    DX, ICON0Address            ;address of INT0 control register
00D3 B81B00                639         MOV    AX, ICON0OFF                ;value to turn off data request IRQ
00D6 EF                    640         OUT    DX, AX                      ;shut off interrupts
                           641     
00D7                       642     AudioHaltDone:                         ;done - restore labels and return
00D7 5A                    643         POP    DX
00D8 58                    644         POP    AX
00D9 C3                    645         RET
                           646     
                           647     
                           648     Audio_Halt    ENDP
                           649     
                           650     ;Name:               Update
                           651     ;
                           652     ;Description:        This function stores the address of a fresh audio buffer
                           653     ;                    if the secondary audio buffer is empty. The function
                           654     ;                    returns TRUE if the passed buffer was stored and a new
                           655     ;                    buffer with more audio data is needed. The function
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

                           656     ;                    returns FALSE if more audio data is not needed. The
                           657     ;                    function is passed the address of the new buffer, and the
                           658     ;                    length of the new buffer. If the new audio buffer is
                           659     ;                    stored, then the length of the new audio buffer is 
                           660     ;                    stored in NextBufferLeft.
                           661     ; 
                           662     ;Operation:          The function copies SP to BP and uses the base pointer
                           663     ;                    to index into the stack. The checks the flag NeedData
                           664     ;                    to see if more data is needed. If more data is needed,
                           665     ;                    then the function copies the first argument - the address
                           666     ;                    of the data buffer - into NextBuffer. Next, 
                           667     ;                    the function multiplies the second argument (the 
                           668     ;                    address of the new buffer) by WORD_SIZE and moves the
                           669     ;                    product into NextBufferLeft, which is the number of 
                           670     ;                    bytes remaining in NextBuffer. The function then resets
                           671     ;                    the NeedData flag to FALSE, indicating that
                           672     ;                    there is data in NextBuffer. If the passed pointer is
                           673     ;                    used, then the function returns TRUE. If more data is
                           674     ;                    not needed (NeedData was False) , then the function             
                                        
                           675     ;                    does nothing but return FALSE. The function calls
                           676     ;                    AudioIRQOn to turn on INT0 data request interrupts if the
                           677     ;                    new buffer was used.
                           678     ;
                           679     ;Arguments:          unsigned short int far* - address of new audio buffer
                           680     ;                    int - length of the new buffer in words
                           681     ;
                           682     ;Return Values:      TRUE if more data was needed; FALSE otherwise
                           683     ;
                           684     ;Local Variables:    None
                           685     ;
                           686     ;Shared Variables:   NextBuffer(W) - pointer to second data buffer
                           687     ;                    NextBufferLen(W) - length of the passed data buffer
                           688     ;                    NeedData(R/W) - indicates if more data is needed
                           689     ;
                           690     ;Output:             None
                           691     ;
                           692     ;Error Handling:     None
                           693     ;
                           694     ;Algorithms:         None
                           695     ;
                           696     ;Registers Used:     AX
                           697     ;
                           698     ;Known Bugs:         None
                           699     ;
                           700     ;Limitations:        None
                           701     ;
                           702     ;Author:             Timothy Liu
                           703     ;
                           704     ;Last Modified       5/30/16
                           705     
00DA                       706     Update            PROC    NEAR
                           707                       PUBLIC  Update
                           708     
00DA                       709     UpdateStart:                            ;prepare BP to index into stack
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

00DA 55                    710         PUSH    BP                          ;preserve BP
00DB 8BEC                  711         MOV     BP, SP                      ;use BP as stack index
                           712     
00DD                       713     UpdateCheckNeed:                        ;see if more data is needed
00DD 803E0C0000     R      714         CMP    NeedData, FALSE              ;
00E2 7423                  715         JE     UpdateNoNeed                 ;next buffer filled - no data needed
                           716         ;JMP   UpdateNextEmpty              ;more data is needed
                           717     
00E4                       718     UpdateNextEmpty:                        ;next buffer is empty
00E4 8B4604                719         MOV    AX, SS:[BP+4]                ;offset of the new buffer
00E7 A30400         R      720         MOV    NextBuffer[0], AX            ;load offset of the new buffer
                           721     
00EA 8B4606                722         MOV    AX, SS:[BP+6]                ;segment of the new buffer
00ED A30600         R      723         MOV    NextBuffer[2], AX            ;load the offset of the new buffer
                           724     
00F0 8B4608                725         MOV    AX, SS:[BP+8]                ;length of the new buffer in words
00F3 D1E0                  726         SHL    AX, 1                        ;double to get length of buffer in bytes
00F5 A30A00         R      727         MOV    NextBuffLeft, AX             ;store the length in bytes
                           728     
00F8 E805FF                729         CALL   AudioIRQOn                   ;turn on data request interrupts
00FB B80100                730         MOV    AX, TRUE                     ;passed buffer was used
00FE C6060C000090   R      731         MOV    NeedData, False              ;NextBuffer is filled - no need for data
0104 EB0490                732         JMP    UpdateDone
                           733     
0107                       734     UpdateNoNeed:
0107 B80000                735         MOV    AX, FALSE                    ;not ready for more data
                           736     
010A                       737     UpdateDone:
010A 5D                    738         POP    BP
010B C3                    739         RET
                           740     
                           741     
                           742     Update        ENDP
                           743     
----                       744     CODE ENDS
                           745     
                           746     ;start data segment
                           747     
                           748     
----                       749     DATA    SEGMENT    PUBLIC  'DATA'
                           750     
0000 (2                    751     CurrentBuffer    DW FAR_SIZE DUP (?)     ;32 bit address of current audio buffer
     ????
     )
0004 (2                    752     NextBuffer       DW FAR_SIZE DUP (?)     ;32 bit address of next audio buffer
     ????
     )
0008 ????                  753     CurBuffLeft      DW               ?      ;bytes left in current buffer
000A ????                  754     NextBuffLeft     DW               ?      ;bytes left in next buffer
                           755     
000C ??                    756     NeedData         DB               ?      ;flag set when NextBuffer is empty
                           757                                              ;and more data is needed
                           758     
----                       759     DATA ENDS
                           760     
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    18:31:39  05/30/;6  PAGE   15


LOC  OBJ                  LINE     SOURCE

                           761             END

ASSEMBLY COMPLETE, NO ERRORS FOUND
