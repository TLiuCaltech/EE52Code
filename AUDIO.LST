8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE AUDIO
OBJECT MODULE PLACED IN AUDIO.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE AUDIO.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    AUDIO
                             2     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3     ;                                                                            ;
                             4     ;                                  AUDIO Code                                ;
                             5     ;                           Audio Related Functions                          ;
                             6     ;                                   EE/CS 52                                 ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description: This file contains the functions relating to the audio
                            11     ;              output.
                            12     
                            13     ; Table of Contents
                            14     ;
                            15     ;    AudioEH      -event handler for audio data request interrupts
                            16     ;    AudioOutput  -outputs audio data to the MP3 decoder
                            17     ;    Audio_Play   -sets up shared variables for outputting audio
                            18     ;    Audio_Halt   -stops audio play by turning off ICON0 interrupts
                            19     ;    Update       -returns if NextBuffer is empty 
                            20     
                            21     
                            22     ; Revision History:
                            23     ;
                            24     ;    5/18/16    Tim Liu    created file
                            25     ;    
                            26     ;
                            27     ;
                            28     ; local include files
                            29 +1  $INCLUDE(AUDIO.INC)
                      =1    30     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    31     ;                                                                            ;
                      =1    32     ;                                  AUDIO.INC                                 ;
                      =1    33     ;                             Audio Include File                             ;
                      =1    34     ;                                   EE/CS 52                                 ;
                      =1    35     ;                                                                            ;
                      =1    36     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    37     ;
                      =1    38     ; Description: This file contains the definitions for audio.asm
                            39 +1  $INCLUDE(MIRQ.INC)
                      =1    40     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    41     ;                                                                            ;
                      =1    42     ;                                   MIRQ.INC                                 ;
                      =1    43     ;                          MP3 Interrupt Include File                        ;
                      =1    44     ;                                   EE/CS 52                                 ;
                      =1    45     ;                                                                            ;
                      =1    46     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    47     
                      =1    48     ; This file contains the definitions for initcs.asm.
                      =1    49     ;
                      =1    50     ; Revision History:
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;    4/4/16     Timothy Liu     created file and wrote definitions w/o values
                      =1    52     ;    5/19/16    Timothy Liu     added INT0 interrupt definition
                      =1    53     
                      =1    54     
                      =1    55     ;Interrupt Vector Table
  0001                =1    56     FIRST_RESERVED_VEC           EQU        1       ;reserve vectors 1-3
  0003                =1    57     LAST_RESERVED_VEC            EQU          3
  0100                =1    58     NUM_IRQ_VECTORS              EQU      256    ;number of interrupt vectors
  0004                =1    59     INTERRUPT_SIZE               EQU        4    ;each vector is 4 addresses large
                      =1    60     
                      =1    61     ;Addresses
  FF22                =1    62     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
  FF32                =1    63     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
                      =1    64     
  FF38                =1    65     ICON0Address    EQU     0FF38H           ;address of ICON0 register
                      =1    66     ;ICON1Address                            ;address of ICON1 register
                      =1    67     
                      =1    68     ; Register Values
  0001                =1    69     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    70                                             ;000000000000----  reserved
                      =1    71                                             ;------------0---  enable timer interrupt
                      =1    72                                             ;-------------001  timer priority
                      =1    73     
  0013                =1    74     ICON0ON        EQU      0013H           ;0000000000010011b
                      =1    75                                             ;000000000-------b  ;reserved
                      =1    76                                             ;---------0------b  ;no nesting
                      =1    77                                             ;----------0-----b  ;no cascade mode
                      =1    78                                             ;-----------1----b  ;level triggered
                      =1    79                                             ;------------0---b  ;enable interrupts
                      =1    80                                             ;--------------11b  ;set priority to 3
                      =1    81     
  001B                =1    82     ICON0OFF        EQU      001BH          ;0000000000011011b
                      =1    83                                             ;000000000-------b  ;reserved
                      =1    84                                             ;---------0------b  ;no nesting
                      =1    85                                             ;----------0-----b  ;no cascade mode
                      =1    86                                             ;-----------1----b  ;level triggered
                      =1    87                                             ;------------1---b  ;disable interrupts
                      =1    88                                             ;--------------11b  ;set priority to 3
                      =1    89     
                      =1    90     ; End of Interrupt values
  8000                =1    91     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
  0008                =1    92     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  000C                =1    93     INT0EOI         EQU     0000CH          ;INT0 EOI
                      =1    94     ;INT1EOI
                      =1    95     
                      =1    96     ; Interrupt Vector
  0008                =1    97     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1    98     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  000C                =1    99     INT0Vec         EQU     12              ;interrupt vector for INT0
                      =1   100     ;INT1VEc
                           101 +1  $INCLUDE(GENERAL.INC)
                      =1   102     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   103     ;                                                                            ;
                      =1   104     ;                                  General.INC                               ;
                      =1   105     ;                               General include file                         ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     ;                                   EE/CS 51                                 ;
                      =1   107     ;                                                                            ;
                      =1   108     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   109     
                      =1   110     ; This file contains general definitions and constants.
                      =1   111     ;
                      =1   112     ; Revision History:
                      =1   113     ;    11/3/15     Timothy Liu     initial revision
                      =1   114     ;    11/5/15     Timothy Liu     fixed formatting
                      =1   115     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
                      =1   116     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1   117     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1   118     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1   119     
                      =1   120     
                      =1   121     
  0004                =1   122     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1   123     
  0002                =1   124     OffSize              EQU        2         ;offset size in bytes
                      =1   125     
                      =1   126     ;Ascii definitions
  000D                =1   127     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1   128     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1   129     ASCII_E              EQU       69         ;ASCII E
  0046                =1   130     ASCII_F              EQU       70         ;F character for fire (laser on)
  0049                =1   131     ASCII_I              EQU       73         ;I character
  004C                =1   132     ASCII_L              EQU       76         ;L character
  004F                =1   133     ASCII_O              EQU       79         ;O character for off (laser off)
  0050                =1   134     ASCII_P              EQU       80         ;P character
  0052                =1   135     ASCII_R              EQU       82         ;R character
  0053                =1   136     ASCII_S              EQU       83         ;S character
  0054                =1   137     ASCII_T              EQU       84         ;T character
  0000                =1   138     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1   139     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1   140     ASCII_COLON          EQU       58         ;ASCII colon
  003E                =1   141     ASCII_RArrow         EQU       62         ;ASCII > symbol
                      =1   142     
  0001                =1   143     TRUE                 EQU        1         ;true
  0000                =1   144     FALSE                EQU        0         ;false
                      =1   145     
  0002                =1   146     WORD_SIZE            EQU        2         ;2 bytes per word
  0002                =1   147     FAR_SIZE             EQU        2         ;2 words per far address
                           148     
                           149     CGROUP    GROUP    CODE
                           150     DGROUP    GROUP    DATA
                           151     
                           152     
                           153     
----                       154     CODE SEGMENT PUBLIC 'CODE'
                           155     
                           156             ASSUME  CS:CGROUP, DS:DGROUP 
                           157     
                           158     ;external function declarations
                           159     
                           160     
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     
                           162     ;Name:               AudioEH
                           163     ;
                           164     ;Description:        This function handles audio data request interrupts.
                           165     ;                    The function is called whenever the VS1011 MP3
                           166     ;                    decoder needs more data.
                           167     ; 
                           168     ;Operation:          The function first saves the registers. It then loads
                           169     ;                    the constant RefreshRows into BX. RefreshRows is the
                           170     ;                    number of rows that will be refreshed with each
                           171     ;                    call to RefreshDRAM. The function then loops
                           172     ;                    and reads from PCS4Address RefreshRows times. The
                           173     ;                    function then restores the registers and returns.
                           174     ;
                           175     ;Arguments:          None
                           176     ;
                           177     ;Return Values:      None
                           178     ;
                           179     ;Local Variables:    None
                           180     ;
                           181     ;Shared Variables:   None
                           182     ;
                           183     ;Output:             None
                           184     ;
                           185     ;Error Handling:     None
                           186     ;
                           187     ;Algorithms:         None
                           188     ;
                           189     ;Registers Used:     None
                           190     ;
                           191     ;Known Bugs:         None
                           192     ;
                           193     ;Limitations:        None
                           194     ;
                           195     ;Author:             Timothy Liu
                           196     ;
                           197     ;Last Modified       5/19/16
                           198     
0000                       199     AudioEH        PROC    NEAR
                           200                    PUBLIC  AudioEH
                           201     
0000                       202     AudioEHStart:                            ;save the registers
0000 50                    203         PUSH    AX
0001 53                    204         PUSH    BX
0002 52                    205         PUSH    DX
0003 E80400                206         CALL    AudioOutput                  ;call function to output audio data
                           207     
0006                       208     AudioEHDone:                             ;restore registers and return
0006 5A                    209         POP     DX
0007 5B                    210         POP     BX
0008 58                    211         POP     AX
                           212         
0009 CF                    213         IRET                                 ;IRET from interrupt handlers
                           214     
                           215     AudioEH        ENDP
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     
                           217     
                           218     ;Name:               AudioOutput
                           219     ;
                           220     ;Description:        None
                           221     ; 
                           222     ;Operation:          None
                           223     ;
                           224     ;Arguments:          None
                           225     ;
                           226     ;Return Values:      None
                           227     ;
                           228     ;Local Variables:    None
                           229     ;
                           230     ;Shared Variables:   None
                           231     ;
                           232     ;Output:             None
                           233     ;
                           234     ;Error Handling:     None
                           235     ;
                           236     ;Algorithms:         None
                           237     ;
                           238     ;Registers Used:     None
                           239     ;
                           240     ;Known Bugs:         None
                           241     ;
                           242     ;Limitations:        None
                           243     ;
                           244     ;Author:             Timothy Liu
                           245     
                           246     
                           247     
000A                       248     AudioOutput        PROC    NEAR
                           249                        PUBLIC  AudioOutput
                           250     
000A                       251     AudioOutputStart:
                           252     
000A                       253     AudioOutputDone:                             ;stub function for now 
000A C3                    254          RET
                           255     
                           256     AudioOutput    ENDP
                           257     
                           258     
                           259     ;Name:               Audio_Play(unsigned short int far *, int)
                           260     ;
                           261     ;Description:        This function is called when the audio output is 
                           262     ;                    started. This function is passed the address of the
                           263     ;                    data buffer. The address is stored in CurrentBuffer.
                           264     ;                    The function copies the second argument, the length
                           265     ;                    of the buffer in words, to the shared variable
                           266     ;                    CurBuffLeft. The function then activates ICON0 to enable
                           267     ;                    data request interrupts. 
                           268     ; 
                           269     ;Operation:          The function first copies the stack pointer to BP and 
                           270     ;                    indexes into the stack. The function copies the 32 bit 
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;                    address passed as the first argument to CurrentBuffer.
                           272     ;                    The function indexes into the stack to copy the second
                           273     ;                    argument into CurBuffLeft, which is the number of words
                           274     ;                    left in the buffer to play. The function then outputs
                           275     ;                    ICON0ON to ICON0Address to enable data request
                           276     ;                    interrupts. The function also sends an INT0EOI to the
                           277     ;                    EOI register and returns.
                           278     ;
                           279     ;Arguments:          unsigned short int far * - address of data buffer
                           280     ;                    int - length of buffer in words
                           281     ;
                           282     ;Return Values:      None
                           283     ;
                           284     ;Local Variables:    None
                           285     ;
                           286     ;Shared Variables:   CurrentBuffer(W) - 16 bit address of current data buffer
                           287     ;                                       being played from
                           288     ;                    CurBuffLeft(W) -   number of words left in the data buffer
                           289     ;
                           290     ;Output:             None
                           291     ;
                           292     ;Error Handling:     None
                           293     ;
                           294     ;Algorithms:         None
                           295     ;
                           296     ;Registers Used:     None
                           297     ;
                           298     ;Known Bugs:         None
                           299     ;
                           300     ;Limitations:        None
                           301     ;
                           302     ;Author:             Timothy Liu
                           303     
                           304     
                           305     ;  #######Audio_Play CODE ########
                           306     
                           307     
                           308     ;Name:               Audio_Halt
                           309     ;
                           310     ;Description:        This function terminates the output of audio data. The 
                           311     ;                    function does not return any value.
                           312     ; 
                           313     ;Operation:          The function writes the value ICON0OFF to ICON0ADDRESS.
                           314     ;                    This disables interrupts from INT0 and disables MP3
                           315     ;                    audio data request interrupts. The function the returns.
                           316     ;
                           317     ;Arguments:          None
                           318     ;
                           319     ;Return Values:      None
                           320     ;
                           321     ;Local Variables:    None
                           322     ;
                           323     ;Shared Variables:   None
                           324     ;
                           325     ;Output:             None
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;
                           327     ;Error Handling:     None
                           328     ;
                           329     ;Algorithms:         None
                           330     ;
                           331     ;Registers Used:     None
                           332     ;
                           333     ;Known Bugs:         None
                           334     ;
                           335     ;Limitations:        None
                           336     ;
                           337     ;Author:             Timothy Liu
                           338     
000B                       339     Audio_Halt        PROC    NEAR
                           340                       PUBLIC  Audio_Halt
                           341     
000B                       342     AudioHaltStart:                        ;starting label - save registers
000B 50                    343         PUSH    AX
000C 52                    344         PUSH    DX
                           345     
000D                       346     AudioHaltWrite:                        ;turn off data request interrupts
000D BA38FF                347         MOV    DX, ICON0Address            ;address of INT0 control register
0010 B81B00                348         MOV    AX, ICON0OFF                ;value to turn off data request IRQ
0013 EF                    349         OUT    DX, AX                      ;shut off interrupts
                           350     
0014                       351     AudioHaltDone:                         ;done - restore labels and return
0014 5A                    352         POP    DX
0015 58                    353         POP    AX
0016 C3                    354         RET
                           355     
                           356     
                           357     Audio_Halt    ENDP
                           358     
                           359     ;Name:               Update
                           360     ;
                           361     ;Description:        This function stores the address of a fresh audio buffer
                           362     ;                    if the secondary audio buffer is empty. The function
                           363     ;                    returns TRUE if the passed buffer was stored and a new
                           364     ;                    buffer with more audio data is needed. The function
                           365     ;                    returns FALSE if more audio data is not needed. The
                           366     ;                    function is passed the address of the new buffer, and the
                           367     ;                    length of the new buffer. If the new audio buffer is
                           368     ;                    stored, then the length of the new audio buffer is 
                           369     ;                    stored in NextBufferLeft.
                           370     ; 
                           371     ;Operation:          The function copies SP to BP and uses the base pointer
                           372     ;                    to index into the stack. The checks the flag NeedData
                           373     ;                    to see if more data is needed. If more data is needed, 
                           374     ;                    then the function copies the first argument (the address
                           375     ;                    of the new buffer) into NextBuffer and the second argument
                           376     ;                    (the length of the new buffer in bytes) into 
                           377     ;                    NextBufferLeft. The function resets the NeedData flag
                           378     ;                    to FALSE, indicating that there is data in both buffers.
                           379     ;                    If the passed pointer is used, then the function returns
                           380     ;                    FALSE. If more data is not needed, then the function
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    02:07:36  05/20/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;                    does nothing but return FALSE.
                           382     ;
                           383     ;Arguments:          unsigned short int far* - address of new audio buffer
                           384     ;                    int - length of the new buffer in words
                           385     ;
                           386     ;Return Values:      TRUE if more data was needed; FALSE otherwise
                           387     ;
                           388     ;Local Variables:    None
                           389     ;
                           390     ;Shared Variables:   NextBuffer(W) - pointer to second data buffer
                           391     ;                    NextBufferLen(W) - length of the passed data buffer
                           392     ;                    NeedData(R/W) - indicates if more data is needed
                           393     ;
                           394     ;Output:             None
                           395     ;
                           396     ;Error Handling:     None
                           397     ;
                           398     ;Algorithms:         None
                           399     ;
                           400     ;Registers Used:     None
                           401     ;
                           402     ;Known Bugs:         None
                           403     ;
                           404     ;Limitations:        None
                           405     ;
                           406     ;Author:             Timothy Liu
                           407     
                           408     
                           409     ;####### UPDATE CODE ###########
                           410     
----                       411     CODE ENDS
                           412     
                           413     ;start data segment
                           414     
                           415     
----                       416     DATA    SEGMENT    PUBLIC  'DATA'
                           417     
0000 (2                    418     CurrentBuffer    DW FAR_SIZE DUP (?)     ;32 bit address of current audio buffer
     ????
     )
0004 (2                    419     NextBuffer       DW FAR_SIZE DUP (?)     ;32 bit address of next audio buffer
     ????
     )
0008 ????                  420     CurBuffLeft      DW               ?      ;words left in current buffer
000A ????                  421     NextBufferLeft   DW               ?      ;words left in next buffer
000C ??                    422     NeedData         DB               ?      ;flag set when CurrentBuffer is empty
                           423                                              ;and more data is needed
                           424     
----                       425     DATA ENDS
                           426     
                           427             END

ASSEMBLY COMPLETE, NO ERRORS FOUND
