8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE AUDIO
OBJECT MODULE PLACED IN AUDIO.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE AUDIO.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    AUDIO
                             2     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3     ;                                                                            ;
                             4     ;                                  AUDIO Code                                ;
                             5     ;                           Audio Related Functions                          ;
                             6     ;                                   EE/CS 52                                 ;
                             7     ;                                                                            ;
                             8     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9     
                            10     ; Description: This file contains the functions relating to the audio
                            11     ;              output.
                            12     
                            13     ; Table of Contents
                            14     ;
                            15     ;    AudioIRQOn   -turns on INT0 audio data request interrupts
                            16     ;    AudioEH      -event handler for audio data request interrupts
                            17     ;    AudioOutput  -outputs audio data to the MP3 decoder
                            18     ;    Audio_Play   -sets up shared variables for outputting audio
                            19     ;    Audio_Halt   -stops audio play by turning off ICON0 interrupts
                            20     ;    Update       -returns if NextBuffer is empty
                            21     
                            22     
                            23     ; Revision History:
                            24     ;
                            25     ;    5/18/16    Tim Liu    created file
                            26     ;    5/20/16    Tim Liu    wrote outlines for all functions
                            27     ;    5/20/16    Tim Liu    wrote Audio_Halt and AudioEH
                            28     ;    5/21/16    Tim Liu    wrote AudioOutput
                            29     ;    5/21/16    Tim Liu    wrote Audio_Play
                            30     ;    5/21/16    Tim Liu    wrote AudioIRQOn
                            31     ;    5/21/16    Tim Liu    wrote Update
                            32     ;    5/29/16    Tim Liu    added EOI to audio event handler
                            33     ;    5/30/16    Tim Liu    bug fixes found in Audio Stub
                            34     ;    5/30/16    Tim Liu    changed buffer indices from [1] to [2]
                            35     ;                          to accommodate copying words
                            36     ;    5/30/16    Tim Liu    in AudioOutput, changed INC SI to add
                            37     ;                          1 to SI so that carry flag is set
                            38     ;    5/30/16    Tim Liu    in AudioOutput, changed outputting AX
                            39     ;                          to outputting AL
                            40     ;    5/30/16    Tim Liu    NextBuffLeft set to 0 after swapping buffers
                            41     ;    6/1/16     Tim Liu    Changed AudioOutput to no longer assume
                            42     ;                          anything about passed buffer lengths
                            43     ;    6/2/16     Tim Liu    Fixed critical code bug in Update
                            44     ;    6/2/16     Tim Liu    ChangedAudioIRQOn to turn off interrupts during
                            45     ;                          function call
                            46     ;
                            47     ; local include files
                            48 +1  $INCLUDE(AUDIO.INC)
                      =1    49     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    50     ;                                                                            ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;                                  AUDIO.INC                                 ;
                      =1    52     ;                             Audio Include File                             ;
                      =1    53     ;                                   EE/CS 52                                 ;
                      =1    54     ;                                                                            ;
                      =1    55     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    56     ;
                      =1    57     ; Description: This file contains the definitions for audio.asm
                      =1    58     
  0020                =1    59     Bytes_Per_Transfer        EQU    32      ;can send 32 bytes each DREQ interrupt
                      =1    60                                              ;the number of bytes per data buffer
                      =1    61                                              ;MUST be a multiple of this constant
                      =1    62     
  0100                =1    63     PCS2Address               EQU    100H    ;address to output DB0-6 of MP3 data
  0180                =1    64     PCS3Address               EQU    180H    ;address to output DB7 of MP3 data
                      =1    65                                              ;DB7 is output first, and PCS3
                      =1    66                                              ;triggers the BSYNC signal
                            67 +1  $INCLUDE(MIRQ.INC)
                      =1    68     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    69     ;                                                                            ;
                      =1    70     ;                                   MIRQ.INC                                 ;
                      =1    71     ;                          MP3 Interrupt Include File                        ;
                      =1    72     ;                                   EE/CS 52                                 ;
                      =1    73     ;                                                                            ;
                      =1    74     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    75     
                      =1    76     ; This file contains the definitions for initcs.asm.
                      =1    77     ;
                      =1    78     ; Revision History:
                      =1    79     ;    4/4/16     Timothy Liu     created file and wrote definitions w/o values
                      =1    80     ;    5/19/16    Timothy Liu     added INT0 interrupt definition
                      =1    81     
                      =1    82     
                      =1    83     ;Interrupt Vector Table
  0001                =1    84     FIRST_RESERVED_VEC           EQU        1       ;reserve vectors 1-3
  0003                =1    85     LAST_RESERVED_VEC            EQU          3
  0100                =1    86     NUM_IRQ_VECTORS              EQU      256    ;number of interrupt vectors
  0004                =1    87     INTERRUPT_SIZE               EQU        4    ;each vector is 4 addresses large
                      =1    88     
                      =1    89     ;Addresses
  FF22                =1    90     INTCtrlrEOI     EQU     0FF22H          ;address of interrupt controller EOI register
  FF32                =1    91     INTCtrlrCtrl    EQU     0FF32H          ;address of interrupt controller for timer
                      =1    92     
  FF38                =1    93     ICON0Address    EQU     0FF38H           ;address of ICON0 register
                      =1    94     ;ICON1Address                            ;address of ICON1 register
                      =1    95     
                      =1    96     ; Register Values
  0001                =1    97     INTCtrlrCVal    EQU     00001H          ;set priority for timers to 1 and enable
                      =1    98                                             ;000000000000----  reserved
                      =1    99                                             ;------------0---  enable timer interrupt
                      =1   100                                             ;-------------001  timer priority
                      =1   101     
  0013                =1   102     ICON0ON        EQU      0013H           ;0000000000010011b
                      =1   103                                             ;000000000-------b  ;reserved
                      =1   104                                             ;---------0------b  ;no nesting
                      =1   105                                             ;----------0-----b  ;no cascade mode
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106                                             ;-----------1----b  ;level triggered
                      =1   107                                             ;------------0---b  ;enable interrupts
                      =1   108                                             ;--------------11b  ;set priority to 3
                      =1   109     
  001B                =1   110     ICON0OFF        EQU      001BH          ;0000000000011011b
                      =1   111                                             ;000000000-------b  ;reserved
                      =1   112                                             ;---------0------b  ;no nesting
                      =1   113                                             ;----------0-----b  ;no cascade mode
                      =1   114                                             ;-----------1----b  ;level triggered
                      =1   115                                             ;------------1---b  ;disable interrupts
                      =1   116                                             ;--------------11b  ;set priority to 3
                      =1   117     
                      =1   118     ; End of Interrupt values
  8000                =1   119     NonSpecEOI      EQU     08000H          ;Non-specific EOI command
  0008                =1   120     TimerEOI        EQU     00008H          ;Timer EOI command (same for all timers)
  000C                =1   121     INT0EOI         EQU     0000CH          ;INT0 EOI
                      =1   122     ;INT1EOI
                      =1   123     
                      =1   124     ; Interrupt Vector
  0008                =1   125     Tmr0Vec         EQU     8               ;interrupt vector for Timer 0
  0012                =1   126     Tmr1Vec         EQU     18              ;interrupt vector for Timer 1
  000C                =1   127     INT0Vec         EQU     12              ;interrupt vector for INT0
                      =1   128     ;INT1VEc
                           129 +1  $INCLUDE(GENERAL.INC)
                      =1   130     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   131     ;                                                                            ;
                      =1   132     ;                                  General.INC                               ;
                      =1   133     ;                               General include file                         ;
                      =1   134     ;                                   EE/CS 51                                 ;
                      =1   135     ;                                                                            ;
                      =1   136     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   137     
                      =1   138     ; This file contains general definitions and constants.
                      =1   139     ;
                      =1   140     ; Revision History:
                      =1   141     ;    11/3/15     Timothy Liu     initial revision
                      =1   142     ;    11/5/15     Timothy Liu     fixed formatting
                      =1   143     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
                      =1   144     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1   145     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1   146     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1   147     
                      =1   148     
                      =1   149     
  0004                =1   150     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1   151     
  0002                =1   152     OffSize              EQU        2         ;offset size in bytes
                      =1   153     
                      =1   154     ;Ascii definitions
  000D                =1   155     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1   156     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1   157     ASCII_E              EQU       69         ;ASCII E
  0046                =1   158     ASCII_F              EQU       70         ;F character for fire (laser on)
  0049                =1   159     ASCII_I              EQU       73         ;I character
  004C                =1   160     ASCII_L              EQU       76         ;L character
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

  004F                =1   161     ASCII_O              EQU       79         ;O character for off (laser off)
  0050                =1   162     ASCII_P              EQU       80         ;P character
  0052                =1   163     ASCII_R              EQU       82         ;R character
  0053                =1   164     ASCII_S              EQU       83         ;S character
  0054                =1   165     ASCII_T              EQU       84         ;T character
  0000                =1   166     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1   167     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1   168     ASCII_COLON          EQU       58         ;ASCII colon
  003E                =1   169     ASCII_RArrow         EQU       62         ;ASCII > symbol
                      =1   170     
  0001                =1   171     TRUE                 EQU        1         ;true
  0000                =1   172     FALSE                EQU        0         ;false
                      =1   173     
  0002                =1   174     WORD_SIZE            EQU        2         ;2 bytes per word
  0002                =1   175     FAR_SIZE             EQU        2         ;2 words per far address
  1000                =1   176     Segment_Overlap      EQU    1000H         ;number of unique ways to map physical
                      =1   177                                               ;address
                           178     
                           179     CGROUP    GROUP    CODE
                           180     DGROUP    GROUP    DATA
                           181     
                           182     
                           183     
----                       184     CODE SEGMENT PUBLIC 'CODE'
                           185     
                           186             ASSUME  CS:CGROUP, DS:DGROUP 
                           187     
                           188     ;external function declarations
                           189     
                           190     ;Name:               AudioIRQOn
                           191     ;
                           192     ;Description:        This function enables data request interrupts from the
                           193     ;                    MP3 decoder. The function writes ICON0ON to ICON0Address.
                           194     ;                    The function also sends an EOI to clear out the interrupt
                           195     ;                    handler.
                           196     ; 
                           197     ;Operation:          The function copies ICON0ON to AX and copies ICON0Address
                           198     ;                    to DX. The function then outputs the address to the
                           199     ;                    peripheral control block. The function then outputs
                           200     ;                    INT0EOI to INTCtrlrEOI to clear the interrupt controller.
                           201     ;
                           202     ;Arguments:          None
                           203     ;
                           204     ;Return Values:      None
                           205     ;
                           206     ;Local Variables:    None
                           207     ;
                           208     ;Shared Variables:   None
                           209     ;
                           210     ;Output:             None
                           211     ;
                           212     ;Error Handling:     None
                           213     ;
                           214     ;Algorithms:         None
                           215     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     ;Registers Used:     None
                           217     ;
                           218     ;Known Bugs:         None
                           219     ;
                           220     ;Limitations:        None
                           221     ;
                           222     ;Author:             Timothy Liu
                           223     ;
                           224     ;Last Modified       6/2/16
                           225     
0000                       226     AudioIRQOn            PROC    NEAR
                           227                           PUBLIC  AudioIRQOn
                           228     
0000                       229     AudioIRQOnStart:                          ;save registers
0000 50                    230         PUSH    AX
0001 52                    231         PUSH    DX
0002 9C                    232         PUSHF                                 ;save flag register
0003 FA                    233         CLI                                   ;shut off interrupts
                           234     
0004                       235     AudioIRQOnOutput:                         ;turn on INT0 data request interrupts
                           236                                               ;and send an EOI
0004 BA38FF                237         MOV     DX, ICON0Address              ;address of INT0 interrupt controller
0007 B81300                238         MOV     AX, ICON0On                   ;value to start int 0 interrupts
000A EF                    239         OUT     DX, AX
                           240                                               ;clear out EOI register
000B BA22FF                241         MOV     DX, INTCtrlrEOI               ;address of interrupt EOI register
000E B80C00                242         MOV     AX, INT0EOI                   ;INT0 end of interrupt
0011 EF                    243         OUT     DX, AX                        ;output to peripheral control block
                           244     
0012                       245     AudioIRQOnDone:                           ;restore registers and return
0012 9D                    246         POPF                                  ;restore the flag register
0013 5A                    247         POP     DX
0014 58                    248         POP     AX
0015 C3                    249         RET
                           250     
                           251     
                           252     
                           253     AudioIRQOn        ENDP
                           254     
                           255     
                           256     
                           257     ;Name:               AudioEH
                           258     ;
                           259     ;Description:        This function handles audio data request interrupts.
                           260     ;                    The function is called whenever the VS1011 MP3
                           261     ;                    decoder needs more data.
                           262     ; 
                           263     ;Operation:          The function first saves the registers that will be
                           264     ;                    modified by AudioOutput. The function calls AudioOutput,
                           265     ;                    which checks if the data buffers have data and serially
                           266     ;                    outputs data to the MP3 decoder. The function then
                           267     ;                    sends an INT0 EOI and restores the registers and IRET.
                           268     ;
                           269     ;Arguments:          None
                           270     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;Return Values:      None
                           272     ;
                           273     ;Local Variables:    None
                           274     ;
                           275     ;Shared Variables:   None
                           276     ;
                           277     ;Output:             None
                           278     ;
                           279     ;Error Handling:     None
                           280     ;
                           281     ;Algorithms:         None
                           282     ;
                           283     ;Registers Used:     None
                           284     ;
                           285     ;Known Bugs:         None
                           286     ;
                           287     ;Limitations:        None
                           288     ;
                           289     ;Author:             Timothy Liu
                           290     ;
                           291     ;Last Modified       5/30/16
                           292     
0016                       293     AudioEH        PROC    NEAR
                           294                    PUBLIC  AudioEH
                           295     
0016                       296     AudioEHStart:                            ;save the registers
0016 50                    297         PUSH    AX
0017 51                    298         PUSH    CX
0018 52                    299         PUSH    DX
0019 E80B00                300         CALL    AudioOutput                  ;call function to output audio data
                           301     
001C                       302     AudioEHSendEOI:
001C BA22FF                303         MOV     DX, INTCtrlrEOI               ;address of interrupt EOI register
001F B80C00                304         MOV     AX, INT0EOI                   ;INT0 end of interrupt
0022 EF                    305         OUT     DX, AX                        ;output to peripheral control block
                           306         
                           307     
0023                       308     AudioEHDone:                              ;restore registers and return
0023 5A                    309         POP     DX
0024 59                    310         POP     CX
0025 58                    311         POP     AX
                           312         
0026 CF                    313         IRET                                 ;IRET from interrupt handlers
                           314     
                           315     AudioEH        ENDP
                           316     
                           317     
                           318     ;Name:               AudioOutput
                           319     ;
                           320     ;Description:        This function sends data serially to the MP3 decoder.
                           321     ;                    The function copies bytes from CurrentBuffer and performs
                           322     ;                    bit banging to output the bytes. The function transfers
                           323     ;                    Bytes_Per_Transfer each time the function is called. If
                           324     ;                    CurBuffLeft is equal to zero, then the function swaps
                           325     ;                    the NextBuffer into CurrentBuffer and continues playing
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     ;                    from CurrentBuffer. The function also sets the NeedData
                           327     ;                    flag to indicate that more data is need so that
                           328     ;                    NextBuffer is filled. The function is called whenever
                           329     ;                    the MP3 decoder sends a data request interrupt.
                           330     ;                    If both the current buffer and next buffer are empty, the
                           331     ;                    function calls Audio_Halt to shut off data request interrupts.
                           332     ;                    Interrupts are not restored until more data is provided.
                           333     ; 
                           334     ;Operation:          The function first checks if CurBuffLeft is equal to
                           335     ;                    to zero, indicating the current buffer is empty.
                           336     ;                    If the current data buffer is empty, the function
                           337     ;                    makes the next buffer the current buffer and sets
                           338     ;                    NeedData to indicate that a new buffer is needed. If
                           339     ;                    the next buffer is also empty, then the function 
                           340     ;                    calls Audio_Halt to turns off ICON0 interrupts and returns.
                           341     ;                    If there is data in the current buffer, then the
                           342     ;                    function outputs BytesPerTransfer bytes starting at
                           343     ;                    CurrentBuffer. The address pointed to by CurrentBuffer 
                           344     ;                    is copied to ES:SI. AudioOutput copies the byte ES:SI
                           345     ;                    points to to AL and outputs the bits serially.  The MSB
                           346     ;                    is output to PCS3. After the first bit is output, the
                           347     ;                    other bits are shifted to DB0 and output to PCS2
                           348     ;                    until the byte is fully output. The function increments
                           349     ;                    SI after each byte transfer and outputs BytesPerTransfer
                           350     ;                    bytes. After the bytes are output, the function
                           351     ;                    decrements CurBuffLeft by BytesPerTransfer. The function
                           352     ;                    copies SI to CurrentBuffer[0] to update the offset of
                           353     ;                    the buffer. The function copies ES to CurrentBuffer[2] to
                           354     ;                    update the segment. CurrentBuffer always points to the next byte
                           355     ;                    to output The size of the passed buffers MUST be
                           356     ;                    a multiple of BytesPerTransfer. 
                           357     ;                    
                           358     ;
                           359     ;Arguments:          None
                           360     ;
                           361     ;Return Values:      None
                           362     ;
                           363     ;Local Variables:    CX - Bytes left to transfer
                           364     ;                    SI - offset of current buffer pointer
                           365     ;                    ES - segment of current buffer pointer
                           366     ;
                           367     ;Shared Variables:   CurrentBuffer(R/W) - 32 bit address of current data buffer
                           368     ;                                         being played from
                           369     ;                    CurBuffLeft(R/W)   - bytes left in the data buffer
                           370     ;                    NextBuffer(R)      - 32 bit address of next data buffer
                           371     ;                    NextBuffLeft(R)    - bytes left in next data buffer
                           372     ;                    NeedData(R/W)      - indicates more data is needed 
                           373     ;
                           374     ;Output:             MP3 audio output data output to MP3 decoder through
                           375     ;                    DB0
                           376     ;
                           377     ;Error Handling:     None
                           378     ;
                           379     ;Algorithms:         None
                           380     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;Registers Used:     AX, CX - these registers are preserved by event handler
                           382     ;                    Flag register
                           383     ;
                           384     ;Known Bugs:         None
                           385     ;
                           386     ;Limitations:        None
                           387     ;
                           388     ;Author:             Timothy Liu
                           389     ;
                           390     ;Last Modified       5/30/16
                           391     
                           392     
                           393     ;Outline
                           394     ;AudioOutput()
                           395     ;    IF    CurBuffLeft = 0:          ;Current buffer going to run out
                           396     ;        IF NeedData == True:        ;both buffers are empty - panic!
                           397     ;            ICON0 = ICON0Off        ;shut off the interrupt handler
                           398     ;            CALL AudioHalt          ;these two are the same things
                           399     ;        CurrentBuffer = NextBuffer  ;make the next buffer the current buffer
                           400     ;        CurBufferLeft = NextBuffLeft
                           401     ;        NeedData = TRUE             ;indicate more data is needed
                           402     ;    ELSE:                           ;there is enough data
                           403     ;        For i in BytesPerTransfer   ;loop outputting 32 bytes
                           404     ;            AL = [CurrentBuffer]    ;load byte to output
                           405     ;            SHL                         ;put most significant byte in DB0
                           406     ;            OUT AL, PCS3                ;first bit goes to PCS3
                           407     ;            For j in LowBits            ;loop outputting other 7 bits
                           408     ;                                        ;loop will be unrolled for speed
                           409     ;                SHL                     ;shift to next bit
                           410     ;                OUT AL, PCS2            ;output the next bit
                           411     ;            [CurrentBuffer] += 1           ;increment to next byte
                           412     ;        CurBufferLeft -= BytesPerTransfer ;32 fewer bytes in buffer
                           413             
                           414     
                           415     
0027                       416     AudioOutput        PROC    NEAR
                           417                        PUBLIC  AudioOutput
                           418     
0027                       419     AudioOutputStart:                            ;starting label - save registers
0027 56                    420         PUSH    SI
0028 06                    421         PUSH    ES
                           422     
0029                       423     AudioOutputCheckCur:                         ;check if current buffer is empty
0029 833E080000     R      424         CMP    CurBuffLeft, 0                    ;check no bytes left in buffer
002E 7403                  425         JE     AudioOutputCheckNext              ;go check if next buffer empty
0030 EB2F90                426         JMP    AudioOutputByteLoopPrep           ;Current buffer not empty - 
                           427                                                  ;output data
                           428     
0033                       429     AudioOutputCheckNext:
0033 803E0C0001     R      430         CMP    NeedData, TRUE                    ;see if next buffer is empty
0038 7421                  431         JE     AudioOutputEmpty                  ;both buffers are empty
                           432         ;JMP    AudioOutputSwap                  ;make NextBuffer -> CurrentBuffer
                           433     
003A                       434     AudioOutputSwap:                             ;read from NextBuffer
003A A10400         R      435        MOV    AX, NextBuffer[0]                  ;copy segment of NextBuffer
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

003D A30000         R      436        MOV    CurrentBuffer[0], AX               ;make NextBuffer CurrentBuffer
                           437     
0040 A10600         R      438        MOV    AX, NextBuffer[2]                  ;copy offset of NextBuffer
0043 A30200         R      439        MOV    CurrentBuffer[2], AX
                           440     
0046 A10A00         R      441        MOV    AX, NextBuffLeft                   ;copy bytes left of NextBuffer
0049 A30800         R      442        MOV    CurBuffLeft, AX                    ;to CurBuffLeft
                           443     
004C C6060C000190   R      444        MOV    NeedData, TRUE                     ;indicate more data is needed
0052 C7060A000000   R      445        MOV    NextBuffLeft, 0                    ;the next buffer is now empty
0058 EB0790                446        JMP    AudioOutputByteLoopPrep            ;prepare to output data
                           447     
005B                       448     AudioOutputEmpty:                            ;both audio buffers are empty
005B E89000                449        CALL   Audio_Halt                         ;switch off audio interrupts
005E EB6190                450        JMP    AudioOutputDone                    ;canb^^t output any data
                           451     
0061                       452     AudioOutputByteLoopPrep:                     ;prepare to output buffer data
0061 8B0E0800       R      453         MOV   CX, CurBuffLeft                    ;number of bytes left in buffer
0065 83F920                454         CMP   CX, Bytes_Per_Transfer             ;see if less bytes than full transfer le
                                   ft
0068 7603                  455         JBE   AudioOutputAddress                 ;if fewer bytes than full transfer,
                           456                                                  ;go and output MP3 data
                           457     
006A                       458     AudioOutputFullT:
006A B92000                459         MOV   CX, Bytes_Per_Transfer             ;enough bytes for full transfer - 
                           460                                                  ;overwrite number of bytes left
                           461     
006D                       462     AudioOutputAddress:                          ;setup address to output from
                           463                                                  ;for this interrupt
006D A10200         R      464         MOV   AX, CurrentBuffer[2]               ;copy buffer segment to ES
0070 8EC0                  465         MOV   ES, AX
                           466     
0072 8B360000       R      467         MOV   SI, CurrentBuffer[0]               ;copy buffer offset to SI
                           468         ;JMP  AudioOutputLoop                    ;go to loop
                           469     
0076                       470     AudioOutputLoop:
0076 83F900                471         CMP   CX, 0                              ;check if no bytes left
0079 7430                  472         JE    AudioOutputUpdateShared            ;no bytes left to output
007B 268A04                473         MOV   AL, ES:[SI]                        ;copy byte to be transferred
                           474     
007E                       475     AudioOutputSerial:                           ;serially send data to MP3 - MSB
                           476                                                  ;first
007E BA8001                477         MOV   DX, PCS3Address                    ;address to output DB7 to
0081 D0C0                  478         ROL   AL, 1                              ;output MSB on DB0
0083 EE                    479         OUT   DX, AL                             ;first bit goes to PCS3 to trigger
                           480                                                  ;BSYNC
                           481     
0084 BA0001                482         MOV   DX, PCS2Address                    ;address to output bits 0-6
0087 D0C0                  483         ROL   AL, 1                              ;shift so DB6 is LSB
0089 EE                    484         OUT   DX, AL                             ;output other bits to PCS2
                           485         
008A D0C0                  486         ROL   AL, 1                              ;shift so DB5 is LSB
008C EE                    487         OUT   DX, AL                             ;output other bits to PCS2
                           488         
008D D0C0                  489         ROL   AL, 1                              ;shift so DB4 is LSB
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

008F EE                    490         OUT   DX, AL                             ;output other bits to PCS2
                           491         
0090 D0C0                  492         ROL   AL, 1                              ;shift so DB3 is LSB
0092 EE                    493         OUT   DX, AL                             ;output other bits to PCS2
                           494         
0093 D0C0                  495         ROL   AL, 1                              ;shift so DB2 is LSB
0095 EE                    496         OUT   DX, AL                             ;output other bits to PCS2
                           497         
0096 D0C0                  498         ROL   AL, 1                              ;shift so DB1 is LSB
0098 EE                    499         OUT   DX, AL                             ;output other bits to PCS2
                           500         
0099 D0C0                  501         ROL   AL, 1                              ;shift so DB0 is LSB
009B EE                    502         OUT   DX, AL                             ;output other bits to PCS2
                           503     
009C                       504     AudioOutputUpdateByte:
009C 49                    505         DEC   CX                                 ;one fewer byte left to transfer
009D 83C601                506         ADD   SI, 1                              ;update pointer to next byte
00A0 73D4                  507         JNC   AudioOutputLoop                    ;SI didnb^^t overflow - same segment
                           508                                                  ;go back to loop
                           509         ;JMP  AudioOutputUpdateSegment           ;SI overflowed - update the segment
                           510     
00A2                       511     AudioOutputUpdateSegment:
00A2 8CC0                  512         MOV   AX, ES                             ;use accumulator to perform addition
00A4 050010                513         ADD   AX, Segment_Overlap                ;change segment so ES:SI points to
                           514                                                  ;next physical address
00A7 8EC0                  515         MOV   ES, AX                             ;write new segment back to ES
00A9 EBCB                  516         JMP   AudioOutputLoop                    ;go back to loop
                           517     
00AB                       518     AudioOutputUpdateShared:                     ;update shared variables
00AB 89360000       R      519         MOV    CurrentBuffer[0], SI              ;store the buffer location to 
                           520                                                  ;start reading from
00AF 8CC0                  521         MOV    AX, ES                            ;store the updated buffer segment
00B1 A30200         R      522         MOV    CurrentBuffer[2], AX
00B4 832E080020     R      523         SUB    CurBuffLeft, Bytes_Per_Transfer   ;update number of bytes left in
                           524                                                  ;the buffer
00B9 7306                  525         JNC    AudioOutputDone                   ;more than Bytes_Per_Transfer bytes
                           526                                                  ;left in current buffer
00BB C70608000000   R      527         MOV    CurBuffLeft, 0                    ;fewer than Bytes_Per_Transfer
                           528                                                  ;bytes left - CurBuff empty
                           529     
00C1                       530     AudioOutputDone:                             ;function finished
00C1 07                    531         POP    ES
00C2 5E                    532         POP    SI
00C3 C3                    533         RET
                           534     
                           535     AudioOutput    ENDP
                           536     
                           537     
                           538     ;Name:               Audio_Play(unsigned short int far *, int)
                           539     ;
                           540     ;Description:        This function is called when the audio output is 
                           541     ;                    started. This function is passed the address of the
                           542     ;                    data buffer. The address is stored in CurrentBuffer.
                           543     ;                    The function multiplies the second argument, the length
                           544     ;                    of the buffer in words, by WORD_SIZE and moves the 
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

                           545     ;                    product to the shared variable
                           546     ;                    CurBuffLeft. The function then calls AudioIRQON enable
                           547     ;                    data request interrupts. Finally, the function indicates
                           548     ;                    that the next buffer is empty and more data is needed.
                           549     ; 
                           550     ;Operation:          The function first copies the stack pointer to BP and 
                           551     ;                    indexes into the stack. The function copies the 32 bit 
                           552     ;                    address passed as the first argument to CurrentBuffer.
                           553     ;                    The function indexes into the stack to copy the second
                           554     ;                    argument into CurBuffLeft, which is the number of words
                           555     ;                    left in the buffer to play. The function then calls
                           556     ;                    AudioIRQON to enable data request
                           557     ;                    interrupts. The function writes TRUE to NeedData to indicate
                           558     ;                    that the next buffer is empty.
                           559     ;
                           560     ;Arguments:          unsigned short int far * - address of data buffer
                           561     ;                    int - length of buffer in words
                           562     ;
                           563     ;Return Values:      None
                           564     ;
                           565     ;Local Variables:    None
                           566     ;
                           567     ;Shared Variables:   CurrentBuffer(W) - 16 bit address of current data buffer
                           568     ;                                       being played from
                           569     ;                    CurBuffLeft(W) -   number of words left in the data buffer
                           570     ;
                           571     ;Output:             None
                           572     ;
                           573     ;Error Handling:     None
                           574     ;
                           575     ;Algorithms:         None
                           576     ;
                           577     ;Registers Used:     None
                           578     ;
                           579     ;Known Bugs:         None
                           580     ;
                           581     ;Limitations:        None
                           582     ;
                           583     ;Author:             Timothy Liu
                           584     ;
                           585     ;Last Modified       5/30/16
                           586     
00C4                       587     Audio_Play        PROC    NEAR
                           588                       PUBLIC  Audio_Play
                           589     
00C4                       590     AudioPlayStart:                          ;set up BP to index into stack
00C4 55                    591         PUSH    BP                           ;save base pointer
00C5 8BEC                  592         MOV     BP, SP                       ;base pointer used to index into stack
00C7 50                    593         PUSH    AX                           ;save register
                           594     
00C8                       595     AudioPlayArgs:                           ;pull the arguments from the stack
00C8 8B4604                596         MOV     AX, SS:[BP+4]                ;buffer offset
00CB A30000         R      597         MOV     CurrentBuffer[0], AX         ;write offset to CurrentBuffer
                           598     
00CE 8B4606                599         MOV     AX, SS:[BP+6]                ;buffer segment
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   12


LOC  OBJ                  LINE     SOURCE

00D1 A30200         R      600         MOV     CurrentBuffer[2], AX         ;write buffer segment to CurrentBuffer
                           601     
00D4 8B4608                602         MOV     AX, SS:[BP+8]                ;length of the buffer in words
00D7 D1E0                  603         SHL     AX, 1                        ;double to convert to number of bytes
00D9 A30800         R      604         MOV     CurBuffLeft, AX              ;load number of bytes left
                           605     
00DC                       606     AudioPlayNeedData:                       ;indicate that the next buffer is empty
00DC C7060A000000   R      607         MOV     NextBuffLeft, 0              ;next buffer is empty
00E2 C6060C000190   R      608         MOV     NeedData, TRUE               ;more data is needed
                           609     
00E8                       610     AudioPlayIRQON:
00E8 E815FF                611         CALL    AudioIRQOn                   ;turn audio data request interrupts on
                           612     
00EB                       613     AudioPlayDone:                           ;restores registers
00EB 58                    614         POP     AX
00EC 5D                    615         POP     BP
00ED C3                    616         RET
                           617         
                           618     
                           619     Audio_Play    ENDP
                           620     
                           621     
                           622     ;Name:               Audio_Halt
                           623     ;
                           624     ;Description:        This function terminates the output of audio data. The 
                           625     ;                    function does not return any value.
                           626     ; 
                           627     ;Operation:          The function writes the value ICON0OFF to ICON0ADDRESS.
                           628     ;                    This disables interrupts from INT0 and disables MP3
                           629     ;                    audio data request interrupts. The function then returns.
                           630     ;
                           631     ;Arguments:          None
                           632     ;
                           633     ;Return Values:      None
                           634     ;
                           635     ;Local Variables:    None
                           636     ;
                           637     ;Shared Variables:   None
                           638     ;
                           639     ;Output:             None
                           640     ;
                           641     ;Error Handling:     None
                           642     ;
                           643     ;Algorithms:         None
                           644     ;
                           645     ;Registers Used:     None
                           646     ;
                           647     ;Known Bugs:         None
                           648     ;
                           649     ;Limitations:        None
                           650     ;
                           651     ;Author:             Timothy Liu
                           652     ;
                           653     ;Last Modified       5/21/16
                           654     
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   13


LOC  OBJ                  LINE     SOURCE

00EE                       655     Audio_Halt        PROC    NEAR
                           656                       PUBLIC  Audio_Halt
                           657     
00EE                       658     AudioHaltStart:                        ;starting label - save registers
00EE 50                    659         PUSH    AX
00EF 52                    660         PUSH    DX
                           661     
00F0                       662     AudioHaltWrite:                        ;turn off data request interrupts
00F0 BA38FF                663         MOV    DX, ICON0Address            ;address of INT0 control register
00F3 B81B00                664         MOV    AX, ICON0OFF                ;value to turn off data request IRQ
00F6 EF                    665         OUT    DX, AX                      ;shut off interrupts
                           666     
00F7                       667     AudioHaltDone:                         ;done - restore labels and return
00F7 5A                    668         POP    DX
00F8 58                    669         POP    AX
00F9 C3                    670         RET
                           671     
                           672     
                           673     Audio_Halt    ENDP
                           674     
                           675     ;Name:               Update
                           676     ;
                           677     ;Description:        This function stores the address of a fresh audio buffer
                           678     ;                    if the secondary audio buffer is empty. The function
                           679     ;                    returns TRUE if the passed buffer was stored and a new
                           680     ;                    buffer with more audio data is needed. The function
                           681     ;                    returns FALSE if more audio data is not needed. The
                           682     ;                    function is passed the address of the new buffer, and the
                           683     ;                    length of the new buffer. If the new audio buffer is
                           684     ;                    stored, then the length of the new audio buffer is 
                           685     ;                    stored in NextBufferLeft.
                           686     ; 
                           687     ;Operation:          The function copies SP to BP and uses the base pointer
                           688     ;                    to index into the stack. The checks the flag NeedData
                           689     ;                    to see if more data is needed. If more data is needed,
                           690     ;                    then the function copies the first argument - the address
                           691     ;                    of the data buffer - into NextBuffer. Next, 
                           692     ;                    the function multiplies the second argument (the 
                           693     ;                    address of the new buffer) by WORD_SIZE and moves the
                           694     ;                    product into NextBufferLeft, which is the number of 
                           695     ;                    bytes remaining in NextBuffer. The function then resets
                           696     ;                    the NeedData flag to FALSE, indicating that
                           697     ;                    there is data in NextBuffer. If the passed pointer is
                           698     ;                    used, then the function returns TRUE. If more data is
                           699     ;                    not needed (NeedData was False) , then the function             
                                        
                           700     ;                    does nothing but return FALSE. The function calls
                           701     ;                    AudioIRQOn to turn on INT0 data request interrupts if the
                           702     ;                    new buffer was used.
                           703     ;
                           704     ;Arguments:          unsigned short int far* - address of new audio buffer
                           705     ;                    int - length of the new buffer in words
                           706     ;
                           707     ;Return Values:      TRUE if more data was needed; FALSE otherwise
                           708     ;
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   14


LOC  OBJ                  LINE     SOURCE

                           709     ;Local Variables:    None
                           710     ;
                           711     ;Shared Variables:   NextBuffer(W) - pointer to second data buffer
                           712     ;                    NextBufferLen(W) - length of the passed data buffer
                           713     ;                    NeedData(R/W) - indicates if more data is needed
                           714     ;
                           715     ;Output:             None
                           716     ;
                           717     ;Error Handling:     None
                           718     ;
                           719     ;Algorithms:         None
                           720     ;
                           721     ;Registers Used:     AX
                           722     ;
                           723     ;Known Bugs:         None
                           724     ;
                           725     ;Limitations:        None
                           726     ;
                           727     ;Author:             Timothy Liu
                           728     ;
                           729     ;Last Modified       5/30/16
                           730     
00FA                       731     Update            PROC    NEAR
                           732                       PUBLIC  Update
                           733     
00FA                       734     UpdateStart:                            ;prepare BP to index into stack
00FA 55                    735         PUSH    BP                          ;preserve BP
00FB 8BEC                  736         MOV     BP, SP                      ;use BP as stack index
                           737     
00FD                       738     UpdateCheckNeed:                        ;see if more data is needed
00FD 803E0C0000     R      739         CMP    NeedData, FALSE              ;
0102 7423                  740         JE     UpdateNoNeed                 ;next buffer filled - no data needed
                           741         ;JMP   UpdateNextEmpty              ;more data is needed
                           742     
0104                       743     UpdateNextEmpty:                        ;next buffer is empty
0104 8B4604                744         MOV    AX, SS:[BP+4]                ;offset of the new buffer
0107 A30400         R      745         MOV    NextBuffer[0], AX            ;load offset of the new buffer
                           746     
010A 8B4606                747         MOV    AX, SS:[BP+6]                ;segment of the new buffer
010D A30600         R      748         MOV    NextBuffer[2], AX            ;load the offset of the new buffer
                           749     
0110 8B4608                750         MOV    AX, SS:[BP+8]                ;length of the new buffer in words
0113 D1E0                  751         SHL    AX, 1                        ;double to get length of buffer in bytes
0115 A30A00         R      752         MOV    NextBuffLeft, AX             ;store the length in bytes
                           753     
0118 C6060C000090   R      754         MOV    NeedData, False              ;NextBuffer is filled - no need for data
011E E8DFFE                755         CALL   AudioIRQOn                   ;turn on data request interrupts
0121 B80100                756         MOV    AX, TRUE                     ;passed buffer was used
0124 EB0490                757         JMP    UpdateDone
                           758     
0127                       759     UpdateNoNeed:
0127 B80000                760         MOV    AX, FALSE                    ;not ready for more data
                           761     
012A                       762     UpdateDone:
012A 5D                    763         POP    BP
8086/87/88/186 MACRO ASSEMBLER    AUDIO                                                    17:17:25  06/02/;6  PAGE   15


LOC  OBJ                  LINE     SOURCE

012B C3                    764         RET
                           765     
                           766     
                           767     Update        ENDP
                           768     
----                       769     CODE ENDS
                           770     
                           771     ;start data segment
                           772     
                           773     
----                       774     DATA    SEGMENT    PUBLIC  'DATA'
                           775     
0000 (2                    776     CurrentBuffer    DW FAR_SIZE DUP (?)     ;32 bit address of current audio buffer
     ????
     )
0004 (2                    777     NextBuffer       DW FAR_SIZE DUP (?)     ;32 bit address of next audio buffer
     ????
     )
0008 ????                  778     CurBuffLeft      DW               ?      ;bytes left in current buffer
000A ????                  779     NextBuffLeft     DW               ?      ;bytes left in next buffer
                           780     
000C ??                    781     NeedData         DB               ?      ;flag set when NextBuffer is empty
                           782                                              ;and more data is needed
                           783     
----                       784     DATA ENDS
                           785     
                           786             END

ASSEMBLY COMPLETE, NO ERRORS FOUND
