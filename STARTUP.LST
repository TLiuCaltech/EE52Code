8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  02:04:00  04/28/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE STARTUP
OBJECT MODULE PLACED IN STARTUP.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE STARTUP.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1             NAME    STARTUP
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                   C0SMROM                                  ;
                             6     ;                               Startup Template                             ;
                             7     ;                    Intel C Small Memory Model, ROM Option                  ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This file contains a template for the startup code used when interfacing to
                            12     ; C code compiled with the Intel C compiler using the small memory model and
                            13     ; ROM option.  It assumes nothing about the system hardware, it's main purpose
                            14     ; is to setup the groups and segments correctly.  Note that most segments are
                            15     ; empty, they are present only for the GROUP definitions.  The actual startup
                            16     ; code for a system would include definitions for the global variables and all
                            17     ; of the system initialization.  Note that the CONST segment does not exist
                            18     ; for ROMmable code (it is automatically made part of the CODE segment by the
                            19     ; compiler).
                            20     ;
                            21     ;
                            22     ; Revision History:
                            23     ;    3/7/94   Glen George       Initial revision.
                            24     ;    2/28/95  Glen George       Fixed segment alignments.
                            25     ;                               Fixed SP initialization.
                            26     ;                               Removed CS:IP initialization (END Start -> END).
                            27     ;                               Updated comments.
                            28     ;    2/29/96  Glen George       Updated comments.
                            29     ;    2/24/98  Glen George       Updated comments.
                            30     ;   11/18/98  Glen George       Updated comments.
                            31     ;   12/26/99  Glen George       Changed formatting.
                            32     ;    1/30/02  Glen George       Added proper assume for ES.
                            33     ;    1/27/03  Glen George       Changed to looping if main() returns instead
                            34     ;                                  of halting
                            35     ;    4/19/16  Timothy Liu       Added initcs and created infinite loop
                            36     ;    4/19/16  Timothy Liu       Changed name to STARTUP
                            37     ;    4/19/16  Timothy Liu       Reordered assumes and group declarations
                            38     ;    4/19/16  Timothy Liu       Added START and END START CS:IP init
                            39     ;    4/20/16  Timothy Liu       Added write to LMCS before func calls
                            40     ;    4/21/16  Timothy Liu       Added calls to set up timer0 and buttons
                            41     ; local include files
                            42     
                            43 +1  $INCLUDE(INITREG.INC)
                      =1    44     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    45     ;                                                                            ;
                      =1    46     ;                                 initreg.INC                                ;
                      =1    47     ;                       Initialize Registers MP3 Include File                ;
                      =1    48     ;                                   EE/CS 52                                 ;
                      =1    49     ;                                                                            ;
                      =1    50     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  02:04:00  04/28/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     
                      =1    52     ; This file contains the definitions for initcs.asm.
                      =1    53     ;
                      =1    54     ; Revision History:
                      =1    55     ;    11/4/15     Timothy Liu     initial revision
                      =1    56     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    57     ;    11/17/15    Timothy Liu     changed to only have values for initcs.asm
                      =1    58     ;    4/4/16      Timothy Liu     changed name to InitCSM to signify file
                      =1    59     ;                                is for 80188 MP3 player
                      =1    60     ;    4/4/16      Timothy Liu     added MMCS, LMCs UMCS reg and val definitions
                      =1    61     ;                                but no values
                      =1    62     ;    4/5/16      Timothy Liu     NOTE: control reg vals/address not added yet
                      =1    63     ;    4/19/16     Timothy Liu     wrote register addresses and control reg vals
                      =1    64     
                      =1    65     
                      =1    66     ; Chip Select Unit Definitions
                      =1    67     
                      =1    68     ; Addresses
  FFA4                =1    69     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1    70     MPCSreg         EQU     0FFA8H          ;address of MPCS register
  FFA6                =1    71     MMCSreg         EQU     0FFA6H          ;address of MMCS register
  FFA2                =1    72     LMCSreg         EQU     0FFA2H          ;address of LMCS register
  FFA0                =1    73     UMCSreg         EQU     0FFA0H          ;address of UMCS register
                      =1    74     
                      =1    75     ; Control Register Values
  0003                =1    76     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1    77                                             ;0000000000------  starts at address 0
                      =1    78                                             ;----------000---  reserved
                      =1    79                                             ;-------------0--  wait for RDY inputs
                      =1    80                                             ;--------------11  3 wait states
  0883                =1    81     MPCSval         EQU     00883H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1    82                                             ;0---------000---  reserved
                      =1    83                                             ;-0001000--------  MCS is 64KB
                      =1    84                                             ;--------1-------  output PCS5/PCS6
                      =1    85                                             ;---------0------  PCS in I/O space
                      =1    86                                             ;-------------0--  wait for RDY inputs
                      =1    87                                             ;--------------11  3 wait states
                      =1    88     
  7003                =1    89     MMCSval        EQU     07003H           ;MMCS base 70000H, 3 wait states
                      =1    90                                             ;0111000---------  start address
                      =1    91                                             ;-------000000---  reserved
                      =1    92                                             ;-------------0--  enable bus ready
                      =1    93                                             ;--------------11  3 wait states
                      =1    94     
  07C3                =1    95     LMCSval        EQU     007C3H           ;LCS end at 07FFFFH, 3 wait states
                      =1    96                                             ;00--------------  reserved
                      =1    97                                             ;--00011111------  end address
                      =1    98                                             ;----------000---  reserved
                      =1    99                                             ;-------------0--  enable bus ready
                      =1   100                                             ;--------------11  3 wait states
                      =1   101     
  3003                =1   102     UMCSval        EQU     03003H           ;UCS base at F0000H, 3 wait states
                      =1   103                                             ;00--------------  reserved
                      =1   104                                             ;--11000000------  start address F0000
                      =1   105                                             ;----------000---  reserved
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  02:04:00  04/28/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106                                             ;-------------0--  enable bus ready
                      =1   107                                             ;--------------11  3 wait states
                      =1   108     
                      =1   109     
                      =1   110     
                      =1   111     
                      =1   112     
                      =1   113     
                      =1   114     
                      =1   115     
                      =1   116     
                      =1   117     
                      =1   118     
                      =1   119     
                      =1   120     
                           121     
                           122     
                           123     ; setup code and data groups
                           124     CGROUP  GROUP   CODE
                           125     DGROUP  GROUP   DATA, STACK
                           126     
                           127     
                           128     
                           129     ; the actual startup code - should be executed (jumped to) after reset
                           130     
----                       131     CODE    SEGMENT  WORD  PUBLIC  'CODE'
                           132     
                           133     ; segment register assumptions
                           134     
                           135             ASSUME  CS:CGROUP, DS:DGROUP, ES:NOTHING, SS:DGROUP
                           136     
                           137     
                           138     
                           139             EXTRN    main:NEAR              ;declare the main function
                           140             EXTRN    InitCS:NEAR            ;initialize chip selects
                           141             EXTRN    ClrIRQVectors:NEAR     ;clear interrupt vector table
                           142             EXTRN    InstallTimer0Handler:NEAR  ;install timer 0 handler
                           143             EXTRN    InitTimer0:NEAR        ;start up timer0
                           144             EXTRN    InitButtons:NEAR       ;initialize the buttons
                           145             EXTRN    InitDisplayLCD:NEAR    ;initialize the LCD display
                           146     
0000                       147     START:
                           148     
                           149     
0000                       150     BEGIN:                                  ;start the program
0000 FA                    151             CLI                             ;disable interrupts
0001 B8----         R      152             MOV     AX, DGROUP              ;initialize the stack pointer
0004 8ED0                  153             MOV     SS, AX
0006 BC800290       R      154             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           155     
000A B8----         R      156             MOV     AX, DGROUP              ;initialize the data segment
000D 8ED8                  157             MOV     DS, AX
                           158     
                           159             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           160             ; user initialization code goes here ;
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  02:04:00  04/28/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           162     
000F BAA2FF                163             MOV     DX, LMCSreg             ;setup to write to MPCS register
0012 B8C307                164             MOV     AX, LMCSval
0015 EE                    165             OUT     DX, AL                  ;write MPCSval to MPCS
                           166     
0016 E80000         E      167             CALL    InitCS                  ;initialize chip selects
0019 E80000         E      168             CALL    ClrIRQVectors           ;clear interrupt vector table
                           169     
001C E80000         E      170             CALL    InitButtons             ;initialize the buttons
001F E80000         E      171             CALL    InitDisplayLCD          ;initialize the LCD display
                           172     
0022 E80000         E      173             CALL    InstallTimer0Handler    ;install handler
0025 E80000         E      174             CALL    InitTimer0              ;initialize timer0 for button interrupt
                           175     
0028 FB                    176             STI                             ;enable interrupts
                           177     
0029 E80000         E      178             CALL    main                    ;run the main function (no arguments)
                           179     
002C EBD2                  180             JMP     Start                   ;if return - reinitialize and try again
                           181     
                           182     
----                       183     CODE    ENDS
                           184     
                           185     ; the stack segment - used for subroutine linkage, argument passing, and
                           186     ; local variables
                           187     
----                       188     STACK   SEGMENT  WORD  STACK  'STACK'
                           189     
                           190     
0000 (80                   191             DB      80 DUP ('Stack   ')             ;320 words
     537461636B2020
     20
     )
                           192     
0280                       193     TopOfStack      LABEL   WORD
                           194     
                           195     
----                       196     STACK   ENDS
                           197     
                           198     ; the data segment - used for static and global variables
                           199     
----                       200     DATA    SEGMENT  WORD  PUBLIC  'DATA'
                           201     
                           202     
----                       203     DATA    ENDS
                           204     
                           205     
                           206     
                           207     
                           208             END START

ASSEMBLY COMPLETE, NO ERRORS FOUND
