8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  17:05:44  06/03/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE STARTUP
OBJECT MODULE PLACED IN STARTUP.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE STARTUP.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1             NAME    STARTUP
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                   C0SMROM                                  ;
                             6     ;                               Startup Template                             ;
                             7     ;                    Intel C Small Memory Model, ROM Option                  ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This file contains a template for the startup code used when interfacing to
                            12     ; C code compiled with the Intel C compiler using the small memory model and
                            13     ; ROM option.  It assumes nothing about the system hardware, it's main purpose
                            14     ; is to setup the groups and segments correctly.  Note that most segments are
                            15     ; empty, they are present only for the GROUP definitions.  The actual startup
                            16     ; code for a system would include definitions for the global variables and all
                            17     ; of the system initialization.  Note that the CONST segment does not exist
                            18     ; for ROMmable code (it is automatically made part of the CODE segment by the
                            19     ; compiler).
                            20     ;
                            21     ;
                            22     ;    4/19/16  Tim Liu       Added initcs and created infinite loop
                            23     ;    4/19/16  Tim Liu       Changed name to STARTUP
                            24     ;    4/19/16  Tim Liu       Reordered assumes and group declarations
                            25     ;    4/19/16  Tim Liu       Added START and END START CS:IP init
                            26     ;    4/20/16  Tim Liu       Added write to LMCS before func calls
                            27     ;    4/21/16  Tim Liu       Added calls to set up timer0 and buttons
                            28     ;    4/28/16  Tim Liu       Temporarily replaced main call with infinite loop
                            29     ;    5/7/16   Tim Liu       Added call to InitClock
                            30     ;    5/19/16  Tim Liu       Added commented out call to InstallDreqHandler
                            31     ;    5/30/16  Tim Liu       Removed commented out external function calls
                            32     ; local include files
                            33     
                            34 +1  $INCLUDE(INITREG.INC)
                      =1    35     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    36     ;                                                                            ;
                      =1    37     ;                                 initreg.INC                                ;
                      =1    38     ;                       Initialize Registers MP3 Include File                ;
                      =1    39     ;                                   EE/CS 52                                 ;
                      =1    40     ;                                                                            ;
                      =1    41     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    42     
                      =1    43     ; This file contains the definitions for initcs.asm.
                      =1    44     ;
                      =1    45     ; Revision History:
                      =1    46     ;    11/4/15     Timothy Liu     initial revision
                      =1    47     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    48     ;    11/17/15    Timothy Liu     changed to only have values for initcs.asm
                      =1    49     ;    4/4/16      Timothy Liu     changed name to InitCSM to signify file
                      =1    50     ;                                is for 80188 MP3 player
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  17:05:44  06/03/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

                      =1    51     ;    4/4/16      Timothy Liu     added MMCS, LMCs UMCS reg and val definitions
                      =1    52     ;                                but no values
                      =1    53     ;    4/5/16      Timothy Liu     NOTE: control reg vals/address not added yet
                      =1    54     ;    4/19/16     Timothy Liu     wrote register addresses and control reg vals
                      =1    55     ;    5/9/16      Timothy Liu     changed MMCSval start address
                      =1    56     ;    6/3/16      Timothy Liu     changed LMCS value to 1 wait state
                      =1    57     
                      =1    58     
                      =1    59     ; Chip Select Unit Definitions
                      =1    60     
                      =1    61     ; Addresses
  FFA4                =1    62     PACSreg         EQU     0FFA4H          ;address of PACS register
  FFA8                =1    63     MPCSreg         EQU     0FFA8H          ;address of MPCS register
  FFA6                =1    64     MMCSreg         EQU     0FFA6H          ;address of MMCS register
  FFA2                =1    65     LMCSreg         EQU     0FFA2H          ;address of LMCS register
  FFA0                =1    66     UMCSreg         EQU     0FFA0H          ;address of UMCS register
                      =1    67     
                      =1    68     ; Control Register Values
  0003                =1    69     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1    70                                             ;0000000000------  starts at address 0
                      =1    71                                             ;----------000---  reserved
                      =1    72                                             ;-------------0--  wait for RDY inputs
                      =1    73                                             ;--------------11  3 wait states
  4083                =1    74     MPCSval         EQU     04083H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1    75                                             ;0---------000---  reserved
                      =1    76                                             ;-1000000--------  MCS is 512KB
                      =1    77                                             ;--------1-------  output PCS5/PCS6
                      =1    78                                             ;---------0------  PCS in I/O space
                      =1    79                                             ;-------------0--  wait for RDY inputs
                      =1    80                                             ;--------------11  3 wait states
                      =1    81     
  8003                =1    82     MMCSval        EQU     08003H           ;MMCS base 80000H, 3 wait states
                      =1    83                                             ;1000000---------  start address
                      =1    84                                             ;-------000000---  reserved
                      =1    85                                             ;-------------0--  enable bus ready
                      =1    86                                             ;--------------11  3 wait states
                      =1    87     
  07C1                =1    88     LMCSval        EQU     007C1H           ;LCS end at 07FFFFH, 3 wait states
                      =1    89                                             ;00--------------  reserved
                      =1    90                                             ;--00011111------  end address
                      =1    91                                             ;----------000---  reserved
                      =1    92                                             ;-------------0--  enable bus ready
                      =1    93                                             ;--------------01  1 wait state
                      =1    94     
  3003                =1    95     UMCSval        EQU     03003H           ;UCS base at F0000H, 3 wait states
                      =1    96                                             ;00--------------  reserved
                      =1    97                                             ;--11000000------  start address F0000
                      =1    98                                             ;----------000---  reserved
                      =1    99                                             ;-------------0--  enable bus ready
                      =1   100                                             ;--------------11  3 wait states
                      =1   101     
                      =1   102     
                      =1   103     
                      =1   104     
                      =1   105     
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  17:05:44  06/03/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     
                      =1   107     
                      =1   108     
                      =1   109     
                      =1   110     
                      =1   111     
                      =1   112     
                      =1   113     
                           114     
                           115     
                           116     ; setup code and data groups
                           117     CGROUP  GROUP   CODE
                           118     DGROUP  GROUP   DATA, STACK
                           119     
                           120     
                           121     
                           122     ; the actual startup code - should be executed (jumped to) after reset
                           123     
----                       124     CODE    SEGMENT  WORD  PUBLIC  'CODE'
                           125     
                           126     ; segment register assumptions
                           127     
                           128             ASSUME  CS:CGROUP, DS:DGROUP, ES:NOTHING, SS:DGROUP
                           129     
                           130     
                           131     
                           132             EXTRN    main:NEAR                  ;declare the main function
                           133             EXTRN    InitCS:NEAR                ;initialize chip selects
                           134             EXTRN    ClrIRQVectors:NEAR         ;clear interrupt vector table
                           135             EXTRN    InstallTimer0Handler:NEAR  ;install timer 0 handler
                           136             EXTRN    InitTimer0:NEAR            ;start up timer0
                           137             EXTRN    InitButtons:NEAR           ;initialize the buttons
                           138             EXTRN    InitDisplayLCD:NEAR        ;initialize the LCD display
                           139             EXTRN    InitClock:NEAR             ;initialize MP3 clock
                           140             EXTRN    InstallTimer1Handler:NEAR  ;install timer 1 handler
                           141             EXTRN    InitTimer1:NEAR            ;start up timer 1
                           142             EXTRN    InstallDreqHandler:NEAR    ;install audio data request handler
                           143     
0000                       144     START:
                           145     
                           146     
0000                       147     BEGIN:                                  ;start the program
0000 FA                    148             CLI                             ;disable interrupts
0001 B8----         R      149             MOV     AX, DGROUP              ;initialize the stack pointer
0004 8ED0                  150             MOV     SS, AX
0006 BC800290       R      151             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           152     
000A B8----         R      153             MOV     AX, DGROUP              ;initialize the data segment
000D 8ED8                  154             MOV     DS, AX
                           155     
                           156             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           157             ; user initialization code goes here ;
                           158             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           159     
000F BAA2FF                160             MOV     DX, LMCSreg             ;setup to write to MPCS register
8086/87/88/186 MACRO ASSEMBLER    STARTUP                                                  17:05:44  06/03/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

0012 B8C107                161             MOV     AX, LMCSval
0015 EE                    162             OUT     DX, AL                  ;write MPCSval to MPCS
                           163     
0016 E80000         E      164             CALL    InitCS                  ;initialize chip selects
0019 E80000         E      165             CALL    ClrIRQVectors           ;clear interrupt vector table
                           166     
001C E80000         E      167             CALL    InitButtons             ;initialize the buttons
001F E80000         E      168             CALL    InitDisplayLCD          ;initialize the LCD display
0022 E80000         E      169             CALL    InitClock               ;initialize the MP3 clock
                           170     
0025 E80000         E      171             CALL    InstallTimer0Handler    ;install handler
0028 E80000         E      172             CALL    InstallTimer1Handler    ;install timer1 handler
002B E80000         E      173             CALL    InitTimer0              ;initialize timer0 for button interrupt
002E E80000         E      174             CALL    InitTimer1              ;initialize timer1 for DRAM refresh
0031 E80000         E      175             CALL    InstallDreqHandler      ;install handler for audio data request
                           176     
0034 FB                    177             STI                             ;enable interrupts
                           178     
0035 E80000         E      179             CALL    main                    ;run the main function (no arguments)
                           180     
0038                       181     Infinite:                               ;should not reach label - means MAIN returned
                           182     
0038 EBC6                  183             JMP     Start                   ;if return - reinitialize and try again
                           184     
                           185     
----                       186     CODE    ENDS
                           187     
                           188     ; the stack segment - used for subroutine linkage, argument passing, and
                           189     ; local variables
                           190     
----                       191     STACK   SEGMENT  WORD  STACK  'STACK'
                           192     
                           193     
0000 (80                   194             DB      80 DUP ('Stack   ')             ;320 words
     537461636B2020
     20
     )
                           195     
0280                       196     TopOfStack      LABEL   WORD
                           197     
                           198     
----                       199     STACK   ENDS
                           200     
                           201     ; the data segment - used for static and global variables
                           202     
----                       203     DATA    SEGMENT  WORD  PUBLIC  'DATA'
                           204     
                           205     
----                       206     DATA    ENDS
                           207     
                           208     
                           209     
                           210     
                           211             END START

ASSEMBLY COMPLETE, NO ERRORS FOUND
