8086/87/88/186 MACRO ASSEMBLER    ASKEL                                                    20:25:40  05/28/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE ASKEL
OBJECT MODULE PLACED IN ASKEL.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE ASKEL.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1             NAME    ASKEL
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                   C0SMROM                                  ;
                             6     ;                           Skeleton Startup Template                        ;
                             7     ;                    Intel C Small Memory Model, ROM Option                  ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; This file contains the skeleton startup code for the MP3 player. The code
                            12     ; Sets up the chip selects and then enters into an infinite loop. The purpose
                            13     ; of this file is to run the initialization code and then allow functions
                            14     ; and other code to be tested on its own.
                            15     ;
                            16     ;
                            17     ; Revision History:
                            18     ;  5/14/16    Tim Liu    initial revision
                            19     ;  5/28/16    Tim Liu    skeleton startup for audio
                            20     ;    
                            21     ; local include files
                            22     
                            23 +1  $INCLUDE(INITREG.INC)
                      =1    24     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    25     ;                                                                            ;
                      =1    26     ;                                 initreg.INC                                ;
                      =1    27     ;                       Initialize Registers MP3 Include File                ;
                      =1    28     ;                                   EE/CS 52                                 ;
                      =1    29     ;                                                                            ;
                      =1    30     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    31     
                      =1    32     ; This file contains the definitions for initcs.asm.
                      =1    33     ;
                      =1    34     ; Revision History:
                      =1    35     ;    11/4/15     Timothy Liu     initial revision
                      =1    36     ;    11/5/15     Timothy Liu     fixed formatting
                      =1    37     ;    11/17/15    Timothy Liu     changed to only have values for initcs.asm
                      =1    38     ;    4/4/16      Timothy Liu     changed name to InitCSM to signify file
                      =1    39     ;                                is for 80188 MP3 player
                      =1    40     ;    4/4/16      Timothy Liu     added MMCS, LMCs UMCS reg and val definitions
                      =1    41     ;                                but no values
                      =1    42     ;    4/5/16      Timothy Liu     NOTE: control reg vals/address not added yet
                      =1    43     ;    4/19/16     Timothy Liu     wrote register addresses and control reg vals
                      =1    44     ;    5/9/16      Timothy Liu     changed MMCSval start address
                      =1    45     
                      =1    46     
                      =1    47     ; Chip Select Unit Definitions
                      =1    48     
                      =1    49     ; Addresses
  FFA4                =1    50     PACSreg         EQU     0FFA4H          ;address of PACS register
8086/87/88/186 MACRO ASSEMBLER    ASKEL                                                    20:25:40  05/28/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  FFA8                =1    51     MPCSreg         EQU     0FFA8H          ;address of MPCS register
  FFA6                =1    52     MMCSreg         EQU     0FFA6H          ;address of MMCS register
  FFA2                =1    53     LMCSreg         EQU     0FFA2H          ;address of LMCS register
  FFA0                =1    54     UMCSreg         EQU     0FFA0H          ;address of UMCS register
                      =1    55     
                      =1    56     ; Control Register Values
  0003                =1    57     PACSval         EQU     00003H          ;PCS base at 0, 3 wait states
                      =1    58                                             ;0000000000------  starts at address 0
                      =1    59                                             ;----------000---  reserved
                      =1    60                                             ;-------------0--  wait for RDY inputs
                      =1    61                                             ;--------------11  3 wait states
  4083                =1    62     MPCSval         EQU     04083H          ;PCS in I/O space, use PCS5/6, 3 wait states
                      =1    63                                             ;0---------000---  reserved
                      =1    64                                             ;-1000000--------  MCS is 512KB
                      =1    65                                             ;--------1-------  output PCS5/PCS6
                      =1    66                                             ;---------0------  PCS in I/O space
                      =1    67                                             ;-------------0--  wait for RDY inputs
                      =1    68                                             ;--------------11  3 wait states
                      =1    69     
  8003                =1    70     MMCSval        EQU     08003H           ;MMCS base 80000H, 3 wait states
                      =1    71                                             ;1000000---------  start address
                      =1    72                                             ;-------000000---  reserved
                      =1    73                                             ;-------------0--  enable bus ready
                      =1    74                                             ;--------------11  3 wait states
                      =1    75     
  07C3                =1    76     LMCSval        EQU     007C3H           ;LCS end at 07FFFFH, 3 wait states
                      =1    77                                             ;00--------------  reserved
                      =1    78                                             ;--00011111------  end address
                      =1    79                                             ;----------000---  reserved
                      =1    80                                             ;-------------0--  enable bus ready
                      =1    81                                             ;--------------11  3 wait states
                      =1    82     
  3003                =1    83     UMCSval        EQU     03003H           ;UCS base at F0000H, 3 wait states
                      =1    84                                             ;00--------------  reserved
                      =1    85                                             ;--11000000------  start address F0000
                      =1    86                                             ;----------000---  reserved
                      =1    87                                             ;-------------0--  enable bus ready
                      =1    88                                             ;--------------11  3 wait states
                      =1    89     
                      =1    90     
                      =1    91     
                      =1    92     
                      =1    93     
                      =1    94     
                      =1    95     
                      =1    96     
                      =1    97     
                      =1    98     
                      =1    99     
                      =1   100     
                      =1   101     
                           102     
                           103     
                           104     ; setup code and data groups
                           105     CGROUP  GROUP   CODE
8086/87/88/186 MACRO ASSEMBLER    ASKEL                                                    20:25:40  05/28/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           106     DGROUP  GROUP   DATA, STACK
                           107     
                           108     
                           109     
                           110     ; the actual startup code - should be executed (jumped to) after reset
                           111     
----                       112     CODE    SEGMENT  WORD  PUBLIC  'CODE'
                           113     
                           114     ; segment register assumptions
                           115     
                           116             ASSUME  CS:CGROUP, DS:DGROUP, ES:NOTHING, SS:DGROUP
                           117     
                           118     
                           119             EXTRN    InitCS:NEAR            ;initialize chip selects
                           120             EXTRN    ClrIRQVectors:NEAR     ;clear interrupt vector table
                           121             EXTRN    InstallDreqHandler:NEAR ;install audio data request handler
                           122             EXTRN    AudioInit:NEAR
                           123     
                           124     
                           125     
                           126     
0000                       127     START:
                           128     
                           129     
0000                       130     BEGIN:                                  ;start the program
0000 FA                    131             CLI                             ;disable interrupts
0001 B8----         R      132             MOV     AX, DGROUP              ;initialize the stack pointer
0004 8ED0                  133             MOV     SS, AX
0006 BC800290       R      134             MOV     SP, OFFSET(DGROUP:TopOfStack)
                           135     
000A B8----         R      136             MOV     AX, DGROUP              ;initialize the data segment
000D 8ED8                  137             MOV     DS, AX
                           138     
                           139             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           140             ; user initialization code goes here ;
                           141             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           142     
000F BAA2FF                143             MOV     DX, LMCSreg             ;setup to write to MPCS register
0012 B8C307                144             MOV     AX, LMCSval
0015 EE                    145             OUT     DX, AL                  ;write MPCSval to MPCS
                           146     
0016 E80000         E      147             CALL    InitCS                  ;initialize chip selects
0019 E80000         E      148             CALL    ClrIRQVectors           ;clear interrupt vector table
001C E80000         E      149             CALL    InstallDreqHandler      ;install handler for audio data request
001F E80000         E      150             CALL    AudioInit               ;initialize audio fixed buffer
                           151     
0022 FB                    152             STI                             ;enable interrupts
                           153     
0023                       154     Infinite:
0023 EBFE                  155             JMP    Infinite
                           156     
0025 EBD9                  157             JMP     Start                   ;if return - reinitialize and try again
                           158     
                           159     
----                       160     CODE    ENDS
8086/87/88/186 MACRO ASSEMBLER    ASKEL                                                    20:25:40  05/28/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     
                           162     ; the stack segment - used for subroutine linkage, argument passing, and
                           163     ; local variables
                           164     
----                       165     STACK   SEGMENT  WORD  STACK  'STACK'
                           166     
                           167     
0000 (80                   168             DB      80 DUP ('Stack   ')             ;320 words
     537461636B2020
     20
     )
                           169     
0280                       170     TopOfStack      LABEL   WORD
                           171     
                           172     
----                       173     STACK   ENDS
                           174     
                           175     ; the data segment - used for static and global variables
                           176     
----                       177     DATA    SEGMENT  WORD  PUBLIC  'DATA'
                           178     
                           179     
----                       180     DATA    ENDS
                           181     
                           182     
                           183     
                           184     
                           185             END START

ASSEMBLY COMPLETE, NO ERRORS FOUND
