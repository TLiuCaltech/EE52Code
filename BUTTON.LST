8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE BUTTON
OBJECT MODULE PLACED IN BUTTON.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE BUTTON.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    BUTTON
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    Button                                  ;
                             6     ;                               Button Functions                             ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:    Functions for scanning the keys.
                            12     ;
                            13     ; Revision History:
                            14     ;        2/3/16    Tim Liu    created file
                            15     ;        2/4/16    Tim Liu    finished writing outline
                            16     ;        4/4/16    Tim Liu    changed button to buttons
                            17     ;        4/21/16   Tim Liu    wrote stub function for ButtonDebounce
                            18     ;        4/21/16   Tim Liu    wrote InitButtons
                            19     ;        4/21/16   Tim Liu    wrote ButtonDebounce
                            20     ;        4/24/16   Tim Liu    added enqueue call to ButtonDebounce
                            21     ;        4/24/16   Tim Liu    wrote Key_available
                            22     ;
                            23     ;
                            24     ; Table of Contents
                            25     ;
                            26     ;        InitButtons - initializes the functions needed for buttons
                            27     ;        ButtonDebounce - scans a the key address and debounces
                            28     ;        key_available - returns TRUE if there is a valid key
                            29     ;        getkey - returns the key code for the debounced key
                            30     
                            31     ; local include files
                            32     
                            33 +1  $INCLUDE(BUTTON.INC)
                      =1    34     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    35     ;                                                                            ;
                      =1    36     ;                                   Button.inc                               ;
                      =1    37     ;                              Button Include File                           ;
                      =1    38     ;                                   EE/CS 52                                 ;
                      =1    39     ;                                                                            ;
                      =1    40     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    41     
                      =1    42     ; This file contains the definitions for button.asm
                      =1    43     ;
                      =1    44     ; Revision History:
                      =1    45     ;    4/21/16     Timothy Liu     created file - initial revision
                      =1    46     
                      =1    47     
  0032                =1    48     DebounceTime         EQU        50       ;miliseconds to debounce the keypad
  012C                =1    49     RepeatRate           EQU        300      ;miliseconds between auto-repeat
                      =1    50     
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  00FF                =1    51     NoButtonPressed      EQU   0FFh         ;indicates no button pressed
                      =1    52     
  0000                =1    53     ButtonAddress        EQU   0            ;starting address of buttons
                            54 +1  $INCLUDE(QUEUE.INC)
                      =1    55     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    56     ;                                                                            ;
                      =1    57     ;                                   QUEUE                                    ;
                      =1    58     ;                             Conversion Functions                           ;
                      =1    59     ;                                   EE/CS 51                                 ;
                      =1    60     ;                                                                            ;
                      =1    61     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    62     
                      =1    63     
                      =1    64     ; This file contains the definitions for the queue structure and several
                      =1    65     ; constants.
                      =1    66     ;
                      =1    67     ; Revision History:
                      =1    68     ;   10/20/15    Tim Liu   Wrote struct definition
                      =1    69     ;   10/21/15    Tim Liu   Changed names to avoid protected names
                      =1    70     ;   10/22/15    Tim Liu   Updated comments
                      =1    71     ;   4/21/16     Tim Liu   Changed array_size to 256 bytes
                      =1    72     
                      =1    73     ;Queue definitions
                      =1    74     
  0100                =1    75     array_size         EQU     256    ;number of bytes in a queue
  00FF                =1    76     ModByteMask        EQU     255    ;number to AND with to get mod 1024
  007F                =1    77     ModWordMask        EQU     127     ;number to AND with to get mod 512
                      =1    78     
  0001                =1    79     WordQueueType      EQU        1    ;make a word queue
  0000                =1    80     ByteQueueType      EQU        0    ;make a byte queue
                      =1    81     
                      =1    82     ; Structure for queue
                      =1    83     
----                  =1    84     QueueStruct    STRUC
0000                  =1    85         word_byte  DB                 ?     ;size of each element
0001                  =1    86         filled     DW                 ?     ;number of elements filled
0003                  =1    87         head       DW                 ?     ;value of head index
0005                  =1    88         tail       DW                 ?     ;value of tail index
0007                  =1    89         content    DB array_size DUP (?)    ;array for storing contents
----                  =1    90     QueueStruct    ENDS
                            91 +1  $INCLUDE(GENERAL.INC)
                      =1    92     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    93     ;                                                                            ;
                      =1    94     ;                                  General.INC                               ;
                      =1    95     ;                               General include file                         ;
                      =1    96     ;                                   EE/CS 51                                 ;
                      =1    97     ;                                                                            ;
                      =1    98     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    99     
                      =1   100     ; This file contains general definitions and constants.
                      =1   101     ;
                      =1   102     ; Revision History:
                      =1   103     ;    11/3/15     Timothy Liu     initial revision
                      =1   104     ;    11/5/15     Timothy Liu     fixed formatting
                      =1   105     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1   107     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1   108     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1   109     
                      =1   110     
                      =1   111     
  0004                =1   112     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1   113     
  0002                =1   114     OffSize              EQU        2         ;offset size in bytes
                      =1   115     
                      =1   116     ;Ascii definitions
  000D                =1   117     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1   118     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1   119     ASCII_E              EQU       69         ;ASCII E
  0046                =1   120     ASCII_F              EQU       70         ;F character for fire (laser on)
  004C                =1   121     ASCII_L              EQU       76         ;L character
  004F                =1   122     ASCII_O              EQU       79         ;O character for off (laser off)
  0053                =1   123     ASCII_S              EQU       83         ;S character
  0000                =1   124     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1   125     ASCII_SPACE          EQU       32         ;ASCII space
                      =1   126     
  0001                =1   127     TRUE                 EQU        1         ;true
  0000                =1   128     FALSE                EQU        0         ;false
                      =1   129     
  0002                =1   130     WORD_SIZE            EQU        2         ;2 bytes per word
                           131     
                           132     
                           133     CGROUP    GROUP    CODE
                           134     DGROUP    GROUP    DATA
                           135     
----                       136     CODE SEGMENT PUBLIC 'CODE'
                           137     
                           138             ASSUME  CS:CGROUP, DS:DGROUP
                           139     
                           140     ;external function declarations
                           141     
                           142         EXTRN    QueueInit:NEAR                 ;initializes a queue
                           143         EXTRN    QueueFull:NEAR                 ;check if queue is full
                           144         EXTRN    Enqueue:NEAR                   ;add event to queue
                           145         EXTRN    QueueEmpty:NEAR                ;check if the queue is empty
                           146         EXTRN    Dequeue:NEAR                   ;remove element from queue
                           147     
                           148     ;Name:               InitButtons
                           149     ;
                           150     ;Description:        This function initializes the shared variables for the
                           151     ;                    button functions. The function sets the value of
                           152     ;                    DebounceCnt to zero and sets LastRead to NoKeyPressed.
                           153     ;
                           154     ;Operation:          The function sets each of the three shared variables
                           155     ;                    to the listed values. DebounceCnt is set to zero and
                           156     ;                    LastRead is set to NobuttonPressed.
                           157     ;
                           158     ;Arguments:          None
                           159     ;
                           160     ;Return Values:      None
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ;
                           162     ;Local Variables:    None
                           163     ;
                           164     ;Shared Variables:   KeyCode (W) - code for the key being pressed
                           165     ;                    LastRead
                           166     ;
                           167     ;Input:              None
                           168     ;
                           169     ;Output:             None
                           170     ;
                           171     ;Error Handling:     None
                           172     ;
                           173     ;Algorithms:         None
                           174     ;
                           175     ;Registers Used:     None
                           176     ;
                           177     ;Known Bugs:         None
                           178     ;
                           179     ;Limitations:        None
                           180     ;
                           181     ;Last Modified:      2/4/16
                           182     
                           183     ;Outline
                           184     ;InitButtons()
                           185     ;    DebounceCnt = 0                     ;clear the debounce timer
                           186     ;    LastRead = NoButtonPressed          ;indicate no key is pressed
                           187     ;    RETURN
                           188     
                           189     
                           190     
0000                       191     InitButtons    PROC    NEAR
                           192                    PUBLIC  InitButtons
                           193     
0000                       194     InitButtonsStart:
0000 C70600003200   R      195         MOV    DebounceCnt, DebounceTime     ;load the debounce counter
0006 C6060200FF90   R      196         MOV    LastRead, NoButtonPressed     ;nothing pressed yet
                           197     
000C                       198     InitButtonsQueue:                        ;label for initializing queue
000C 56                    199         PUSH   SI                            ;save registers
000D 53                    200         PUSH   BX
                           201     
000E                       202     InitButtonsQueueArgs:                    ;set up arguments for QueueInit
000E 8D360300       R      203         LEA    SI, ButtonQueue               ;load address of the queue
0012 B300                  204         MOV    BL, ByteQueueType             ;make ButtonQueue a byte queue
0014 E80000         E      205         CALL   QueueInit                     ;initialize queue
                           206     
0017                       207     InitButtonsEnd:                          ;finished - restore registers
0017 5B                    208         POP    BX
0018 5E                    209         POP    SI
                           210     
0019 C3                    211         RET
                           212     
                           213     InitButtons ENDP
                           214     
                           215     
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

                           216     
                           217     ;Name:               ButtonDebounce()
                           218     ;
                           219     ;Description:        This function reads the address of the buttons to
                           220     ;                    see if a button is pressed. If a button is pressed,
                           221     ;                    the function debounces the press and enqueues the button
                           222     ;                    code to the buttonQueue using the function EnqueueEvent.
                           223     ;                    This function also implements auto repeat. If the 
                           224     ;                    same button is held down, then the button press will
                           225     ;                    be recorded every RepeatRate milliseconds. Only one
                           226     ;                    button can be pushed at a time. If multiple buttons
                           227     ;                    are pressed, the function will act like no
                           228     ;                    buttons are being pressed. This function is called by
                           229     ;                    the interrupt handler buttonHandler every millisecond.
                           230     ;
                           231     ;Operation:          When called, the function reads in from the address
                           232     ;                    buttonAddress. If the value of the input is equal to
                           233     ;                    NoButtonPressed or if the value of the input is not
                           234     ;                    equal to LastRead, then the function resets the debounce
                           235     ;                    counter. If the value of the input is different from
                           236     ;                    the last input, then LastRead is updated. If the input
                           237     ;                    is the same as LastRead, then the function decrements
                           238     ;                    DebounceCnt. Once DebounceCnt reaches zero, the function
                           239     ;                    calls EnqueueEvent and enqueues the key press to the
                           240     ;                    buttonQueue.
                           241     ;
                           242     ;Arguments:          None
                           243     ;
                           244     ;Return Values:      None
                           245     ;
                           246     ;Local Variables:    KeyInput (AL) - input from the key being pressed.
                           247     ;
                           248     ;Shared Variables:   DebounceCnt (R/W) - how many additional interrupts
                           249     ;                    must occur before the button press is debounced
                           250     ;                    LastRead (R/W) - the value of the last key that was
                           251     ;                    pressed.
                           252     ;
                           253     ;Input:              8 possible button presses from 8 different buttons
                           254     ;
                           255     ;Output:             None
                           256     ;
                           257     ;Error Handling:     None
                           258     ;
                           259     ;Algorithms:         None
                           260     ;
                           261     ;Registers Changed:  Flag registers
                           262     ;
                           263     ;Known Bugs:         None
                           264     ;
                           265     ;Limitations:        None
                           266     ;
                           267     ;Last Modified:      4/24/16
                           268     ;
                           269     ;Outline
                           270     ;
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;buttonDebounce()
                           272     
                           273     ;Input(ReadAddress, buttonInput)          ;read a word from the port
                           274     ;
                           275     ;IF (ButtonInput == NoKeyPressed) OR      ;check if button was pressed
                           276     ;    (ButtonInput != LastRead):           ;check if button is same
                           277     ;    DebounceCnt = DebounceTime           ;reset the debounce counter
                           278     ;    LastRead = KeyInput                  ;update which button was pressed
                           279     ;
                           280     ;ELSE:                                    ;if a button was pressed
                           281     ;    DebounceCnt --                       ;debounce the button
                           282     ;    IF DebounceCnt == 0:                 ;button is debounced
                           283     ;        CALL EnQueue                     ;enqueue the button press event
                           284     ;        DebounceCnt = RepeatRate         ;implement auto-repeat
                           285     ;
                           286     ;RETURN
                           287     
                           288     
001A                       289     ButtonDebounce        PROC    NEAR
                           290                           PUBLIC  ButtonDebounce
                           291     
                           292     
001A                       293     ButtonDebounceStart:
001A 50                    294         PUSH  AX                               ;save registers
001B 56                    295         PUSH  SI
                           296     
001C                       297     ButtonDebounceRead:
001C E400                  298         IN     AL, ButtonAddress               ;read the button byte
                           299     
001E                       300     CheckButtonPressed:
001E 3CFF                  301         CMP    AL, NoButtonPressed             ;check if no button is pressed
0020 7409                  302         JE     ResetPress                      ;if no key pressed, go to label
                           303     
0022 3A060200       R      304         CMP    AL, LastRead                    ;check if button is same as last
0026 7503                  305         JNE    ResetPress                      ;reset if different button
0028 EB1490                306         JMP    HaveButton                      ;otherwise take care of button
                           307     
002B                       308     ResetPress:
002B C70600003200   R      309         MOV    DebounceCnt, DebounceTime       ;reset the debounce counter
0031 3CFF                  310         CMP    AL, NoButtonPressed             ;if a different key is pressed
0033 7503                  311         JNE    UpdateLastPressed               ;then update the last pressed
0035 EB2D90                312         JMP    ButtonDebounceEnd               ;finish the function
                           313     
0038                       314     UpdateLastpressed:
0038 A20200         R      315         MOV    LastRead, AL                     ;update last read key
003B EB2790                316         JMP    ButtonDebounceEnd                ;end
                           317     
003E                       318     HaveButton:
003E FF0E0000       R      319         DEC    DebounceCnt                      ;one fewer cycle to wait
0042 833E000000     R      320         CMP    DebounceCnt, 0                   ;check if debounce is over
0047 7403                  321         JE     SendButtonPress                  ;if debounced go to label
0049 EB1990                322         JMP    ButtonDebounceEnd                ;otherwise end the function
                           323     
004C                       324     SendButtonPress:
                           325         
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

004C 8D360300       R      326         LEA    SI, ButtonQueue                  ;load address - arg for queue funds
0050 E80000         E      327         CALL   QueueFull                        ;Check if the queue is full
0053 740C                  328         JZ     ButtonDebounceQFull              ;full - jump to emergency label
                           329     
0055 E80000         E      330         CALL   EnQueue                          ;if not full, enqueue key pattern
0058 C70600002C01   R      331         MOV    DebounceCnt, RepeatRate          ;set up auto repeat
005E EB0490                332         JMP    ButtonDebounceEnd                ;go to function end
                           333     
0061                       334     ButtonDebounceQFull:
0061 EB0190                335         JMP   ButtonDebounceEnd                 ;nothing for now - later set
                           336                                                 ;an abort flag
                           337     
0064                       338     ButtonDebounceEnd:
0064 5E                    339         POP    SI                               ;restore registers
0065 58                    340         POP    AX
0066 C3                    341         RET                                     ;end of function - return
                           342     
                           343     ButtonDebounce ENDP
                           344     
                           345     
                           346     
                           347     
                           348     ;Name:               Key_Available
                           349     ;
                           350     ;Description:        This function checks if there is a button press ready
                           351     ;                    for processing. The function calls QueueEmpty to check
                           352     ;                    if the buttonQueue is empty. If buttonQueue is empty,
                           353     ;                    then the function returns TRUE and if there is no
                           354     ;                    button press ready the function returns FALSE.
                           355     ;
                           356     ;Operation:          Call QueueEmpty to check if the buttonQueue has any
                           357     ;                    elements in it. If QueueEmpty returns with the 
                           358     ;                    buttonQueue empty, the function returns with FALSE in
                           359     ;                    AX. Otherwise, the function returns TRUE in AX.
                           360     ;
                           361     ;Arguments:          None
                           362     ;
                           363     ;Return Values:      Havebutton (AX) - TRUE if a button is ready to be
                           364     ;                    processed; FALSE if no button press
                           365     ;
                           366     ;Local Variables:    QueueAddress (SI) - address of queue. Argument to
                           367     ;                    QueueEmpty
                           368     ;
                           369     ;Shared Variables:   None
                           370     ;
                           371     ;Output:             None
                           372     ;
                           373     ;Error Handling:     None
                           374     ;
                           375     ;Algorithms:         None
                           376     ;
                           377     ;Registers Used:     AX
                           378     ;
                           379     ;Known Bugs:         None
                           380     ;
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;Limitations:        None
                           382     ;
                           383     ;Last Modified:      4/24/16
                           384     
                           385     ;Outline
                           386     ;Key_Available():
                           387     ;    QueueAddress = Address(buttonQueue)        ;load the argument
                           388     ;    IF QueueEmpty(QueueAddress) == TRUE:       ;call function to check if
                           389     ;                                               ;button queue is empty
                           390     ;        HaveButton == FALSE                    ;no button available
                           391     ;    ELSE:                                      ;otherwise, thereb^^s a button
                           392     ;        HaveButton == TRUE                     ;indicate a button is ready
                           393     ;    RETURN
                           394     
0067                       395     Key_Available    PROC    NEAR
                           396                      PUBLIC  Key_Available
                           397     
0067                       398     Key_AvailableStart:
0067 56                    399         PUSH    SI                                  ;save register
                           400     
0068                       401     Key_AvailableCheck:                             ;check if queue is empty
0068 8D360300       R      402         LEA     SI, ButtonQueue                     ;load QueueEmpty argument
006C E80000         E      403         CALL    QueueEmpty                          ;check if queue is empty
006F 7409                  404         JZ      Key_AvailableNo                     ;Queue empty - no key
0071 EB0190                405         JMP     Key_AvailableYes                    ;otherwise there is key
                           406         
                           407     
0074                       408     Key_AvailableYes:                               ;label if key is available
0074 B80100                409         MOV    AX, TRUE                             ;load return value
0077 EB0790                410         JMP    Key_AvailableDone                    ;finish function
                           411     
007A                       412     Key_AvailableNo:                                ;label if no key available
007A B80000                413         MOV    AX, FALSE                            ;load return value
007D EB0190                414         JMP    Key_AvailableDone                    ;finish function
                           415     
0080                       416     Key_AvailableDone:                              ;end of function
0080 5E                    417         POP     SI                                  ;restore register
0081 C3                    418         RET
                           419     
                           420     Key_Available    ENDP
                           421     
                           422     
                           423     ;Name:               getkey
                           424     ;
                           425     ;Description:        This function returns the key code for a debounced
                           426     ;                    key. The function does not return until it has
                           427     ;                    a valid key.                    
                           428     ;
                           429     ;Operation:          Load the starting address of the button queue to
                           430     ;                    register SI. Clear out AX. Then, call Dequeue
                           431     ;                    to remove a button event from the button queue.
                           432     ;                    Return with the button key code.
                           433     ;
                           434     ;Arguments:          None
                           435     ;
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           436     ;Return Values:      KeyCode (AX) - key code corresponding to one of the
                           437     ;                    key presses.
                           438     ;
                           439     ;Local Variables:    QueueAddress (SI) - address of queue. Argument to
                           440     ;                    QueueEmpty
                           441     ;
                           442     ;Shared Variables:   None
                           443     ;
                           444     ;Output:             None
                           445     ;
                           446     ;Error Handling:     None
                           447     ;
                           448     ;Algorithms:         None
                           449     ;
                           450     ;Registers Used:     AX
                           451     ;
                           452     ;Known Bugs:         None
                           453     ;
                           454     ;Limitations:        None
                           455     ;
                           456     ;Last Modified:      4/24/16
                           457     
                           458     ;Outline
                           459     
0082                       460     GetKey        PROC    NEAR
                           461                   PUBLIC  GetKey
                           462     
0082                       463     GetKeyStart:                               ;starting label
0082 56                    464         PUSH    SI                             ;save the registers
0083 33C0                  465         XOR     AX, AX                         ;clear out return register
                           466     
0085                       467     GetKeyDequeue:
0085 8D360300       R      468         LEA    SI, ButtonQueue                 ;argument for Dequeue
0089 E80000         E      469         CALL   DeQueue                         ;remove button press from queue
                           470     
008C                       471     GetKeyDone:                                ;end of function
008C 5E                    472         POP    SI                              ;restore register
008D C3                    473         RET
                           474     
                           475     GetKey    ENDP
                           476     
                           477     
                           478     
----                       479     CODE ENDS
                           480     
                           481     ;start data segment
                           482     
----                       483     DATA    SEGMENT PUBLIC  'DATA'
                           484     
0000 ????                  485     DebounceCnt        DW    ?     ;how many more irq before calling Enqueue
0002 ??                    486     LastRead           DB    ?     ;value of last key read after masking
0003 ??                    487     ButtonQueue    QueueStruct<>   ;allocate the button queue
0004 ????
0006 ????
0008 ????
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   02:31:17  04/25/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

000A (256
     ??
     )
                           488     
                           489     
----                       490     DATA ENDS
                           491     
                           492     
                           493     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
