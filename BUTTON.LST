8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE BUTTON
OBJECT MODULE PLACED IN BUTTON.OBJ
ASSEMBLER INVOKED BY:  C:\WINDOWS\SYSTEM32\ASM86.EXE BUTTON.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    BUTTON
                             2     
                             3     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4     ;                                                                            ;
                             5     ;                                    Button                                  ;
                             6     ;                               Button Functions                             ;
                             7     ;                                   EE/CS 51                                 ;
                             8     ;                                                                            ;
                             9     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10     
                            11     ; Description:    Functions for scanning the keys.
                            12     ;
                            13     ; Revision History:
                            14     ;        2/3/16    Tim Liu    created file
                            15     ;        2/4/16    Tim Liu    finished writing outline
                            16     ;        4/4/16    Tim Liu    changed button to buttons
                            17     ;        4/21/16   Tim Liu    wrote stub function for ButtonDebounce
                            18     ;        4/21/16   Tim Liu    wrote InitButtons
                            19     ;        4/21/16   Tim Liu    wrote ButtonDebounce
                            20     ;        4/24/16   Tim Liu    added enqueue call to ButtonDebounce
                            21     ;        4/24/16   Tim Liu    wrote Key_available
                            22     ;        4/24/16   Tim Liu    wrote GetKey
                            23     ;
                            24     ;
                            25     ; Table of Contents
                            26     ;
                            27     ;        InitButtons - initializes the functions needed for buttons
                            28     ;        ButtonDebounce - scans a the key address and debounces
                            29     ;        key_available - returns TRUE if there is a valid key
                            30     ;        getkey - returns the key code for the debounced key
                            31     ;        KeyCodeTable - maps button bit pattern to getkey keycodes  
                            32     
                            33     ; local include files
                            34     
                            35 +1  $INCLUDE(BUTTON.INC)
                      =1    36     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    37     ;                                                                            ;
                      =1    38     ;                                   Button.inc                               ;
                      =1    39     ;                              Button Include File                           ;
                      =1    40     ;                                   EE/CS 52                                 ;
                      =1    41     ;                                                                            ;
                      =1    42     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    43     
                      =1    44     ; This file contains the definitions for button.asm
                      =1    45     ;
                      =1    46     ; Revision History:
                      =1    47     ;    4/21/16     Timothy Liu     created file - initial revision
                      =1    48     ;    4/26/16     Timothy Liu     added KeyCodeOffset
                      =1    49     
  0032                =1    50     DebounceTime         EQU        50      ;miliseconds to debounce the keypad
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    2


LOC  OBJ                  LINE     SOURCE

  012C                =1    51     RepeatRate           EQU        300     ;miliseconds between auto-repeat
                      =1    52     
  00FF                =1    53     NoButtonPressed      EQU   0FFh         ;indicates no button pressed
                      =1    54     
  0000                =1    55     ButtonAddress        EQU   0            ;starting address of buttons
                      =1    56     
  00BF                =1    57     KeyCodeOffset        EQU   191          ;value subtracted from button bit
                      =1    58                                             ;pattern to index into KeyCodeTable
                      =1    59     
  0006                =1    60     MaxKeyCode           EQU    6           ;largest valid key code
                            61 +1  $INCLUDE(QUEUE.INC)
                      =1    62     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    63     ;                                                                            ;
                      =1    64     ;                                   QUEUE                                    ;
                      =1    65     ;                             Conversion Functions                           ;
                      =1    66     ;                                   EE/CS 51                                 ;
                      =1    67     ;                                                                            ;
                      =1    68     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1    69     
                      =1    70     
                      =1    71     ; This file contains the definitions for the queue structure and several
                      =1    72     ; constants.
                      =1    73     ;
                      =1    74     ; Revision History:
                      =1    75     ;   10/20/15    Tim Liu   Wrote struct definition
                      =1    76     ;   10/21/15    Tim Liu   Changed names to avoid protected names
                      =1    77     ;   10/22/15    Tim Liu   Updated comments
                      =1    78     ;   4/21/16     Tim Liu   Changed array_size to 256 bytes
                      =1    79     
                      =1    80     ;Queue definitions
                      =1    81     
  0100                =1    82     array_size         EQU     256    ;number of bytes in a queue
  00FF                =1    83     ModByteMask        EQU     255    ;number to AND with to get mod 1024
  007F                =1    84     ModWordMask        EQU     127     ;number to AND with to get mod 512
                      =1    85     
  0001                =1    86     WordQueueType      EQU        1    ;make a word queue
  0000                =1    87     ByteQueueType      EQU        0    ;make a byte queue
                      =1    88     
                      =1    89     ; Structure for queue
                      =1    90     
----                  =1    91     QueueStruct    STRUC
0000                  =1    92         word_byte  DB                 ?     ;size of each element
0001                  =1    93         filled     DW                 ?     ;number of elements filled
0003                  =1    94         head       DW                 ?     ;value of head index
0005                  =1    95         tail       DW                 ?     ;value of tail index
0007                  =1    96         content    DB array_size DUP (?)    ;array for storing contents
----                  =1    97     QueueStruct    ENDS
                            98 +1  $INCLUDE(GENERAL.INC)
                      =1    99     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      =1   100     ;                                                                            ;
                      =1   101     ;                                  General.INC                               ;
                      =1   102     ;                               General include file                         ;
                      =1   103     ;                                   EE/CS 51                                 ;
                      =1   104     ;                                                                            ;
                      =1   105     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    3


LOC  OBJ                  LINE     SOURCE

                      =1   106     
                      =1   107     ; This file contains general definitions and constants.
                      =1   108     ;
                      =1   109     ; Revision History:
                      =1   110     ;    11/3/15     Timothy Liu     initial revision
                      =1   111     ;    11/5/15     Timothy Liu     fixed formatting
                      =1   112     ;    11/5/15     Timothy Liu     update for HW6 - added timer1vec
                      =1   113     ;    11/17/15    Timothy Liu     update for HW7 - added Serial_Vector and INT2EOI
                      =1   114     ;    11/19/15    Timothy Liu     removed interrupt related definitions
                      =1   115     ;    12/5/15     Timothy Liu     added ASCII definitions
                      =1   116     
                      =1   117     
                      =1   118     
  0004                =1   119     BitsPerNibble        EQU        4         ;number of bits in a nibble
                      =1   120     
  0002                =1   121     OffSize              EQU        2         ;offset size in bytes
                      =1   122     
                      =1   123     ;Ascii definitions
  000D                =1   124     ASCII_CR             EQU       13         ;ASCII carriage return
  0044                =1   125     ASCII_D              EQU       68         ;ASCII code for D
  0045                =1   126     ASCII_E              EQU       69         ;ASCII E
  0046                =1   127     ASCII_F              EQU       70         ;F character for fire (laser on)
  004C                =1   128     ASCII_L              EQU       76         ;L character
  004F                =1   129     ASCII_O              EQU       79         ;O character for off (laser off)
  0053                =1   130     ASCII_S              EQU       83         ;S character
  0000                =1   131     ASCII_NULL           EQU        0         ;ASCII null character
  0020                =1   132     ASCII_SPACE          EQU       32         ;ASCII space
  003A                =1   133     ASCII_COLON          EQU       58         ;ASCII colon
                      =1   134     
  0001                =1   135     TRUE                 EQU        1         ;true
  0000                =1   136     FALSE                EQU        0         ;false
                      =1   137     
  0002                =1   138     WORD_SIZE            EQU        2         ;2 bytes per word
                           139     
                           140     
                           141     CGROUP    GROUP    CODE
                           142     DGROUP    GROUP    DATA
                           143     
----                       144     CODE SEGMENT PUBLIC 'CODE'
                           145     
                           146             ASSUME  CS:CGROUP, DS:DGROUP
                           147     
                           148     ;external function declarations
                           149     
                           150         EXTRN    QueueInit:NEAR                 ;initializes a queue
                           151         EXTRN    QueueFull:NEAR                 ;check if queue is full
                           152         EXTRN    Enqueue:NEAR                   ;add event to queue
                           153         EXTRN    QueueEmpty:NEAR                ;check if the queue is empty
                           154         EXTRN    Dequeue:NEAR                   ;remove element from queue
                           155     
                           156     ;Name:               InitButtons
                           157     ;
                           158     ;Description:        This function initializes the shared variables for the
                           159     ;                    button functions. The function sets the value of
                           160     ;                    DebounceCnt to zero and sets LastRead to NoKeyPressed.
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     ;
                           162     ;Operation:          The function sets each of the three shared variables
                           163     ;                    to the listed values. DebounceCnt is set to zero and
                           164     ;                    LastRead is set to NobuttonPressed.
                           165     ;
                           166     ;Arguments:          None
                           167     ;
                           168     ;Return Values:      None
                           169     ;
                           170     ;Local Variables:    None
                           171     ;
                           172     ;Shared Variables:   KeyCode (W) - code for the key being pressed
                           173     ;                    LastRead
                           174     ;
                           175     ;Input:              None
                           176     ;
                           177     ;Output:             None
                           178     ;
                           179     ;Error Handling:     None
                           180     ;
                           181     ;Algorithms:         None
                           182     ;
                           183     ;Registers Used:     None
                           184     ;
                           185     ;Known Bugs:         None
                           186     ;
                           187     ;Limitations:        None
                           188     ;
                           189     ;Last Modified:      2/4/16
                           190     
                           191     ;Outline
                           192     ;InitButtons()
                           193     ;    DebounceCnt = 0                     ;clear the debounce timer
                           194     ;    LastRead = NoButtonPressed          ;indicate no key is pressed
                           195     ;    RETURN
                           196     
                           197     
                           198     
0000                       199     InitButtons    PROC    NEAR
                           200                    PUBLIC  InitButtons
                           201     
0000                       202     InitButtonsStart:
0000 C70600003200   R      203         MOV    DebounceCnt, DebounceTime     ;load the debounce counter
0006 C6060200FF90   R      204         MOV    LastRead, NoButtonPressed     ;nothing pressed yet
                           205     
000C                       206     InitButtonsQueue:                        ;label for initializing queue
000C 56                    207         PUSH   SI                            ;save registers
000D 53                    208         PUSH   BX
                           209     
000E                       210     InitButtonsQueueArgs:                    ;set up arguments for QueueInit
000E 8D360300       R      211         LEA    SI, ButtonQueue               ;load address of the queue
0012 B300                  212         MOV    BL, ByteQueueType             ;make ButtonQueue a byte queue
0014 E80000         E      213         CALL   QueueInit                     ;initialize queue
                           214     
0017                       215     InitButtonsEnd:                          ;finished - restore registers
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    5


LOC  OBJ                  LINE     SOURCE

0017 5B                    216         POP    BX
0018 5E                    217         POP    SI
                           218     
0019 C3                    219         RET
                           220     
                           221     InitButtons ENDP
                           222     
                           223     
                           224     
                           225     ;Name:               ButtonDebounce()
                           226     ;
                           227     ;Description:        This function reads the address of the buttons to
                           228     ;                    see if a button is pressed. If a button is pressed,
                           229     ;                    the function debounces the press and enqueues the button
                           230     ;                    code to the buttonQueue using the function EnqueueEvent.
                           231     ;                    This function also implements auto repeat. If the 
                           232     ;                    same button is held down, then the button press will
                           233     ;                    be recorded every RepeatRate milliseconds. Only one
                           234     ;                    button can be pushed at a time. If multiple buttons
                           235     ;                    are pressed, the function will act like no
                           236     ;                    buttons are being pressed. This function is called by
                           237     ;                    the interrupt handler buttonHandler every millisecond.
                           238     ;
                           239     ;Operation:          When called, the function reads in from the address
                           240     ;                    buttonAddress. If the value of the input is equal to
                           241     ;                    NoButtonPressed or if the value of the input is not
                           242     ;                    equal to LastRead, then the function resets the debounce
                           243     ;                    counter. If the value of the input is different from
                           244     ;                    the last input, then LastRead is updated. If the input
                           245     ;                    is the same as LastRead, then the function decrements
                           246     ;                    DebounceCnt. Once DebounceCnt reaches zero, the function
                           247     ;                    calls EnqueueEvent and enqueues the key press to the
                           248     ;                    buttonQueue.
                           249     ;
                           250     ;Arguments:          None
                           251     ;
                           252     ;Return Values:      None
                           253     ;
                           254     ;Local Variables:    KeyInput (AL) - input from the key being pressed.
                           255     ;
                           256     ;Shared Variables:   DebounceCnt (R/W) - how many additional interrupts
                           257     ;                    must occur before the button press is debounced
                           258     ;                    LastRead (R/W) - the value of the last key that was
                           259     ;                    pressed.
                           260     ;
                           261     ;Input:              8 possible button presses from 8 different buttons
                           262     ;
                           263     ;Output:             None
                           264     ;
                           265     ;Error Handling:     None
                           266     ;
                           267     ;Algorithms:         None
                           268     ;
                           269     ;Registers Changed:  Flag registers
                           270     ;
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;Known Bugs:         None
                           272     ;
                           273     ;Limitations:        None
                           274     ;
                           275     ;Last Modified:      4/24/16
                           276     ;
                           277     ;Outline
                           278     ;
                           279     ;buttonDebounce()
                           280     
                           281     ;Input(ReadAddress, buttonInput)          ;read a word from the port
                           282     ;
                           283     ;IF (ButtonInput == NoKeyPressed) OR      ;check if button was pressed
                           284     ;    (ButtonInput != LastRead):           ;check if button is same
                           285     ;    DebounceCnt = DebounceTime           ;reset the debounce counter
                           286     ;    LastRead = KeyInput                  ;update which button was pressed
                           287     ;
                           288     ;ELSE:                                    ;if a button was pressed
                           289     ;    DebounceCnt --                       ;debounce the button
                           290     ;    IF DebounceCnt == 0:                 ;button is debounced
                           291     ;        CALL EnQueue                     ;enqueue the button press event
                           292     ;        DebounceCnt = RepeatRate         ;implement auto-repeat
                           293     ;
                           294     ;RETURN
                           295     
                           296     
001A                       297     ButtonDebounce        PROC    NEAR
                           298                           PUBLIC  ButtonDebounce
                           299     
                           300     
001A                       301     ButtonDebounceStart:
001A 50                    302         PUSH  AX                               ;save registers
001B 56                    303         PUSH  SI
                           304     
001C                       305     ButtonDebounceRead:
001C 32E4                  306         XOR    AH, AH                          ;clear high byte
001E E400                  307         IN     AL, ButtonAddress               ;read the button byte
                           308     
0020                       309     CheckButtonPressed:
0020 3CFF                  310         CMP    AL, NoButtonPressed             ;check if no button is pressed
0022 7409                  311         JE     ResetPress                      ;if no key pressed, go to label
                           312     
0024 3A060200       R      313         CMP    AL, LastRead                    ;check if button is same as last
0028 7503                  314         JNE    ResetPress                      ;reset if different button
002A EB1490                315         JMP    HaveButton                      ;otherwise take care of button
                           316     
002D                       317     ResetPress:
002D C70600003200   R      318         MOV    DebounceCnt, DebounceTime       ;reset the debounce counter
0033 3CFF                  319         CMP    AL, NoButtonPressed             ;if a different key is pressed
0035 7503                  320         JNE    UpdateLastPressed               ;then update the last pressed
0037 EB3F90                321         JMP    ButtonDebounceEnd               ;finish the function
                           322     
003A                       323     UpdateLastpressed:
003A A20200         R      324         MOV    LastRead, AL                    ;update last read key
003D EB3990                325         JMP    ButtonDebounceEnd               ;end
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    7


LOC  OBJ                  LINE     SOURCE

                           326     
0040                       327     HaveButton:
0040 FF0E0000       R      328         DEC    DebounceCnt                      ;one fewer cycle to wait
0044 833E000000     R      329         CMP    DebounceCnt, 0                   ;check if debounce is over
0049 7403                  330         JE     ConButton2Code                   ;convert bit pattern to key code
004B EB2B90                331         JMP    ButtonDebounceEnd                ;otherwise end the function
                           332     
004E                       333     ConButton2Code:                            ;convert bit pattern to key code
004E 2DBF00                334         SUB    AX, KeyCodeOffset               ;bit pattern to table offset
0051 8BD8                  335         MOV    BX, AX                          ;copy table offset to indexing register
0053 2E8A87A400     R      336         MOV    AL, CS:KeyCodeTable[BX]         ;look up key code
0058 3D0600                337         CMP    AX, MaxKeyCode                  ;check if key code is valid
005B 771B                  338         JA     ButtonDebounceEnd               ;invalid key code
005D EB0190                339         JMP    SendButtonPress                 ;otherwise send the press
                           340     
0060                       341     SendButtonPress:
                           342             
0060 8D360300       R      343         LEA    SI, ButtonQueue                  ;load address - arg for queue funds
0064 E80000         E      344         CALL   QueueFull                        ;Check if the queue is full
0067 740C                  345         JZ     ButtonDebounceQFull              ;full - jump to emergency label
                           346     
0069 E80000         E      347         CALL   EnQueue                          ;if not full, enqueue key pattern
006C C70600002C01   R      348         MOV    DebounceCnt, RepeatRate          ;set up auto repeat
0072 EB0490                349         JMP    ButtonDebounceEnd                ;go to function end
                           350     
0075                       351     ButtonDebounceQFull:
0075 EB0190                352         JMP   ButtonDebounceEnd                 ;nothing for now - later set
                           353                                                 ;an abort flag
                           354     
0078                       355     ButtonDebounceEnd:
0078 5E                    356         POP    SI                               ;restore registers
0079 58                    357         POP    AX
007A C3                    358         RET                                     ;end of function - return
                           359     
                           360     ButtonDebounce ENDP
                           361     
                           362     
                           363     
                           364     
                           365     ;Name:               Key_Available
                           366     ;
                           367     ;Description:        This function checks if there is a button press ready
                           368     ;                    for processing. The function calls QueueEmpty to check
                           369     ;                    if the buttonQueue is empty. If buttonQueue is empty,
                           370     ;                    then the function returns TRUE and if there is no
                           371     ;                    button press ready the function returns FALSE.
                           372     ;
                           373     ;Operation:          Call QueueEmpty to check if the buttonQueue has any
                           374     ;                    elements in it. If QueueEmpty returns with the 
                           375     ;                    buttonQueue empty, the function returns with FALSE in
                           376     ;                    AX. Otherwise, the function returns TRUE in AX.
                           377     ;
                           378     ;Arguments:          None
                           379     ;
                           380     ;Return Values:      Havebutton (AX) - TRUE if a button is ready to be
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    8


LOC  OBJ                  LINE     SOURCE

                           381     ;                    processed; FALSE if no button press
                           382     ;
                           383     ;Local Variables:    QueueAddress (SI) - address of queue. Argument to
                           384     ;                    QueueEmpty
                           385     ;
                           386     ;Shared Variables:   None
                           387     ;
                           388     ;Output:             None
                           389     ;
                           390     ;Error Handling:     None
                           391     ;
                           392     ;Algorithms:         None
                           393     ;
                           394     ;Registers Used:     AX
                           395     ;
                           396     ;Known Bugs:         None
                           397     ;
                           398     ;Limitations:        None
                           399     ;
                           400     ;Last Modified:      4/24/16
                           401     
                           402     ;Outline
                           403     ;Key_Available():
                           404     ;    QueueAddress = Address(buttonQueue)        ;load the argument
                           405     ;    IF QueueEmpty(QueueAddress) == TRUE:       ;call function to check if
                           406     ;                                               ;button queue is empty
                           407     ;        HaveButton == FALSE                    ;no button available
                           408     ;    ELSE:                                      ;otherwise, thereb^^s a button
                           409     ;        HaveButton == TRUE                     ;indicate a button is ready
                           410     ;    RETURN
                           411     
007B                       412     Key_Available    PROC    NEAR
                           413                      PUBLIC  Key_Available
                           414     
007B                       415     Key_AvailableStart:
007B 56                    416         PUSH    SI                                  ;save register
                           417     
007C                       418     Key_AvailableCheck:                             ;check if queue is empty
007C 8D360300       R      419         LEA     SI, ButtonQueue                     ;load QueueEmpty argument
0080 E80000         E      420         CALL    QueueEmpty                          ;check if queue is empty
0083 7409                  421         JZ      Key_AvailableNo                     ;Queue empty - no key
0085 EB0190                422         JMP     Key_AvailableYes                    ;otherwise there is key
                           423         
                           424     
0088                       425     Key_AvailableYes:                               ;label if key is available
0088 B80100                426         MOV    AX, TRUE                             ;load return value
008B EB0790                427         JMP    Key_AvailableDone                    ;finish function
                           428     
008E                       429     Key_AvailableNo:                                ;label if no key available
008E B80000                430         MOV    AX, FALSE                            ;load return value
0091 EB0190                431         JMP    Key_AvailableDone                    ;finish function
                           432     
0094                       433     Key_AvailableDone:                              ;end of function
0094 5E                    434         POP     SI                                  ;restore register
0095 C3                    435         RET
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE    9


LOC  OBJ                  LINE     SOURCE

                           436     
                           437     Key_Available    ENDP
                           438     
                           439     
                           440     ;Name:               getkey
                           441     ;
                           442     ;Description:        This function returns the key code for a debounced
                           443     ;                    key. The function does not return until it has
                           444     ;                    a valid key.                    
                           445     ;
                           446     ;Operation:          Load the starting address of the button queue to
                           447     ;                    register SI. Clear out AX. Then, call Dequeue
                           448     ;                    to remove a button event from the button queue.
                           449     ;                    Return with the button key code.
                           450     ;
                           451     ;Arguments:          None
                           452     ;
                           453     ;Return Values:      KeyCode (AX) - key code corresponding to one of the
                           454     ;                    key presses.
                           455     ;
                           456     ;Local Variables:    QueueAddress (SI) - address of queue. Argument to
                           457     ;                    QueueEmpty
                           458     ;
                           459     ;Shared Variables:   None
                           460     ;
                           461     ;Output:             None
                           462     ;
                           463     ;Error Handling:     None
                           464     ;
                           465     ;Algorithms:         None
                           466     ;
                           467     ;Registers Used:     AX
                           468     ;
                           469     ;Known Bugs:         None
                           470     ;
                           471     ;Limitations:        None
                           472     ;
                           473     ;Last Modified:      4/24/16
                           474     
                           475     ;Outline
                           476     
0096                       477     GetKey        PROC    NEAR
                           478                   PUBLIC  GetKey
                           479     
0096                       480     GetKeyStart:                               ;starting label
0096 56                    481         PUSH    SI                             ;save the registers
0097 53                    482         PUSH    BX                             
0098 33C0                  483         XOR     AX, AX                         ;clear out return register
                           484     
009A                       485     GetKeyDequeue:
009A 8D360300       R      486         LEA    SI, ButtonQueue                 ;argument for Dequeue
009E E80000         E      487         CALL   DeQueue                         ;remove button press from queue
                           488     
00A1                       489     GetKeyDone:                                ;end of function
00A1 5B                    490         POP    BX                              ;restore registers
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE   10


LOC  OBJ                  LINE     SOURCE

00A2 5E                    491         POP    SI
00A3 C3                    492         RET
                           493     
                           494     GetKey    ENDP
                           495     
                           496     ; Name:  KeyCodeTable
                           497     ;
                           498     ; Description:   This table maps the bit patterns read in from the keys to
                           499     ;                the key codes that will be returned by get_key. The lowest
                           500     ;                bit pattern read in from the keys is 191 in base 10. 191
                           501     ;                is subtracted from the bit patterns, and the result is used
                           502     ;                to index into the table.
                           503     ; Author:        Timothy Liu
                           504     ; Last Modified  4/26/16
                           505     
00A4                       506     KeyCodeTable        LABEL    BYTE
                           507                         PUBLIC   KeyCodeTable
                           508     
                           509     ;        DB        KeyCode
00A4 00                    510              DB        0        ;SW3 - 0
00A5 07                    511              DB        7        ;Invalid key - 1     
00A6 07                    512              DB        7        ;Invalid key - 2     
00A7 07                    513              DB        7        ;Invalid key - 3     
00A8 07                    514              DB        7        ;Invalid key - 4     
00A9 07                    515              DB        7        ;Invalid key - 5     
00AA 07                    516              DB        7        ;Invalid key - 6     
00AB 07                    517              DB        7        ;Invalid key - 7     
00AC 07                    518              DB        7        ;Invalid key - 8     
00AD 07                    519              DB        7        ;Invalid key - 9     
00AE 07                    520              DB        7        ;Invalid key - 10     
00AF 07                    521              DB        7        ;Invalid key - 11     
00B0 07                    522              DB        7        ;Invalid key - 12     
00B1 07                    523              DB        7        ;Invalid key - 13     
00B2 07                    524              DB        7        ;Invalid key - 14     
00B3 07                    525              DB        7        ;Invalid key - 15     
00B4 07                    526              DB        7        ;Invalid key - 16     
00B5 07                    527              DB        7        ;Invalid key - 17     
00B6 07                    528              DB        7        ;Invalid key - 18     
00B7 07                    529              DB        7        ;Invalid key - 19     
00B8 07                    530              DB        7        ;Invalid key - 20     
00B9 07                    531              DB        7        ;Invalid key - 21    
00BA 07                    532              DB        7        ;Invalid key - 22    
00BB 07                    533              DB        7        ;Invalid key - 23    
00BC 07                    534              DB        7        ;Invalid key - 24    
00BD 07                    535              DB        7        ;Invalid key - 25    
00BE 07                    536              DB        7        ;Invalid key - 26    
00BF 07                    537              DB        7        ;Invalid key - 27    
00C0 07                    538              DB        7        ;Invalid key - 28    
00C1 07                    539              DB        7        ;Invalid key - 29    
00C2 07                    540              DB        7        ;Invalid key - 30    
00C3 07                    541              DB        7        ;Invalid key - 31    
00C4 01                    542              DB        1        ;SW4 - 32    
00C5 07                    543              DB        7        ;Invalid key - 33    
00C6 07                    544              DB        7        ;Invalid key - 34    
00C7 07                    545              DB        7        ;Invalid key - 35    
8086/87/88/186 MACRO ASSEMBLER    BUTTON                                                   13:30:59  05/01/;6  PAGE   11


LOC  OBJ                  LINE     SOURCE

00C8 07                    546              DB        7        ;Invalid key - 36    
00C9 07                    547              DB        7        ;Invalid key - 37    
00CA 07                    548              DB        7        ;Invalid key - 38    
00CB 07                    549              DB        7        ;Invalid key - 39    
00CC 07                    550              DB        7        ;Invalid key - 40    
00CD 07                    551              DB        7        ;Invalid key - 41    
00CE 07                    552              DB        7        ;Invalid key - 42    
00CF 07                    553              DB        7        ;Invalid key - 43    
00D0 07                    554              DB        7        ;Invalid key - 44    
00D1 07                    555              DB        7        ;Invalid key - 45    
00D2 07                    556              DB        7        ;Invalid key - 46    
00D3 07                    557              DB        7        ;Invalid key - 47    
00D4 02                    558              DB        2        ;SW5 - 48    
00D5 07                    559              DB        7        ;Invalid key - 49    
00D6 07                    560              DB        7        ;Invalid key - 50    
00D7 07                    561              DB        7        ;Invalid key - 51    
00D8 07                    562              DB        7        ;Invalid key - 52    
00D9 07                    563              DB        7        ;Invalid key - 53    
00DA 07                    564              DB        7        ;Invalid key - 54    
00DB 07                    565              DB        7        ;Invalid key - 55    
00DC 03                    566              DB        3        ;SW6 - 56    
00DD 07                    567              DB        7        ;Invalid key - 57    
00DE 07                    568              DB        7        ;Invalid key - 58    
00DF 07                    569              DB        7        ;Invalid key - 59    
00E0 04                    570              DB        4        ;SW7 - 60    
00E1 07                    571              DB        7        ;Invalid key - 61
00E2 05                    572              DB        5        ;SW8 - 62    
00E3 06                    573              DB        6        ;SW9 - 63    
                           574         
                           575          
                           576     
                           577     
                           578     
----                       579     CODE ENDS
                           580     
                           581     ;start data segment
                           582     
----                       583     DATA    SEGMENT PUBLIC  'DATA'
                           584     
0000 ????                  585     DebounceCnt        DW    ?     ;how many more irq before calling Enqueue
0002 ??                    586     LastRead           DB    ?     ;value of last key read after masking
0003 ??                    587     ButtonQueue    QueueStruct<>   ;allocate the button queue
0004 ????
0006 ????
0008 ????
000A (256
     ??
     )
                           588     
                           589     
----                       590     DATA ENDS
                           591     
                           592     
                           593     END

ASSEMBLY COMPLETE, NO ERRORS FOUND
